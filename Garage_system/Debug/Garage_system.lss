
Garage_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001014  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00001014  000010a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080009c  0080009c  000010e4  2**0
                  ALLOC
  3 .stab         00001de8  00000000  00000000  000010e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000005e2  00000000  00000000  00002ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000034b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001122  00000000  00000000  00003610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000067f  00000000  00000000  00004732  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b6e  00000000  00000000  00004db1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000388  00000000  00000000  00005920  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044a  00000000  00000000  00005ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a15  00000000  00000000  000060f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ba 03 	jmp	0x774	; 0x774 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 39       	cpi	r26, 0x9D	; 157
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 74 03 	call	0x6e8	; 0x6e8 <main>
      8a:	0c 94 08 08 	jmp	0x1010	; 0x1010 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:
#include <avr/io.h>
#include "std_macros.h"

void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber, unsigned char direction)
{
	switch (portname)
      92:	84 34       	cpi	r24, 0x44	; 68
      94:	09 f4       	brne	.+2      	; 0x98 <DIO_vsetPINDir+0x6>
      96:	71 c0       	rjmp	.+226    	; 0x17a <DIO_vsetPINDir+0xe8>
      98:	85 34       	cpi	r24, 0x45	; 69
      9a:	48 f4       	brcc	.+18     	; 0xae <DIO_vsetPINDir+0x1c>
      9c:	82 34       	cpi	r24, 0x42	; 66
      9e:	99 f1       	breq	.+102    	; 0x106 <DIO_vsetPINDir+0x74>
      a0:	83 34       	cpi	r24, 0x43	; 67
      a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_vsetPINDir+0x14>
      a4:	4d c0       	rjmp	.+154    	; 0x140 <DIO_vsetPINDir+0xae>
      a6:	81 34       	cpi	r24, 0x41	; 65
      a8:	09 f0       	breq	.+2      	; 0xac <DIO_vsetPINDir+0x1a>
      aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_vsetPINDir+0x120>
      ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_vsetPINDir+0x3a>
      ae:	82 36       	cpi	r24, 0x62	; 98
      b0:	51 f1       	breq	.+84     	; 0x106 <DIO_vsetPINDir+0x74>
      b2:	83 36       	cpi	r24, 0x63	; 99
      b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_vsetPINDir+0x2c>
      b6:	81 36       	cpi	r24, 0x61	; 97
      b8:	09 f0       	breq	.+2      	; 0xbc <DIO_vsetPINDir+0x2a>
      ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_vsetPINDir+0x120>
      bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_vsetPINDir+0x3a>
      be:	83 36       	cpi	r24, 0x63	; 99
      c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_vsetPINDir+0x32>
      c2:	3e c0       	rjmp	.+124    	; 0x140 <DIO_vsetPINDir+0xae>
      c4:	84 36       	cpi	r24, 0x64	; 100
      c6:	09 f0       	breq	.+2      	; 0xca <DIO_vsetPINDir+0x38>
      c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_vsetPINDir+0x120>
      ca:	57 c0       	rjmp	.+174    	; 0x17a <DIO_vsetPINDir+0xe8>
	{
		case'A':
		case 'a':
		if(direction==1)
      cc:	41 30       	cpi	r20, 0x01	; 1
      ce:	69 f4       	brne	.+26     	; 0xea <DIO_vsetPINDir+0x58>
		{
			SET_BIT(DDRA,pinnumber);
      d0:	2a b3       	in	r18, 0x1a	; 26
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	ac 01       	movw	r20, r24
      d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_vsetPINDir+0x4c>
      da:	44 0f       	add	r20, r20
      dc:	55 1f       	adc	r21, r21
      de:	6a 95       	dec	r22
      e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_vsetPINDir+0x48>
      e2:	ba 01       	movw	r22, r20
      e4:	62 2b       	or	r22, r18
      e6:	6a bb       	out	0x1a, r22	; 26
      e8:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);
      ea:	2a b3       	in	r18, 0x1a	; 26
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	ac 01       	movw	r20, r24
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_vsetPINDir+0x66>
      f4:	44 0f       	add	r20, r20
      f6:	55 1f       	adc	r21, r21
      f8:	6a 95       	dec	r22
      fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_vsetPINDir+0x62>
      fc:	ba 01       	movw	r22, r20
      fe:	60 95       	com	r22
     100:	62 23       	and	r22, r18
     102:	6a bb       	out	0x1a, r22	; 26
     104:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(direction==1)
     106:	41 30       	cpi	r20, 0x01	; 1
     108:	69 f4       	brne	.+26     	; 0x124 <DIO_vsetPINDir+0x92>
		{
			SET_BIT(DDRB,pinnumber);
     10a:	27 b3       	in	r18, 0x17	; 23
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	ac 01       	movw	r20, r24
     112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_vsetPINDir+0x86>
     114:	44 0f       	add	r20, r20
     116:	55 1f       	adc	r21, r21
     118:	6a 95       	dec	r22
     11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_vsetPINDir+0x82>
     11c:	ba 01       	movw	r22, r20
     11e:	62 2b       	or	r22, r18
     120:	67 bb       	out	0x17, r22	; 23
     122:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);
     124:	27 b3       	in	r18, 0x17	; 23
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	ac 01       	movw	r20, r24
     12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_vsetPINDir+0xa0>
     12e:	44 0f       	add	r20, r20
     130:	55 1f       	adc	r21, r21
     132:	6a 95       	dec	r22
     134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_vsetPINDir+0x9c>
     136:	ba 01       	movw	r22, r20
     138:	60 95       	com	r22
     13a:	62 23       	and	r22, r18
     13c:	67 bb       	out	0x17, r22	; 23
     13e:	08 95       	ret
		}
		break;
		case'C':
		case'c':
		if(direction==1)
     140:	41 30       	cpi	r20, 0x01	; 1
     142:	69 f4       	brne	.+26     	; 0x15e <DIO_vsetPINDir+0xcc>
		{
			SET_BIT(DDRC,pinnumber);
     144:	24 b3       	in	r18, 0x14	; 20
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	ac 01       	movw	r20, r24
     14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_vsetPINDir+0xc0>
     14e:	44 0f       	add	r20, r20
     150:	55 1f       	adc	r21, r21
     152:	6a 95       	dec	r22
     154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_vsetPINDir+0xbc>
     156:	ba 01       	movw	r22, r20
     158:	62 2b       	or	r22, r18
     15a:	64 bb       	out	0x14, r22	; 20
     15c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);
     15e:	24 b3       	in	r18, 0x14	; 20
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	ac 01       	movw	r20, r24
     166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vsetPINDir+0xda>
     168:	44 0f       	add	r20, r20
     16a:	55 1f       	adc	r21, r21
     16c:	6a 95       	dec	r22
     16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vsetPINDir+0xd6>
     170:	ba 01       	movw	r22, r20
     172:	60 95       	com	r22
     174:	62 23       	and	r22, r18
     176:	64 bb       	out	0x14, r22	; 20
     178:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(direction==1)
     17a:	41 30       	cpi	r20, 0x01	; 1
     17c:	69 f4       	brne	.+26     	; 0x198 <DIO_vsetPINDir+0x106>
		{
			SET_BIT(DDRD,pinnumber);
     17e:	21 b3       	in	r18, 0x11	; 17
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	ac 01       	movw	r20, r24
     186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_vsetPINDir+0xfa>
     188:	44 0f       	add	r20, r20
     18a:	55 1f       	adc	r21, r21
     18c:	6a 95       	dec	r22
     18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_vsetPINDir+0xf6>
     190:	ba 01       	movw	r22, r20
     192:	62 2b       	or	r22, r18
     194:	61 bb       	out	0x11, r22	; 17
     196:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);
     198:	21 b3       	in	r18, 0x11	; 17
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	ac 01       	movw	r20, r24
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_vsetPINDir+0x114>
     1a2:	44 0f       	add	r20, r20
     1a4:	55 1f       	adc	r21, r21
     1a6:	6a 95       	dec	r22
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_vsetPINDir+0x110>
     1aa:	ba 01       	movw	r22, r20
     1ac:	60 95       	com	r22
     1ae:	62 23       	and	r22, r18
     1b0:	61 bb       	out	0x11, r22	; 17
     1b2:	08 95       	ret

000001b4 <DIO_write>:
}

void DIO_write(unsigned char portname, unsigned char pinnumber, unsigned char output)
{

	switch (portname)
     1b4:	84 34       	cpi	r24, 0x44	; 68
     1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_write+0x6>
     1b8:	71 c0       	rjmp	.+226    	; 0x29c <DIO_write+0xe8>
     1ba:	85 34       	cpi	r24, 0x45	; 69
     1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_write+0x1c>
     1be:	82 34       	cpi	r24, 0x42	; 66
     1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_write+0x74>
     1c2:	83 34       	cpi	r24, 0x43	; 67
     1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_write+0x14>
     1c6:	4d c0       	rjmp	.+154    	; 0x262 <DIO_write+0xae>
     1c8:	81 34       	cpi	r24, 0x41	; 65
     1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_write+0x1a>
     1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_write+0x120>
     1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_write+0x3a>
     1d0:	82 36       	cpi	r24, 0x62	; 98
     1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_write+0x74>
     1d4:	83 36       	cpi	r24, 0x63	; 99
     1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_write+0x2c>
     1d8:	81 36       	cpi	r24, 0x61	; 97
     1da:	09 f0       	breq	.+2      	; 0x1de <DIO_write+0x2a>
     1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_write+0x120>
     1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_write+0x3a>
     1e0:	83 36       	cpi	r24, 0x63	; 99
     1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_write+0x32>
     1e4:	3e c0       	rjmp	.+124    	; 0x262 <DIO_write+0xae>
     1e6:	84 36       	cpi	r24, 0x64	; 100
     1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_write+0x38>
     1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_write+0x120>
     1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_write+0xe8>
	{
		case'A':
		case 'a':
		if(output==1)
     1ee:	41 30       	cpi	r20, 0x01	; 1
     1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_write+0x58>
		{
			SET_BIT(PORTA,pinnumber);
     1f2:	2b b3       	in	r18, 0x1b	; 27
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	ac 01       	movw	r20, r24
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_write+0x4c>
     1fc:	44 0f       	add	r20, r20
     1fe:	55 1f       	adc	r21, r21
     200:	6a 95       	dec	r22
     202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_write+0x48>
     204:	ba 01       	movw	r22, r20
     206:	62 2b       	or	r22, r18
     208:	6b bb       	out	0x1b, r22	; 27
     20a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
     20c:	2b b3       	in	r18, 0x1b	; 27
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	ac 01       	movw	r20, r24
     214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_write+0x66>
     216:	44 0f       	add	r20, r20
     218:	55 1f       	adc	r21, r21
     21a:	6a 95       	dec	r22
     21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_write+0x62>
     21e:	ba 01       	movw	r22, r20
     220:	60 95       	com	r22
     222:	62 23       	and	r22, r18
     224:	6b bb       	out	0x1b, r22	; 27
     226:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(output==1)
     228:	41 30       	cpi	r20, 0x01	; 1
     22a:	69 f4       	brne	.+26     	; 0x246 <DIO_write+0x92>
		{
			SET_BIT(PORTB,pinnumber);
     22c:	28 b3       	in	r18, 0x18	; 24
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	ac 01       	movw	r20, r24
     234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_write+0x86>
     236:	44 0f       	add	r20, r20
     238:	55 1f       	adc	r21, r21
     23a:	6a 95       	dec	r22
     23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_write+0x82>
     23e:	ba 01       	movw	r22, r20
     240:	62 2b       	or	r22, r18
     242:	68 bb       	out	0x18, r22	; 24
     244:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
     246:	28 b3       	in	r18, 0x18	; 24
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	ac 01       	movw	r20, r24
     24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_write+0xa0>
     250:	44 0f       	add	r20, r20
     252:	55 1f       	adc	r21, r21
     254:	6a 95       	dec	r22
     256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_write+0x9c>
     258:	ba 01       	movw	r22, r20
     25a:	60 95       	com	r22
     25c:	62 23       	and	r22, r18
     25e:	68 bb       	out	0x18, r22	; 24
     260:	08 95       	ret
		}
		break;
		case'C':
		case'c':
		if(output==1)
     262:	41 30       	cpi	r20, 0x01	; 1
     264:	69 f4       	brne	.+26     	; 0x280 <DIO_write+0xcc>
		{
			SET_BIT(PORTC,pinnumber);
     266:	25 b3       	in	r18, 0x15	; 21
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	ac 01       	movw	r20, r24
     26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_write+0xc0>
     270:	44 0f       	add	r20, r20
     272:	55 1f       	adc	r21, r21
     274:	6a 95       	dec	r22
     276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_write+0xbc>
     278:	ba 01       	movw	r22, r20
     27a:	62 2b       	or	r22, r18
     27c:	65 bb       	out	0x15, r22	; 21
     27e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
     280:	25 b3       	in	r18, 0x15	; 21
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	ac 01       	movw	r20, r24
     288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_write+0xda>
     28a:	44 0f       	add	r20, r20
     28c:	55 1f       	adc	r21, r21
     28e:	6a 95       	dec	r22
     290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_write+0xd6>
     292:	ba 01       	movw	r22, r20
     294:	60 95       	com	r22
     296:	62 23       	and	r22, r18
     298:	65 bb       	out	0x15, r22	; 21
     29a:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(output==1)
     29c:	41 30       	cpi	r20, 0x01	; 1
     29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_write+0x106>
		{
			SET_BIT(PORTD,pinnumber);
     2a0:	22 b3       	in	r18, 0x12	; 18
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	ac 01       	movw	r20, r24
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_write+0xfa>
     2aa:	44 0f       	add	r20, r20
     2ac:	55 1f       	adc	r21, r21
     2ae:	6a 95       	dec	r22
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_write+0xf6>
     2b2:	ba 01       	movw	r22, r20
     2b4:	62 2b       	or	r22, r18
     2b6:	62 bb       	out	0x12, r22	; 18
     2b8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
     2ba:	22 b3       	in	r18, 0x12	; 18
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	ac 01       	movw	r20, r24
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_write+0x114>
     2c4:	44 0f       	add	r20, r20
     2c6:	55 1f       	adc	r21, r21
     2c8:	6a 95       	dec	r22
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_write+0x110>
     2cc:	ba 01       	movw	r22, r20
     2ce:	60 95       	com	r22
     2d0:	62 23       	and	r22, r18
     2d2:	62 bb       	out	0x12, r22	; 18
     2d4:	08 95       	ret

000002d6 <DIO_u8read>:
	}
}
unsigned char DIO_u8read(unsigned char portname, unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch (portname)
     2d6:	84 34       	cpi	r24, 0x44	; 68
     2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_u8read+0x6>
     2da:	4e c0       	rjmp	.+156    	; 0x378 <DIO_u8read+0xa2>
     2dc:	85 34       	cpi	r24, 0x45	; 69
     2de:	40 f4       	brcc	.+16     	; 0x2f0 <DIO_u8read+0x1a>
     2e0:	82 34       	cpi	r24, 0x42	; 66
     2e2:	31 f1       	breq	.+76     	; 0x330 <DIO_u8read+0x5a>
     2e4:	83 34       	cpi	r24, 0x43	; 67
     2e6:	b0 f5       	brcc	.+108    	; 0x354 <DIO_u8read+0x7e>
     2e8:	81 34       	cpi	r24, 0x41	; 65
     2ea:	09 f0       	breq	.+2      	; 0x2ee <DIO_u8read+0x18>
     2ec:	57 c0       	rjmp	.+174    	; 0x39c <DIO_u8read+0xc6>
     2ee:	0e c0       	rjmp	.+28     	; 0x30c <DIO_u8read+0x36>
     2f0:	82 36       	cpi	r24, 0x62	; 98
     2f2:	f1 f0       	breq	.+60     	; 0x330 <DIO_u8read+0x5a>
     2f4:	83 36       	cpi	r24, 0x63	; 99
     2f6:	20 f4       	brcc	.+8      	; 0x300 <DIO_u8read+0x2a>
     2f8:	81 36       	cpi	r24, 0x61	; 97
     2fa:	09 f0       	breq	.+2      	; 0x2fe <DIO_u8read+0x28>
     2fc:	4f c0       	rjmp	.+158    	; 0x39c <DIO_u8read+0xc6>
     2fe:	06 c0       	rjmp	.+12     	; 0x30c <DIO_u8read+0x36>
     300:	83 36       	cpi	r24, 0x63	; 99
     302:	41 f1       	breq	.+80     	; 0x354 <DIO_u8read+0x7e>
     304:	84 36       	cpi	r24, 0x64	; 100
     306:	09 f0       	breq	.+2      	; 0x30a <DIO_u8read+0x34>
     308:	49 c0       	rjmp	.+146    	; 0x39c <DIO_u8read+0xc6>
     30a:	36 c0       	rjmp	.+108    	; 0x378 <DIO_u8read+0xa2>
	{
		case'A':
		case 'a':
		return_value=READ_BIT(PINA,pinnumber);
     30c:	29 b3       	in	r18, 0x19	; 25
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	06 2e       	mov	r0, r22
     314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_u8read+0x44>
     316:	88 0f       	add	r24, r24
     318:	99 1f       	adc	r25, r25
     31a:	0a 94       	dec	r0
     31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_u8read+0x40>
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	82 23       	and	r24, r18
     322:	93 23       	and	r25, r19
     324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_u8read+0x54>
     326:	95 95       	asr	r25
     328:	87 95       	ror	r24
     32a:	6a 95       	dec	r22
     32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_u8read+0x50>
		break;
     32e:	08 95       	ret
		case'B':
		case'b':
		return_value=READ_BIT(PINB,pinnumber);
     330:	26 b3       	in	r18, 0x16	; 22
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	06 2e       	mov	r0, r22
     338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_u8read+0x68>
     33a:	88 0f       	add	r24, r24
     33c:	99 1f       	adc	r25, r25
     33e:	0a 94       	dec	r0
     340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_u8read+0x64>
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	82 23       	and	r24, r18
     346:	93 23       	and	r25, r19
     348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_u8read+0x78>
     34a:	95 95       	asr	r25
     34c:	87 95       	ror	r24
     34e:	6a 95       	dec	r22
     350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_u8read+0x74>
		break;
     352:	08 95       	ret
		case'C':
		case'c':
		return_value=READ_BIT(PINC,pinnumber);
     354:	23 b3       	in	r18, 0x13	; 19
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	06 2e       	mov	r0, r22
     35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_u8read+0x8c>
     35e:	88 0f       	add	r24, r24
     360:	99 1f       	adc	r25, r25
     362:	0a 94       	dec	r0
     364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_u8read+0x88>
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	82 23       	and	r24, r18
     36a:	93 23       	and	r25, r19
     36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_u8read+0x9c>
     36e:	95 95       	asr	r25
     370:	87 95       	ror	r24
     372:	6a 95       	dec	r22
     374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_u8read+0x98>
		break;
     376:	08 95       	ret
		case'D':
		case'd':
		return_value=READ_BIT(PIND,pinnumber);
     378:	20 b3       	in	r18, 0x10	; 16
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	06 2e       	mov	r0, r22
     380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_u8read+0xb0>
     382:	88 0f       	add	r24, r24
     384:	99 1f       	adc	r25, r25
     386:	0a 94       	dec	r0
     388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_u8read+0xac>
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	82 23       	and	r24, r18
     38e:	93 23       	and	r25, r19
     390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_u8read+0xc0>
     392:	95 95       	asr	r25
     394:	87 95       	ror	r24
     396:	6a 95       	dec	r22
     398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_u8read+0xbc>
		break;
     39a:	08 95       	ret
		break;
	}
}
unsigned char DIO_u8read(unsigned char portname, unsigned char pinnumber)
{
	unsigned char return_value=0;
     39c:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	return return_value;
}
     39e:	08 95       	ret

000003a0 <DIO_toggle>:

void DIO_toggle (unsigned char portname, unsigned char pinnumber)
{
	switch (portname)
     3a0:	84 34       	cpi	r24, 0x44	; 68
     3a2:	09 f4       	brne	.+2      	; 0x3a6 <DIO_toggle+0x6>
     3a4:	3d c0       	rjmp	.+122    	; 0x420 <DIO_toggle+0x80>
     3a6:	85 34       	cpi	r24, 0x45	; 69
     3a8:	40 f4       	brcc	.+16     	; 0x3ba <DIO_toggle+0x1a>
     3aa:	82 34       	cpi	r24, 0x42	; 66
     3ac:	f9 f0       	breq	.+62     	; 0x3ec <DIO_toggle+0x4c>
     3ae:	83 34       	cpi	r24, 0x43	; 67
     3b0:	50 f5       	brcc	.+84     	; 0x406 <DIO_toggle+0x66>
     3b2:	81 34       	cpi	r24, 0x41	; 65
     3b4:	09 f0       	breq	.+2      	; 0x3b8 <DIO_toggle+0x18>
     3b6:	40 c0       	rjmp	.+128    	; 0x438 <DIO_toggle+0x98>
     3b8:	0c c0       	rjmp	.+24     	; 0x3d2 <DIO_toggle+0x32>
     3ba:	82 36       	cpi	r24, 0x62	; 98
     3bc:	b9 f0       	breq	.+46     	; 0x3ec <DIO_toggle+0x4c>
     3be:	83 36       	cpi	r24, 0x63	; 99
     3c0:	18 f4       	brcc	.+6      	; 0x3c8 <DIO_toggle+0x28>
     3c2:	81 36       	cpi	r24, 0x61	; 97
     3c4:	c9 f5       	brne	.+114    	; 0x438 <DIO_toggle+0x98>
     3c6:	05 c0       	rjmp	.+10     	; 0x3d2 <DIO_toggle+0x32>
     3c8:	83 36       	cpi	r24, 0x63	; 99
     3ca:	e9 f0       	breq	.+58     	; 0x406 <DIO_toggle+0x66>
     3cc:	84 36       	cpi	r24, 0x64	; 100
     3ce:	a1 f5       	brne	.+104    	; 0x438 <DIO_toggle+0x98>
     3d0:	27 c0       	rjmp	.+78     	; 0x420 <DIO_toggle+0x80>
	{
		case'A':
		case 'a':
		TOG_BIT(PORTA,pinnumber);
     3d2:	2b b3       	in	r18, 0x1b	; 27
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	ac 01       	movw	r20, r24
     3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_toggle+0x40>
     3dc:	44 0f       	add	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	6a 95       	dec	r22
     3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_toggle+0x3c>
     3e4:	ba 01       	movw	r22, r20
     3e6:	62 27       	eor	r22, r18
     3e8:	6b bb       	out	0x1b, r22	; 27
		break;
     3ea:	08 95       	ret
		case'B':
		case'b':
		TOG_BIT(PORTB,pinnumber);
     3ec:	28 b3       	in	r18, 0x18	; 24
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	ac 01       	movw	r20, r24
     3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_toggle+0x5a>
     3f6:	44 0f       	add	r20, r20
     3f8:	55 1f       	adc	r21, r21
     3fa:	6a 95       	dec	r22
     3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_toggle+0x56>
     3fe:	ba 01       	movw	r22, r20
     400:	62 27       	eor	r22, r18
     402:	68 bb       	out	0x18, r22	; 24
		break;
     404:	08 95       	ret
		case'C':
		case'c':
		TOG_BIT(PORTC,pinnumber);
     406:	25 b3       	in	r18, 0x15	; 21
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	ac 01       	movw	r20, r24
     40e:	02 c0       	rjmp	.+4      	; 0x414 <DIO_toggle+0x74>
     410:	44 0f       	add	r20, r20
     412:	55 1f       	adc	r21, r21
     414:	6a 95       	dec	r22
     416:	e2 f7       	brpl	.-8      	; 0x410 <DIO_toggle+0x70>
     418:	ba 01       	movw	r22, r20
     41a:	62 27       	eor	r22, r18
     41c:	65 bb       	out	0x15, r22	; 21
		break;
     41e:	08 95       	ret
		case'D':
		case'd':
		TOG_BIT(PORTD,pinnumber);
     420:	22 b3       	in	r18, 0x12	; 18
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	ac 01       	movw	r20, r24
     428:	02 c0       	rjmp	.+4      	; 0x42e <DIO_toggle+0x8e>
     42a:	44 0f       	add	r20, r20
     42c:	55 1f       	adc	r21, r21
     42e:	6a 95       	dec	r22
     430:	e2 f7       	brpl	.-8      	; 0x42a <DIO_toggle+0x8a>
     432:	ba 01       	movw	r22, r20
     434:	62 27       	eor	r22, r18
     436:	62 bb       	out	0x12, r22	; 18
     438:	08 95       	ret

0000043a <DIO_set_port_direction>:
		break;
	}
}
void DIO_set_port_direction(unsigned char portname, unsigned char direction)
{
	switch (portname)
     43a:	84 34       	cpi	r24, 0x44	; 68
     43c:	d9 f0       	breq	.+54     	; 0x474 <DIO_set_port_direction+0x3a>
     43e:	85 34       	cpi	r24, 0x45	; 69
     440:	38 f4       	brcc	.+14     	; 0x450 <DIO_set_port_direction+0x16>
     442:	82 34       	cpi	r24, 0x42	; 66
     444:	99 f0       	breq	.+38     	; 0x46c <DIO_set_port_direction+0x32>
     446:	83 34       	cpi	r24, 0x43	; 67
     448:	98 f4       	brcc	.+38     	; 0x470 <DIO_set_port_direction+0x36>
     44a:	81 34       	cpi	r24, 0x41	; 65
     44c:	a1 f4       	brne	.+40     	; 0x476 <DIO_set_port_direction+0x3c>
     44e:	0c c0       	rjmp	.+24     	; 0x468 <DIO_set_port_direction+0x2e>
     450:	82 36       	cpi	r24, 0x62	; 98
     452:	61 f0       	breq	.+24     	; 0x46c <DIO_set_port_direction+0x32>
     454:	83 36       	cpi	r24, 0x63	; 99
     456:	18 f4       	brcc	.+6      	; 0x45e <DIO_set_port_direction+0x24>
     458:	81 36       	cpi	r24, 0x61	; 97
     45a:	69 f4       	brne	.+26     	; 0x476 <DIO_set_port_direction+0x3c>
     45c:	05 c0       	rjmp	.+10     	; 0x468 <DIO_set_port_direction+0x2e>
     45e:	83 36       	cpi	r24, 0x63	; 99
     460:	39 f0       	breq	.+14     	; 0x470 <DIO_set_port_direction+0x36>
     462:	84 36       	cpi	r24, 0x64	; 100
     464:	41 f4       	brne	.+16     	; 0x476 <DIO_set_port_direction+0x3c>
     466:	06 c0       	rjmp	.+12     	; 0x474 <DIO_set_port_direction+0x3a>
	{
		case'A':
		case 'a':
		DDRA=direction;
     468:	6a bb       	out	0x1a, r22	; 26
		break;
     46a:	08 95       	ret
		case'B':
		case'b':
		DDRB=direction;
     46c:	67 bb       	out	0x17, r22	; 23
		break;
     46e:	08 95       	ret
		case'C':
		case'c':
		DDRC=direction;
     470:	64 bb       	out	0x14, r22	; 20
		break;
     472:	08 95       	ret
		case'D':
		case'd':
		DDRD=direction;
     474:	61 bb       	out	0x11, r22	; 17
     476:	08 95       	ret

00000478 <DIO_write_port>:
		break;
	}
}
void DIO_write_port(unsigned char portname, unsigned char output)
{
	switch (portname)
     478:	84 34       	cpi	r24, 0x44	; 68
     47a:	d9 f0       	breq	.+54     	; 0x4b2 <DIO_write_port+0x3a>
     47c:	85 34       	cpi	r24, 0x45	; 69
     47e:	38 f4       	brcc	.+14     	; 0x48e <DIO_write_port+0x16>
     480:	82 34       	cpi	r24, 0x42	; 66
     482:	99 f0       	breq	.+38     	; 0x4aa <DIO_write_port+0x32>
     484:	83 34       	cpi	r24, 0x43	; 67
     486:	98 f4       	brcc	.+38     	; 0x4ae <DIO_write_port+0x36>
     488:	81 34       	cpi	r24, 0x41	; 65
     48a:	a1 f4       	brne	.+40     	; 0x4b4 <DIO_write_port+0x3c>
     48c:	0c c0       	rjmp	.+24     	; 0x4a6 <DIO_write_port+0x2e>
     48e:	82 36       	cpi	r24, 0x62	; 98
     490:	61 f0       	breq	.+24     	; 0x4aa <DIO_write_port+0x32>
     492:	83 36       	cpi	r24, 0x63	; 99
     494:	18 f4       	brcc	.+6      	; 0x49c <DIO_write_port+0x24>
     496:	81 36       	cpi	r24, 0x61	; 97
     498:	69 f4       	brne	.+26     	; 0x4b4 <DIO_write_port+0x3c>
     49a:	05 c0       	rjmp	.+10     	; 0x4a6 <DIO_write_port+0x2e>
     49c:	83 36       	cpi	r24, 0x63	; 99
     49e:	39 f0       	breq	.+14     	; 0x4ae <DIO_write_port+0x36>
     4a0:	84 36       	cpi	r24, 0x64	; 100
     4a2:	41 f4       	brne	.+16     	; 0x4b4 <DIO_write_port+0x3c>
     4a4:	06 c0       	rjmp	.+12     	; 0x4b2 <DIO_write_port+0x3a>
	{
		case'A':
		case 'a':
		PORTA=output;
     4a6:	6b bb       	out	0x1b, r22	; 27
		break;
     4a8:	08 95       	ret
		case'B':
		case'b':
		PORTB=output;
     4aa:	68 bb       	out	0x18, r22	; 24
		break;
     4ac:	08 95       	ret
		case'C':
		case'c':
		PORTC=output;
     4ae:	65 bb       	out	0x15, r22	; 21
		break;
     4b0:	08 95       	ret
		case'D':
		case'd':
		PORTD=output;
     4b2:	62 bb       	out	0x12, r22	; 18
     4b4:	08 95       	ret

000004b6 <DIO_read_port>:
	}
}
unsigned char DIO_read_port (unsigned char portname)
{
	unsigned char return_value=0;
	switch (portname)
     4b6:	84 34       	cpi	r24, 0x44	; 68
     4b8:	d9 f0       	breq	.+54     	; 0x4f0 <DIO_read_port+0x3a>
     4ba:	85 34       	cpi	r24, 0x45	; 69
     4bc:	38 f4       	brcc	.+14     	; 0x4cc <DIO_read_port+0x16>
     4be:	82 34       	cpi	r24, 0x42	; 66
     4c0:	99 f0       	breq	.+38     	; 0x4e8 <DIO_read_port+0x32>
     4c2:	83 34       	cpi	r24, 0x43	; 67
     4c4:	98 f4       	brcc	.+38     	; 0x4ec <DIO_read_port+0x36>
     4c6:	81 34       	cpi	r24, 0x41	; 65
     4c8:	a9 f4       	brne	.+42     	; 0x4f4 <DIO_read_port+0x3e>
     4ca:	0c c0       	rjmp	.+24     	; 0x4e4 <DIO_read_port+0x2e>
     4cc:	82 36       	cpi	r24, 0x62	; 98
     4ce:	61 f0       	breq	.+24     	; 0x4e8 <DIO_read_port+0x32>
     4d0:	83 36       	cpi	r24, 0x63	; 99
     4d2:	18 f4       	brcc	.+6      	; 0x4da <DIO_read_port+0x24>
     4d4:	81 36       	cpi	r24, 0x61	; 97
     4d6:	71 f4       	brne	.+28     	; 0x4f4 <DIO_read_port+0x3e>
     4d8:	05 c0       	rjmp	.+10     	; 0x4e4 <DIO_read_port+0x2e>
     4da:	83 36       	cpi	r24, 0x63	; 99
     4dc:	39 f0       	breq	.+14     	; 0x4ec <DIO_read_port+0x36>
     4de:	84 36       	cpi	r24, 0x64	; 100
     4e0:	49 f4       	brne	.+18     	; 0x4f4 <DIO_read_port+0x3e>
     4e2:	06 c0       	rjmp	.+12     	; 0x4f0 <DIO_read_port+0x3a>
	{
		case'A':
		case 'a':
		return_value=PINA;
     4e4:	89 b3       	in	r24, 0x19	; 25
		break;
     4e6:	08 95       	ret
		case'B':
		case'b':
		return_value=PINB;
     4e8:	86 b3       	in	r24, 0x16	; 22
		break;
     4ea:	08 95       	ret
		case'C':
		case'c':
		return_value=PINC;
     4ec:	83 b3       	in	r24, 0x13	; 19
		break;
     4ee:	08 95       	ret
		case'D':
		case'd':
		return_value=PIND;
     4f0:	80 b3       	in	r24, 0x10	; 16
		break;
     4f2:	08 95       	ret
		break;
	}
}
unsigned char DIO_read_port (unsigned char portname)
{
	unsigned char return_value=0;
     4f4:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	return return_value;
}
     4f6:	08 95       	ret

000004f8 <DIO_vconnectpullup>:
void DIO_vconnectpullup(unsigned char portname, unsigned char pinnumber, unsigned char enable)
{
    switch (portname)
     4f8:	84 34       	cpi	r24, 0x44	; 68
     4fa:	09 f4       	brne	.+2      	; 0x4fe <DIO_vconnectpullup+0x6>
     4fc:	71 c0       	rjmp	.+226    	; 0x5e0 <DIO_vconnectpullup+0xe8>
     4fe:	85 34       	cpi	r24, 0x45	; 69
     500:	48 f4       	brcc	.+18     	; 0x514 <DIO_vconnectpullup+0x1c>
     502:	82 34       	cpi	r24, 0x42	; 66
     504:	99 f1       	breq	.+102    	; 0x56c <DIO_vconnectpullup+0x74>
     506:	83 34       	cpi	r24, 0x43	; 67
     508:	08 f0       	brcs	.+2      	; 0x50c <DIO_vconnectpullup+0x14>
     50a:	4d c0       	rjmp	.+154    	; 0x5a6 <DIO_vconnectpullup+0xae>
     50c:	81 34       	cpi	r24, 0x41	; 65
     50e:	09 f0       	breq	.+2      	; 0x512 <DIO_vconnectpullup+0x1a>
     510:	83 c0       	rjmp	.+262    	; 0x618 <DIO_vconnectpullup+0x120>
     512:	0f c0       	rjmp	.+30     	; 0x532 <DIO_vconnectpullup+0x3a>
     514:	82 36       	cpi	r24, 0x62	; 98
     516:	51 f1       	breq	.+84     	; 0x56c <DIO_vconnectpullup+0x74>
     518:	83 36       	cpi	r24, 0x63	; 99
     51a:	20 f4       	brcc	.+8      	; 0x524 <DIO_vconnectpullup+0x2c>
     51c:	81 36       	cpi	r24, 0x61	; 97
     51e:	09 f0       	breq	.+2      	; 0x522 <DIO_vconnectpullup+0x2a>
     520:	7b c0       	rjmp	.+246    	; 0x618 <DIO_vconnectpullup+0x120>
     522:	07 c0       	rjmp	.+14     	; 0x532 <DIO_vconnectpullup+0x3a>
     524:	83 36       	cpi	r24, 0x63	; 99
     526:	09 f4       	brne	.+2      	; 0x52a <DIO_vconnectpullup+0x32>
     528:	3e c0       	rjmp	.+124    	; 0x5a6 <DIO_vconnectpullup+0xae>
     52a:	84 36       	cpi	r24, 0x64	; 100
     52c:	09 f0       	breq	.+2      	; 0x530 <DIO_vconnectpullup+0x38>
     52e:	74 c0       	rjmp	.+232    	; 0x618 <DIO_vconnectpullup+0x120>
     530:	57 c0       	rjmp	.+174    	; 0x5e0 <DIO_vconnectpullup+0xe8>
	{
		case'A':
		case 'a':
		if(enable==1)
     532:	41 30       	cpi	r20, 0x01	; 1
     534:	69 f4       	brne	.+26     	; 0x550 <DIO_vconnectpullup+0x58>
		{
			SET_BIT(PORTA,pinnumber);
     536:	2b b3       	in	r18, 0x1b	; 27
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	ac 01       	movw	r20, r24
     53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_vconnectpullup+0x4c>
     540:	44 0f       	add	r20, r20
     542:	55 1f       	adc	r21, r21
     544:	6a 95       	dec	r22
     546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_vconnectpullup+0x48>
     548:	ba 01       	movw	r22, r20
     54a:	62 2b       	or	r22, r18
     54c:	6b bb       	out	0x1b, r22	; 27
     54e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
     550:	2b b3       	in	r18, 0x1b	; 27
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	ac 01       	movw	r20, r24
     558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_vconnectpullup+0x66>
     55a:	44 0f       	add	r20, r20
     55c:	55 1f       	adc	r21, r21
     55e:	6a 95       	dec	r22
     560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_vconnectpullup+0x62>
     562:	ba 01       	movw	r22, r20
     564:	60 95       	com	r22
     566:	62 23       	and	r22, r18
     568:	6b bb       	out	0x1b, r22	; 27
     56a:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(enable==1)
     56c:	41 30       	cpi	r20, 0x01	; 1
     56e:	69 f4       	brne	.+26     	; 0x58a <DIO_vconnectpullup+0x92>
		{
			SET_BIT(PORTB,pinnumber);
     570:	28 b3       	in	r18, 0x18	; 24
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	ac 01       	movw	r20, r24
     578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_vconnectpullup+0x86>
     57a:	44 0f       	add	r20, r20
     57c:	55 1f       	adc	r21, r21
     57e:	6a 95       	dec	r22
     580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_vconnectpullup+0x82>
     582:	ba 01       	movw	r22, r20
     584:	62 2b       	or	r22, r18
     586:	68 bb       	out	0x18, r22	; 24
     588:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
     58a:	28 b3       	in	r18, 0x18	; 24
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	ac 01       	movw	r20, r24
     592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_vconnectpullup+0xa0>
     594:	44 0f       	add	r20, r20
     596:	55 1f       	adc	r21, r21
     598:	6a 95       	dec	r22
     59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_vconnectpullup+0x9c>
     59c:	ba 01       	movw	r22, r20
     59e:	60 95       	com	r22
     5a0:	62 23       	and	r22, r18
     5a2:	68 bb       	out	0x18, r22	; 24
     5a4:	08 95       	ret
		}
		break;
		case'C':
		case'c':
		if(enable==1)
     5a6:	41 30       	cpi	r20, 0x01	; 1
     5a8:	69 f4       	brne	.+26     	; 0x5c4 <DIO_vconnectpullup+0xcc>
		{
			SET_BIT(PORTC,pinnumber);
     5aa:	25 b3       	in	r18, 0x15	; 21
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	ac 01       	movw	r20, r24
     5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_vconnectpullup+0xc0>
     5b4:	44 0f       	add	r20, r20
     5b6:	55 1f       	adc	r21, r21
     5b8:	6a 95       	dec	r22
     5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_vconnectpullup+0xbc>
     5bc:	ba 01       	movw	r22, r20
     5be:	62 2b       	or	r22, r18
     5c0:	65 bb       	out	0x15, r22	; 21
     5c2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
     5c4:	25 b3       	in	r18, 0x15	; 21
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	ac 01       	movw	r20, r24
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_vconnectpullup+0xda>
     5ce:	44 0f       	add	r20, r20
     5d0:	55 1f       	adc	r21, r21
     5d2:	6a 95       	dec	r22
     5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_vconnectpullup+0xd6>
     5d6:	ba 01       	movw	r22, r20
     5d8:	60 95       	com	r22
     5da:	62 23       	and	r22, r18
     5dc:	65 bb       	out	0x15, r22	; 21
     5de:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(enable==1)
     5e0:	41 30       	cpi	r20, 0x01	; 1
     5e2:	69 f4       	brne	.+26     	; 0x5fe <DIO_vconnectpullup+0x106>
		{
			SET_BIT(PORTD,pinnumber);
     5e4:	22 b3       	in	r18, 0x12	; 18
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	ac 01       	movw	r20, r24
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_vconnectpullup+0xfa>
     5ee:	44 0f       	add	r20, r20
     5f0:	55 1f       	adc	r21, r21
     5f2:	6a 95       	dec	r22
     5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_vconnectpullup+0xf6>
     5f6:	ba 01       	movw	r22, r20
     5f8:	62 2b       	or	r22, r18
     5fa:	62 bb       	out	0x12, r22	; 18
     5fc:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
     5fe:	22 b3       	in	r18, 0x12	; 18
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	ac 01       	movw	r20, r24
     606:	02 c0       	rjmp	.+4      	; 0x60c <DIO_vconnectpullup+0x114>
     608:	44 0f       	add	r20, r20
     60a:	55 1f       	adc	r21, r21
     60c:	6a 95       	dec	r22
     60e:	e2 f7       	brpl	.-8      	; 0x608 <DIO_vconnectpullup+0x110>
     610:	ba 01       	movw	r22, r20
     612:	60 95       	com	r22
     614:	62 23       	and	r22, r18
     616:	62 bb       	out	0x12, r22	; 18
     618:	08 95       	ret

0000061a <DIO_write_low_nibble>:
		break;
	}
}
void DIO_write_low_nibble(unsigned char portname,unsigned char value)
{
	value&=0x0f;
     61a:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
     61c:	82 34       	cpi	r24, 0x42	; 66
     61e:	81 f0       	breq	.+32     	; 0x640 <DIO_write_low_nibble+0x26>
     620:	83 34       	cpi	r24, 0x43	; 67
     622:	18 f4       	brcc	.+6      	; 0x62a <DIO_write_low_nibble+0x10>
     624:	81 34       	cpi	r24, 0x41	; 65
     626:	f1 f4       	brne	.+60     	; 0x664 <DIO_write_low_nibble+0x4a>
     628:	05 c0       	rjmp	.+10     	; 0x634 <DIO_write_low_nibble+0x1a>
     62a:	83 34       	cpi	r24, 0x43	; 67
     62c:	79 f0       	breq	.+30     	; 0x64c <DIO_write_low_nibble+0x32>
     62e:	84 34       	cpi	r24, 0x44	; 68
     630:	c9 f4       	brne	.+50     	; 0x664 <DIO_write_low_nibble+0x4a>
     632:	12 c0       	rjmp	.+36     	; 0x658 <DIO_write_low_nibble+0x3e>
	{
		case 'A':
		PORTA&=0xf0;
     634:	8b b3       	in	r24, 0x1b	; 27
     636:	80 7f       	andi	r24, 0xF0	; 240
     638:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
     63a:	8b b3       	in	r24, 0x1b	; 27
     63c:	86 2b       	or	r24, r22
     63e:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0xf0;
     640:	88 b3       	in	r24, 0x18	; 24
     642:	80 7f       	andi	r24, 0xF0	; 240
     644:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
     646:	88 b3       	in	r24, 0x18	; 24
     648:	86 2b       	or	r24, r22
     64a:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0xf0;
     64c:	85 b3       	in	r24, 0x15	; 21
     64e:	80 7f       	andi	r24, 0xF0	; 240
     650:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
     652:	85 b3       	in	r24, 0x15	; 21
     654:	86 2b       	or	r24, r22
     656:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0xf0;
     658:	82 b3       	in	r24, 0x12	; 18
     65a:	80 7f       	andi	r24, 0xF0	; 240
     65c:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
     65e:	82 b3       	in	r24, 0x12	; 18
     660:	68 2b       	or	r22, r24
     662:	62 bb       	out	0x12, r22	; 18
     664:	08 95       	ret

00000666 <DIO_write_high_nibble>:
	}
}

void DIO_write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
     666:	62 95       	swap	r22
     668:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
     66a:	82 34       	cpi	r24, 0x42	; 66
     66c:	81 f0       	breq	.+32     	; 0x68e <DIO_write_high_nibble+0x28>
     66e:	83 34       	cpi	r24, 0x43	; 67
     670:	18 f4       	brcc	.+6      	; 0x678 <DIO_write_high_nibble+0x12>
     672:	81 34       	cpi	r24, 0x41	; 65
     674:	f1 f4       	brne	.+60     	; 0x6b2 <DIO_write_high_nibble+0x4c>
     676:	05 c0       	rjmp	.+10     	; 0x682 <DIO_write_high_nibble+0x1c>
     678:	83 34       	cpi	r24, 0x43	; 67
     67a:	79 f0       	breq	.+30     	; 0x69a <DIO_write_high_nibble+0x34>
     67c:	84 34       	cpi	r24, 0x44	; 68
     67e:	c9 f4       	brne	.+50     	; 0x6b2 <DIO_write_high_nibble+0x4c>
     680:	12 c0       	rjmp	.+36     	; 0x6a6 <DIO_write_high_nibble+0x40>
	{
		case 'A':
		PORTA&=0x0f;
     682:	8b b3       	in	r24, 0x1b	; 27
     684:	8f 70       	andi	r24, 0x0F	; 15
     686:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
     688:	8b b3       	in	r24, 0x1b	; 27
     68a:	86 2b       	or	r24, r22
     68c:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
     68e:	88 b3       	in	r24, 0x18	; 24
     690:	8f 70       	andi	r24, 0x0F	; 15
     692:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
     694:	88 b3       	in	r24, 0x18	; 24
     696:	86 2b       	or	r24, r22
     698:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
     69a:	85 b3       	in	r24, 0x15	; 21
     69c:	8f 70       	andi	r24, 0x0F	; 15
     69e:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
     6a0:	85 b3       	in	r24, 0x15	; 21
     6a2:	86 2b       	or	r24, r22
     6a4:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
     6a6:	82 b3       	in	r24, 0x12	; 18
     6a8:	8f 70       	andi	r24, 0x0F	; 15
     6aa:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
     6ac:	82 b3       	in	r24, 0x12	; 18
     6ae:	68 2b       	or	r22, r24
     6b0:	62 bb       	out	0x12, r22	; 18
     6b2:	08 95       	ret

000006b4 <VInit_external_interrupt>:
#include "SPI.h"
#include "std_macros.h"
char guest_flag=0;
void VInit_external_interrupt()
{
	DIO_vsetPINDir('D',2,0);
     6b4:	84 e4       	ldi	r24, 0x44	; 68
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	62 e0       	ldi	r22, 0x02	; 2
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	40 e0       	ldi	r20, 0x00	; 0
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	sei();
     6c4:	78 94       	sei
	SET_BIT(GICR,INT0);
     6c6:	8b b7       	in	r24, 0x3b	; 59
     6c8:	80 64       	ori	r24, 0x40	; 64
     6ca:	8b bf       	out	0x3b, r24	; 59
	CLR_BIT(MCUCR,ISC00);
     6cc:	85 b7       	in	r24, 0x35	; 53
     6ce:	8e 7f       	andi	r24, 0xFE	; 254
     6d0:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,ISC01);
     6d2:	85 b7       	in	r24, 0x35	; 53
     6d4:	82 60       	ori	r24, 0x02	; 2
     6d6:	85 bf       	out	0x35, r24	; 53
}
     6d8:	08 95       	ret

000006da <Garage_VInit>:
void Garage_VInit()
{
	
	LCD_vInit();
     6da:	0e 94 1a 04 	call	0x834	; 0x834 <LCD_vInit>
	SPI_SlaveInit();
     6de:	0e 94 f7 04 	call	0x9ee	; 0x9ee <SPI_SlaveInit>
	VInit_external_interrupt();
     6e2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <VInit_external_interrupt>
}
     6e6:	08 95       	ret

000006e8 <main>:
int main(void)
{
	Garage_VInit();
     6e8:	0e 94 6d 03 	call	0x6da	; 0x6da <Garage_VInit>
	char flag=0;
     6ec:	c0 e0       	ldi	r28, 0x00	; 0
	while(1)
	{
		if(!READ_BIT(guest_flag,0))
		{
			LCD_vSend_string("Set Guest pass");
     6ee:	00 e6       	ldi	r16, 0x60	; 96
     6f0:	10 e0       	ldi	r17, 0x00	; 0
			LCD_movecursor(2,1);
			LCD_vSend_string("From Control sys");
     6f2:	0f 2e       	mov	r0, r31
     6f4:	ff e6       	ldi	r31, 0x6F	; 111
     6f6:	ef 2e       	mov	r14, r31
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	ff 2e       	mov	r15, r31
     6fc:	f0 2d       	mov	r31, r0
			else 
			{
				servo_write(0);
				if(flag==0)
					{	LCD_ClearScreen();
						LCD_vSend_string("Garage Closed");
     6fe:	0f 2e       	mov	r0, r31
     700:	fe e8       	ldi	r31, 0x8E	; 142
     702:	cf 2e       	mov	r12, r31
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	df 2e       	mov	r13, r31
     708:	f0 2d       	mov	r31, r0
			if(READ_BIT(guest_flag,1))
			{
				servo_write(180);
				if(flag==1)
					{	LCD_ClearScreen();
						LCD_vSend_string("Garage opened");
     70a:	0f 2e       	mov	r0, r31
     70c:	f0 e8       	ldi	r31, 0x80	; 128
     70e:	af 2e       	mov	r10, r31
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	bf 2e       	mov	r11, r31
     714:	f0 2d       	mov	r31, r0
						flag=0;}
     716:	d0 e0       	ldi	r29, 0x00	; 0
{
	Garage_VInit();
	char flag=0;
	while(1)
	{
		if(!READ_BIT(guest_flag,0))
     718:	80 91 9c 00 	lds	r24, 0x009C
     71c:	80 fd       	sbrc	r24, 0
     71e:	0b c0       	rjmp	.+22     	; 0x736 <main+0x4e>
		{
			LCD_vSend_string("Set Guest pass");
     720:	c8 01       	movw	r24, r16
     722:	0e 94 92 04 	call	0x924	; 0x924 <LCD_vSend_string>
			LCD_movecursor(2,1);
     726:	82 e0       	ldi	r24, 0x02	; 2
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	0e 94 ab 04 	call	0x956	; 0x956 <LCD_movecursor>
			LCD_vSend_string("From Control sys");
     72e:	c7 01       	movw	r24, r14
     730:	0e 94 92 04 	call	0x924	; 0x924 <LCD_vSend_string>
     734:	f1 cf       	rjmp	.-30     	; 0x718 <main+0x30>
		}
		else 
		{
			
			
			if(READ_BIT(guest_flag,1))
     736:	81 ff       	sbrs	r24, 1
     738:	0f c0       	rjmp	.+30     	; 0x758 <main+0x70>
			{
				servo_write(180);
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	84 e3       	ldi	r24, 0x34	; 52
     740:	93 e4       	ldi	r25, 0x43	; 67
     742:	0e 94 cc 04 	call	0x998	; 0x998 <servo_write>
				if(flag==1)
     746:	c1 30       	cpi	r28, 0x01	; 1
     748:	39 f7       	brne	.-50     	; 0x718 <main+0x30>
					{	LCD_ClearScreen();
     74a:	0e 94 a1 04 	call	0x942	; 0x942 <LCD_ClearScreen>
						LCD_vSend_string("Garage opened");
     74e:	c5 01       	movw	r24, r10
     750:	0e 94 92 04 	call	0x924	; 0x924 <LCD_vSend_string>
						flag=0;}
     754:	cd 2f       	mov	r28, r29
     756:	e0 cf       	rjmp	.-64     	; 0x718 <main+0x30>
			}
			else 
			{
				servo_write(0);
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	cb 01       	movw	r24, r22
     75e:	0e 94 cc 04 	call	0x998	; 0x998 <servo_write>
				if(flag==0)
     762:	cc 23       	and	r28, r28
     764:	c9 f6       	brne	.-78     	; 0x718 <main+0x30>
					{	LCD_ClearScreen();
     766:	0e 94 a1 04 	call	0x942	; 0x942 <LCD_ClearScreen>
						LCD_vSend_string("Garage Closed");
     76a:	c6 01       	movw	r24, r12
     76c:	0e 94 92 04 	call	0x924	; 0x924 <LCD_vSend_string>
						flag=1;}
     770:	c1 e0       	ldi	r28, 0x01	; 1
     772:	d2 cf       	rjmp	.-92     	; 0x718 <main+0x30>

00000774 <__vector_1>:
			}
		}
	}
}
ISR(INT0_vect)
{
     774:	1f 92       	push	r1
     776:	0f 92       	push	r0
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	0f 92       	push	r0
     77c:	11 24       	eor	r1, r1
     77e:	2f 93       	push	r18
     780:	3f 93       	push	r19
     782:	4f 93       	push	r20
     784:	5f 93       	push	r21
     786:	6f 93       	push	r22
     788:	7f 93       	push	r23
     78a:	8f 93       	push	r24
     78c:	9f 93       	push	r25
     78e:	af 93       	push	r26
     790:	bf 93       	push	r27
     792:	ef 93       	push	r30
     794:	ff 93       	push	r31
	guest_flag=SPI_SlaveReceivechar('F');
     796:	86 e4       	ldi	r24, 0x46	; 70
     798:	0e 94 11 05 	call	0xa22	; 0xa22 <SPI_SlaveReceivechar>
     79c:	80 93 9c 00 	sts	0x009C, r24
     7a0:	ff 91       	pop	r31
     7a2:	ef 91       	pop	r30
     7a4:	bf 91       	pop	r27
     7a6:	af 91       	pop	r26
     7a8:	9f 91       	pop	r25
     7aa:	8f 91       	pop	r24
     7ac:	7f 91       	pop	r23
     7ae:	6f 91       	pop	r22
     7b0:	5f 91       	pop	r21
     7b2:	4f 91       	pop	r20
     7b4:	3f 91       	pop	r19
     7b6:	2f 91       	pop	r18
     7b8:	0f 90       	pop	r0
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	0f 90       	pop	r0
     7be:	1f 90       	pop	r1
     7c0:	18 95       	reti

000007c2 <LCD_Enable>:
	#endif
	_delay_ms(1);
}
void LCD_Enable()
{
	DIO_write(control_port,EN,1);
     7c2:	81 e4       	ldi	r24, 0x41	; 65
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	41 e0       	ldi	r20, 0x01	; 1
     7c8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7cc:	8f e9       	ldi	r24, 0x9F	; 159
     7ce:	9f e0       	ldi	r25, 0x0F	; 15
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <LCD_Enable+0xe>
     7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <LCD_Enable+0x14>
     7d6:	00 00       	nop
	_delay_ms(2);
	DIO_write(control_port,EN,0);
     7d8:	81 e4       	ldi	r24, 0x41	; 65
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
     7e2:	8f e9       	ldi	r24, 0x9F	; 159
     7e4:	9f e0       	ldi	r25, 0x0F	; 15
     7e6:	01 97       	sbiw	r24, 0x01	; 1
     7e8:	f1 f7       	brne	.-4      	; 0x7e6 <LCD_Enable+0x24>
     7ea:	00 c0       	rjmp	.+0      	; 0x7ec <LCD_Enable+0x2a>
     7ec:	00 00       	nop
	_delay_ms(2);
}
     7ee:	08 95       	ret

000007f0 <LCD_vSend_cmd>:
	LCD_vSend_cmd(ENTRY_MODE);
	_delay_ms(1);
	#endif
}
void LCD_vSend_cmd(char cmd)
{
     7f0:	cf 93       	push	r28
     7f2:	c8 2f       	mov	r28, r24
    #if defined eight_bits_mode
	DIO_write_port(data_port,cmd);
	DIO_write(control_port,RS,0);
	LCD_Enable();
	#elif defined four_bits_mode
		DIO_write_high_nibble(data_port,cmd>>4);
     7f4:	68 2f       	mov	r22, r24
     7f6:	62 95       	swap	r22
     7f8:	6f 70       	andi	r22, 0x0F	; 15
     7fa:	81 e4       	ldi	r24, 0x41	; 65
     7fc:	0e 94 33 03 	call	0x666	; 0x666 <DIO_write_high_nibble>
		DIO_write(control_port,RS,0);
     800:	81 e4       	ldi	r24, 0x41	; 65
     802:	62 e0       	ldi	r22, 0x02	; 2
     804:	40 e0       	ldi	r20, 0x00	; 0
     806:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
		LCD_Enable();
     80a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <LCD_Enable>
		DIO_write_high_nibble(data_port,cmd);
     80e:	81 e4       	ldi	r24, 0x41	; 65
     810:	6c 2f       	mov	r22, r28
     812:	0e 94 33 03 	call	0x666	; 0x666 <DIO_write_high_nibble>
		DIO_write(control_port,RS,0);
     816:	81 e4       	ldi	r24, 0x41	; 65
     818:	62 e0       	ldi	r22, 0x02	; 2
     81a:	40 e0       	ldi	r20, 0x00	; 0
     81c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
		LCD_Enable();
     820:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <LCD_Enable>
     824:	8f ec       	ldi	r24, 0xCF	; 207
     826:	97 e0       	ldi	r25, 0x07	; 7
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	f1 f7       	brne	.-4      	; 0x828 <LCD_vSend_cmd+0x38>
     82c:	00 c0       	rjmp	.+0      	; 0x82e <LCD_vSend_cmd+0x3e>
     82e:	00 00       	nop
	#endif
	_delay_ms(1);
}
     830:	cf 91       	pop	r28
     832:	08 95       	ret

00000834 <LCD_vInit>:
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE);
	_delay_ms(1);

	#elif defined four_bits_mode
	DIO_vsetPINDir(data_port,4,1);
     834:	81 e4       	ldi	r24, 0x41	; 65
     836:	64 e0       	ldi	r22, 0x04	; 4
     838:	41 e0       	ldi	r20, 0x01	; 1
     83a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(data_port,5,1);
     83e:	81 e4       	ldi	r24, 0x41	; 65
     840:	65 e0       	ldi	r22, 0x05	; 5
     842:	41 e0       	ldi	r20, 0x01	; 1
     844:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(data_port,6,1);
     848:	81 e4       	ldi	r24, 0x41	; 65
     84a:	66 e0       	ldi	r22, 0x06	; 6
     84c:	41 e0       	ldi	r20, 0x01	; 1
     84e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(data_port,7,1);
     852:	81 e4       	ldi	r24, 0x41	; 65
     854:	67 e0       	ldi	r22, 0x07	; 7
     856:	41 e0       	ldi	r20, 0x01	; 1
     858:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(control_port,RS,1);
     85c:	81 e4       	ldi	r24, 0x41	; 65
     85e:	62 e0       	ldi	r22, 0x02	; 2
     860:	41 e0       	ldi	r20, 0x01	; 1
     862:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(control_port,EN,1);
     866:	81 e4       	ldi	r24, 0x41	; 65
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	41 e0       	ldi	r20, 0x01	; 1
     86c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(control_port,RW,1);
     870:	81 e4       	ldi	r24, 0x41	; 65
     872:	61 e0       	ldi	r22, 0x01	; 1
     874:	41 e0       	ldi	r20, 0x01	; 1
     876:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_write(control_port,RW,0);
     87a:	81 e4       	ldi	r24, 0x41	; 65
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
	LCD_vSend_cmd(RETURN_HOME);
     884:	82 e0       	ldi	r24, 0x02	; 2
     886:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_vSend_cmd>
     88a:	8f e1       	ldi	r24, 0x1F	; 31
     88c:	9e e4       	ldi	r25, 0x4E	; 78
     88e:	01 97       	sbiw	r24, 0x01	; 1
     890:	f1 f7       	brne	.-4      	; 0x88e <__stack+0x2f>
     892:	00 c0       	rjmp	.+0      	; 0x894 <__stack+0x35>
     894:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS); //4 bit mode
     896:	88 e2       	ldi	r24, 0x28	; 40
     898:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_vSend_cmd>
     89c:	8f ec       	ldi	r24, 0xCF	; 207
     89e:	97 e0       	ldi	r25, 0x07	; 7
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <__stack+0x41>
     8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <__stack+0x47>
     8a6:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(DISPLAYON_CURSORON);
     8a8:	8e e0       	ldi	r24, 0x0E	; 14
     8aa:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_vSend_cmd>
     8ae:	8f ec       	ldi	r24, 0xCF	; 207
     8b0:	97 e0       	ldi	r25, 0x07	; 7
     8b2:	01 97       	sbiw	r24, 0x01	; 1
     8b4:	f1 f7       	brne	.-4      	; 0x8b2 <__stack+0x53>
     8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <__stack+0x59>
     8b8:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLEAR_SCREEN);
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_vSend_cmd>
     8c0:	8f e1       	ldi	r24, 0x1F	; 31
     8c2:	9e e4       	ldi	r25, 0x4E	; 78
     8c4:	01 97       	sbiw	r24, 0x01	; 1
     8c6:	f1 f7       	brne	.-4      	; 0x8c4 <__stack+0x65>
     8c8:	00 c0       	rjmp	.+0      	; 0x8ca <__stack+0x6b>
     8ca:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE);
     8cc:	86 e0       	ldi	r24, 0x06	; 6
     8ce:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_vSend_cmd>
     8d2:	8f ec       	ldi	r24, 0xCF	; 207
     8d4:	97 e0       	ldi	r25, 0x07	; 7
     8d6:	01 97       	sbiw	r24, 0x01	; 1
     8d8:	f1 f7       	brne	.-4      	; 0x8d6 <__stack+0x77>
     8da:	00 c0       	rjmp	.+0      	; 0x8dc <__stack+0x7d>
     8dc:	00 00       	nop
	_delay_ms(1);
	#endif
}
     8de:	08 95       	ret

000008e0 <LCD_vSend_char>:
	_delay_ms(2);
	DIO_write(control_port,EN,0);
	_delay_ms(2);
}
void LCD_vSend_char(char data)
{
     8e0:	cf 93       	push	r28
     8e2:	c8 2f       	mov	r28, r24
		DIO_write_port(data_port,data);
		DIO_write(control_port,RS,1);
		LCD_Enable();

	#elif defined four_bits_mode
		DIO_write_high_nibble(data_port,data>>4);
     8e4:	68 2f       	mov	r22, r24
     8e6:	62 95       	swap	r22
     8e8:	6f 70       	andi	r22, 0x0F	; 15
     8ea:	81 e4       	ldi	r24, 0x41	; 65
     8ec:	0e 94 33 03 	call	0x666	; 0x666 <DIO_write_high_nibble>
		DIO_write(control_port,RS,1);
     8f0:	81 e4       	ldi	r24, 0x41	; 65
     8f2:	62 e0       	ldi	r22, 0x02	; 2
     8f4:	41 e0       	ldi	r20, 0x01	; 1
     8f6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
		LCD_Enable();
     8fa:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <LCD_Enable>
		DIO_write_high_nibble(data_port,data);
     8fe:	81 e4       	ldi	r24, 0x41	; 65
     900:	6c 2f       	mov	r22, r28
     902:	0e 94 33 03 	call	0x666	; 0x666 <DIO_write_high_nibble>
		DIO_write(control_port,RS,1);
     906:	81 e4       	ldi	r24, 0x41	; 65
     908:	62 e0       	ldi	r22, 0x02	; 2
     90a:	41 e0       	ldi	r20, 0x01	; 1
     90c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
		LCD_Enable();
     910:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <LCD_Enable>
     914:	8f ec       	ldi	r24, 0xCF	; 207
     916:	97 e0       	ldi	r25, 0x07	; 7
     918:	01 97       	sbiw	r24, 0x01	; 1
     91a:	f1 f7       	brne	.-4      	; 0x918 <LCD_vSend_char+0x38>
     91c:	00 c0       	rjmp	.+0      	; 0x91e <LCD_vSend_char+0x3e>
     91e:	00 00       	nop
	#endif
	_delay_ms(1);
}
     920:	cf 91       	pop	r28
     922:	08 95       	ret

00000924 <LCD_vSend_string>:
void LCD_vSend_string(char *data)
{
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	ec 01       	movw	r28, r24
	while((*data)!='\0')
     92a:	88 81       	ld	r24, Y
     92c:	88 23       	and	r24, r24
     92e:	31 f0       	breq	.+12     	; 0x93c <LCD_vSend_string+0x18>
		DIO_write(control_port,RS,1);
		LCD_Enable();
	#endif
	_delay_ms(1);
}
void LCD_vSend_string(char *data)
     930:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
     932:	0e 94 70 04 	call	0x8e0	; 0x8e0 <LCD_vSend_char>
	#endif
	_delay_ms(1);
}
void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
     936:	89 91       	ld	r24, Y+
     938:	88 23       	and	r24, r24
     93a:	d9 f7       	brne	.-10     	; 0x932 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	08 95       	ret

00000942 <LCD_ClearScreen>:
void LCD_ClearScreen()
{
	LCD_vSend_cmd(CLEAR_SCREEN);
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_vSend_cmd>
     948:	8f e1       	ldi	r24, 0x1F	; 31
     94a:	9e e4       	ldi	r25, 0x4E	; 78
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	f1 f7       	brne	.-4      	; 0x94c <LCD_ClearScreen+0xa>
     950:	00 c0       	rjmp	.+0      	; 0x952 <LCD_ClearScreen+0x10>
     952:	00 00       	nop
	_delay_ms(10);
}
     954:	08 95       	ret

00000956 <LCD_movecursor>:
void LCD_movecursor(char row, char coloumn)
{
     956:	cf 93       	push	r28
	char temp;
	if(row>2||row<1||coloumn>16||coloumn<1)
     958:	98 2f       	mov	r25, r24
     95a:	91 50       	subi	r25, 0x01	; 1
     95c:	92 30       	cpi	r25, 0x02	; 2
     95e:	20 f4       	brcc	.+8      	; 0x968 <LCD_movecursor+0x12>
     960:	61 31       	cpi	r22, 0x11	; 17
     962:	10 f4       	brcc	.+4      	; 0x968 <LCD_movecursor+0x12>
     964:	66 23       	and	r22, r22
     966:	21 f4       	brne	.+8      	; 0x970 <LCD_movecursor+0x1a>
	{
		LCD_vSend_cmd(0x80);
     968:	80 e8       	ldi	r24, 0x80	; 128
     96a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_vSend_cmd>
     96e:	09 c0       	rjmp	.+18     	; 0x982 <LCD_movecursor+0x2c>
	}
	else if(row==1)
     970:	81 30       	cpi	r24, 0x01	; 1
     972:	19 f4       	brne	.+6      	; 0x97a <LCD_movecursor+0x24>
	{
		temp=0x80+coloumn-1;
     974:	c6 2f       	mov	r28, r22
     976:	c1 58       	subi	r28, 0x81	; 129
     978:	04 c0       	rjmp	.+8      	; 0x982 <LCD_movecursor+0x2c>

	}
	else if(row==2)
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	11 f4       	brne	.+4      	; 0x982 <LCD_movecursor+0x2c>
	{
		temp=0xC0+coloumn-1;
     97e:	c6 2f       	mov	r28, r22
     980:	c1 54       	subi	r28, 0x41	; 65

	}
	LCD_vSend_cmd(temp);
     982:	8c 2f       	mov	r24, r28
     984:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LCD_vSend_cmd>
     988:	8f ec       	ldi	r24, 0xCF	; 207
     98a:	97 e0       	ldi	r25, 0x07	; 7
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	f1 f7       	brne	.-4      	; 0x98c <LCD_movecursor+0x36>
     990:	00 c0       	rjmp	.+0      	; 0x992 <LCD_movecursor+0x3c>
     992:	00 00       	nop
	_delay_ms(1);
}
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <servo_write>:
 */ 
#include <avr/io.h>
#include "Timers.h"
void servo_write (double pos)
{
	double val= (1+(pos/180));
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	44 e3       	ldi	r20, 0x34	; 52
     99e:	53 e4       	ldi	r21, 0x43	; 67
     9a0:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__divsf3>
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	40 e8       	ldi	r20, 0x80	; 128
     9aa:	5f e3       	ldi	r21, 0x3F	; 63
     9ac:	0e 94 3a 06 	call	0xc74	; 0xc74 <__addsf3>
	Timer1A_fastPWM_wave(val);
     9b0:	0e 94 b4 05 	call	0xb68	; 0xb68 <Timer1A_fastPWM_wave>
     9b4:	08 95       	ret

000009b6 <SPI_MasterInit>:
#define F_CPU 8000000
#include <avr/delay.h>
void SPI_MasterInit(void)
{
	/*Set SS / MOSI / SCK  as output pins for master*/
	DIO_vsetPINDir('B',4,1);
     9b6:	82 e4       	ldi	r24, 0x42	; 66
     9b8:	64 e0       	ldi	r22, 0x04	; 4
     9ba:	41 e0       	ldi	r20, 0x01	; 1
     9bc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',5,1);
     9c0:	82 e4       	ldi	r24, 0x42	; 66
     9c2:	65 e0       	ldi	r22, 0x05	; 5
     9c4:	41 e0       	ldi	r20, 0x01	; 1
     9c6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',7,1);
     9ca:	82 e4       	ldi	r24, 0x42	; 66
     9cc:	67 e0       	ldi	r22, 0x07	; 7
     9ce:	41 e0       	ldi	r20, 0x01	; 1
     9d0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	SET_BIT(SPCR,MSTR);//Selects master mode
     9d4:	6c 9a       	sbi	0x0d, 4	; 13
	CLR_BIT(SPCR,SPR0);
     9d6:	68 98       	cbi	0x0d, 0	; 13
	CLR_BIT(SPCR,SPR1);
     9d8:	69 98       	cbi	0x0d, 1	; 13
	CLR_BIT(SPSR,SPI2X); //Set frequency of master to Focs/4
     9da:	70 98       	cbi	0x0e, 0	; 14
	SET_BIT(SPCR,SPE);//Enables SPI
     9dc:	6e 9a       	sbi	0x0d, 6	; 13
	CLR_BIT(SPCR,CPOL);
     9de:	6b 98       	cbi	0x0d, 3	; 13
	CLR_BIT(SPCR,CPHA); //Leading edge->sample (rising)   Trailling edge->Setup (falling)
     9e0:	6a 98       	cbi	0x0d, 2	; 13
	/*set SS to high*/
	DIO_write('B',4,1);
     9e2:	82 e4       	ldi	r24, 0x42	; 66
     9e4:	64 e0       	ldi	r22, 0x04	; 4
     9e6:	41 e0       	ldi	r20, 0x01	; 1
     9e8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
	
}
     9ec:	08 95       	ret

000009ee <SPI_SlaveInit>:
void SPI_SlaveInit(void)
{
	CLR_BIT(SPCR,MSTR);//Selects slave mode
     9ee:	6c 98       	cbi	0x0d, 4	; 13
	SET_BIT(SPCR,SPE);//Enables SPI
     9f0:	6e 9a       	sbi	0x0d, 6	; 13
	/*Set MISO as output*/
	DIO_vsetPINDir('B',6,1);
     9f2:	82 e4       	ldi	r24, 0x42	; 66
     9f4:	66 e0       	ldi	r22, 0x06	; 6
     9f6:	41 e0       	ldi	r20, 0x01	; 1
     9f8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
}
     9fc:	08 95       	ret

000009fe <SPI_MasterTransmitchar>:
unsigned char SPI_MasterTransmitchar(unsigned char Data)
{
     9fe:	cf 93       	push	r28
     a00:	c8 2f       	mov	r28, r24
	/*Clear SS to send data to slave*/
	DIO_write('B',4,0);
     a02:	82 e4       	ldi	r24, 0x42	; 66
     a04:	64 e0       	ldi	r22, 0x04	; 4
     a06:	40 e0       	ldi	r20, 0x00	; 0
     a08:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
	/*put data on SPDR*/
	SPDR=Data;
     a0c:	cf b9       	out	0x0f, r28	; 15
	while(READ_BIT(SPSR,SPIF)==0);
     a0e:	77 9b       	sbis	0x0e, 7	; 14
     a10:	fe cf       	rjmp	.-4      	; 0xa0e <SPI_MasterTransmitchar+0x10>
	/*read the received data*/
	DIO_write('B',4,1); //Deselect slave
     a12:	82 e4       	ldi	r24, 0x42	; 66
     a14:	64 e0       	ldi	r22, 0x04	; 4
     a16:	41 e0       	ldi	r20, 0x01	; 1
     a18:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
	return SPDR ;
     a1c:	8f b1       	in	r24, 0x0f	; 15
}
     a1e:	cf 91       	pop	r28
     a20:	08 95       	ret

00000a22 <SPI_SlaveReceivechar>:
unsigned char SPI_SlaveReceivechar(unsigned char Data)
{
	/*Put data on SPDR*/
	SPDR=Data;
     a22:	8f b9       	out	0x0f, r24	; 15
	/*Wait until data is received in SPI register*/
	while(READ_BIT(SPSR,SPIF)==0);
     a24:	77 9b       	sbis	0x0e, 7	; 14
     a26:	fe cf       	rjmp	.-4      	; 0xa24 <SPI_SlaveReceivechar+0x2>
	/*read the received data*/
	return SPDR ;
     a28:	8f b1       	in	r24, 0x0f	; 15
}
     a2a:	08 95       	ret

00000a2c <SPI_MasterTransmitstring>:

void SPI_MasterTransmitstring(unsigned char *ptr)
{
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	ec 01       	movw	r28, r24
	while((*ptr)!=0)
     a32:	88 81       	ld	r24, Y
     a34:	88 23       	and	r24, r24
     a36:	79 f0       	breq	.+30     	; 0xa56 <SPI_MasterTransmitstring+0x2a>
	while(READ_BIT(SPSR,SPIF)==0);
	/*read the received data*/
	return SPDR ;
}

void SPI_MasterTransmitstring(unsigned char *ptr)
     a38:	21 96       	adiw	r28, 0x01	; 1
{
	while((*ptr)!=0)
	{
		SPI_MasterTransmitchar(*ptr);
     a3a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <SPI_MasterTransmitchar>
     a3e:	8f ef       	ldi	r24, 0xFF	; 255
     a40:	92 e5       	ldi	r25, 0x52	; 82
     a42:	a7 e0       	ldi	r26, 0x07	; 7
     a44:	81 50       	subi	r24, 0x01	; 1
     a46:	90 40       	sbci	r25, 0x00	; 0
     a48:	a0 40       	sbci	r26, 0x00	; 0
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <SPI_MasterTransmitstring+0x18>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <SPI_MasterTransmitstring+0x22>
     a4e:	00 00       	nop
	return SPDR ;
}

void SPI_MasterTransmitstring(unsigned char *ptr)
{
	while((*ptr)!=0)
     a50:	89 91       	ld	r24, Y+
     a52:	88 23       	and	r24, r24
     a54:	91 f7       	brne	.-28     	; 0xa3a <SPI_MasterTransmitstring+0xe>
	{
		SPI_MasterTransmitchar(*ptr);
		_delay_ms(300);
		ptr++;
	}
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	08 95       	ret

00000a5c <vInit_Timer0_NormalMode>:
#include <avr/io.h>
#include "std_macros.h"
#include <avr/interrupt.h>
void vInit_Timer0_NormalMode()
{
	CLR_BIT(TCCR0,WGM01);
     a5c:	83 b7       	in	r24, 0x33	; 51
     a5e:	87 7f       	andi	r24, 0xF7	; 247
     a60:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,WGM00); //Choose Normal mode
     a62:	83 b7       	in	r24, 0x33	; 51
     a64:	8f 7b       	andi	r24, 0xBF	; 191
     a66:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);
     a68:	83 b7       	in	r24, 0x33	; 51
     a6a:	81 60       	ori	r24, 0x01	; 1
     a6c:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
     a6e:	83 b7       	in	r24, 0x33	; 51
     a70:	8d 7f       	andi	r24, 0xFD	; 253
     a72:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02); //Set prescaler to /1024
     a74:	83 b7       	in	r24, 0x33	; 51
     a76:	84 60       	ori	r24, 0x04	; 4
     a78:	83 bf       	out	0x33, r24	; 51
	sei();
     a7a:	78 94       	sei
	SET_BIT(TIMSK,TOIE0); //Enable interrupt
     a7c:	89 b7       	in	r24, 0x39	; 57
     a7e:	81 60       	ori	r24, 0x01	; 1
     a80:	89 bf       	out	0x39, r24	; 57
	TCNT0=200; //Preload value
     a82:	88 ec       	ldi	r24, 0xC8	; 200
     a84:	82 bf       	out	0x32, r24	; 50
}
     a86:	08 95       	ret

00000a88 <vInit_Timer0_CTC>:
void vInit_Timer0_CTC()
{
	SET_BIT(TCCR0,WGM01);
     a88:	83 b7       	in	r24, 0x33	; 51
     a8a:	88 60       	ori	r24, 0x08	; 8
     a8c:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,WGM00); //Choose CTC
     a8e:	83 b7       	in	r24, 0x33	; 51
     a90:	8f 7b       	andi	r24, 0xBF	; 191
     a92:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);
     a94:	83 b7       	in	r24, 0x33	; 51
     a96:	81 60       	ori	r24, 0x01	; 1
     a98:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
     a9a:	83 b7       	in	r24, 0x33	; 51
     a9c:	8d 7f       	andi	r24, 0xFD	; 253
     a9e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02); //Set prescaler to /1024
     aa0:	83 b7       	in	r24, 0x33	; 51
     aa2:	84 60       	ori	r24, 0x04	; 4
     aa4:	83 bf       	out	0x33, r24	; 51
	sei();
     aa6:	78 94       	sei
	SET_BIT(TIMSK,OCIE0); //Enable interrupt
     aa8:	89 b7       	in	r24, 0x39	; 57
     aaa:	82 60       	ori	r24, 0x02	; 2
     aac:	89 bf       	out	0x39, r24	; 57
	OCR0=10; //Compare value (156 is reached every 0.00128 sec)
     aae:	8a e0       	ldi	r24, 0x0A	; 10
     ab0:	8c bf       	out	0x3c, r24	; 60
	//Time of each tick = prescaler/Clock of mp
	//value=time needed/Time of each tick
}
     ab2:	08 95       	ret

00000ab4 <Timer0_NonPWM_wave>:
void Timer0_NonPWM_wave()
{
    SET_BIT(DDRB,3); //you have to set  OC0 pin (PB3) as output pin to be able to generate a wave on this pin .
     ab4:	bb 9a       	sbi	0x17, 3	; 23
    SET_BIT(TCCR0,WGM01);
     ab6:	83 b7       	in	r24, 0x33	; 51
     ab8:	88 60       	ori	r24, 0x08	; 8
     aba:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,WGM00); //Choose CTC
     abc:	83 b7       	in	r24, 0x33	; 51
     abe:	8f 7b       	andi	r24, 0xBF	; 191
     ac0:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);
     ac2:	83 b7       	in	r24, 0x33	; 51
     ac4:	81 60       	ori	r24, 0x01	; 1
     ac6:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
     ac8:	83 b7       	in	r24, 0x33	; 51
     aca:	8d 7f       	andi	r24, 0xFD	; 253
     acc:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02); //Set prescaler to /1024
     ace:	83 b7       	in	r24, 0x33	; 51
     ad0:	84 60       	ori	r24, 0x04	; 4
     ad2:	83 bf       	out	0x33, r24	; 51
	OCR0=156; //Compare value
     ad4:	8c e9       	ldi	r24, 0x9C	; 156
     ad6:	8c bf       	out	0x3c, r24	; 60
    SET_BIT(TCCR0,COM00); // Toggle mode
     ad8:	83 b7       	in	r24, 0x33	; 51
     ada:	80 61       	ori	r24, 0x10	; 16
     adc:	83 bf       	out	0x33, r24	; 51


}
     ade:	08 95       	ret

00000ae0 <Timer0_fastPWM_wave>:
void Timer0_fastPWM_wave()
{
    SET_BIT(DDRB,3); //you have to set  OC0 pin (PB3) as output pin to be able to generate a wave on this pin .
     ae0:	bb 9a       	sbi	0x17, 3	; 23
    SET_BIT(TCCR0,WGM01);
     ae2:	83 b7       	in	r24, 0x33	; 51
     ae4:	88 60       	ori	r24, 0x08	; 8
     ae6:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM00); //Choose fast pwm
     ae8:	83 b7       	in	r24, 0x33	; 51
     aea:	80 64       	ori	r24, 0x40	; 64
     aec:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);
     aee:	83 b7       	in	r24, 0x33	; 51
     af0:	81 60       	ori	r24, 0x01	; 1
     af2:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
     af4:	83 b7       	in	r24, 0x33	; 51
     af6:	8d 7f       	andi	r24, 0xFD	; 253
     af8:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02); //Set prescaler to /1024
     afa:	83 b7       	in	r24, 0x33	; 51
     afc:	84 60       	ori	r24, 0x04	; 4
     afe:	83 bf       	out	0x33, r24	; 51
	OCR0=192; //Compare value (75 % duty cycle)
     b00:	80 ec       	ldi	r24, 0xC0	; 192
     b02:	8c bf       	out	0x3c, r24	; 60
    SET_BIT(TCCR0,COM01); // non inverting mode (The higher the OCR0 the higher the duty cycle)
     b04:	83 b7       	in	r24, 0x33	; 51
     b06:	80 62       	ori	r24, 0x20	; 32
     b08:	83 bf       	out	0x33, r24	; 51

}
     b0a:	08 95       	ret

00000b0c <Timer0_pashcorrectPWM_wave>:
void Timer0_pashcorrectPWM_wave()
{
	SET_BIT(DDRB,3); //you have to set  OC0 pin (PB3) as output pin to be able to generate a wave on this pin.
     b0c:	bb 9a       	sbi	0x17, 3	; 23
	CLR_BIT(TCCR0,WGM01);
     b0e:	83 b7       	in	r24, 0x33	; 51
     b10:	87 7f       	andi	r24, 0xF7	; 247
     b12:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM00); //Choose phase correct
     b14:	83 b7       	in	r24, 0x33	; 51
     b16:	80 64       	ori	r24, 0x40	; 64
     b18:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);
     b1a:	83 b7       	in	r24, 0x33	; 51
     b1c:	81 60       	ori	r24, 0x01	; 1
     b1e:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
     b20:	83 b7       	in	r24, 0x33	; 51
     b22:	8d 7f       	andi	r24, 0xFD	; 253
     b24:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02); //Set prescaler to /1024
     b26:	83 b7       	in	r24, 0x33	; 51
     b28:	84 60       	ori	r24, 0x04	; 4
     b2a:	83 bf       	out	0x33, r24	; 51
	OCR0=192; //Compare value
     b2c:	80 ec       	ldi	r24, 0xC0	; 192
     b2e:	8c bf       	out	0x3c, r24	; 60
	SET_BIT(TCCR0,COM01);
     b30:	83 b7       	in	r24, 0x33	; 51
     b32:	80 62       	ori	r24, 0x20	; 32
     b34:	83 bf       	out	0x33, r24	; 51
}
     b36:	08 95       	ret

00000b38 <vInit_Timer2_NormalMode>:

void vInit_Timer2_NormalMode()
{
	CLR_BIT(TCCR2,WGM21);
     b38:	85 b5       	in	r24, 0x25	; 37
     b3a:	87 7f       	andi	r24, 0xF7	; 247
     b3c:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,WGM20); //Choose Normal mode
     b3e:	85 b5       	in	r24, 0x25	; 37
     b40:	8f 7b       	andi	r24, 0xBF	; 191
     b42:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
     b44:	85 b5       	in	r24, 0x25	; 37
     b46:	84 60       	ori	r24, 0x04	; 4
     b48:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,CS21);
     b4a:	85 b5       	in	r24, 0x25	; 37
     b4c:	8d 7f       	andi	r24, 0xFD	; 253
     b4e:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS20); //Set prescaler to /1024
     b50:	85 b5       	in	r24, 0x25	; 37
     b52:	81 60       	ori	r24, 0x01	; 1
     b54:	85 bd       	out	0x25, r24	; 37
	SET_BIT(ASSR,AS2);//Now clock is coming from PB6 PB7
     b56:	82 b5       	in	r24, 0x22	; 34
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	82 bd       	out	0x22, r24	; 34
	sei();
     b5c:	78 94       	sei
	SET_BIT(TIMSK,TOIE2); //Enable interrupt
     b5e:	89 b7       	in	r24, 0x39	; 57
     b60:	80 64       	ori	r24, 0x40	; 64
     b62:	89 bf       	out	0x39, r24	; 57
	TCNT2=0; //Preload value
     b64:	14 bc       	out	0x24, r1	; 36
}
     b66:	08 95       	ret

00000b68 <Timer1A_fastPWM_wave>:
void Timer1A_fastPWM_wave(double value)
{
	SET_BIT(DDRD,5); //you have to set  OC0 pin (PB3) as output pin to be able to generate a wave on this pin .
     b68:	8d 9a       	sbi	0x11, 5	; 17
	SET_BIT(TCCR1A,WGM11);
     b6a:	2f b5       	in	r18, 0x2f	; 47
     b6c:	22 60       	ori	r18, 0x02	; 2
     b6e:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM13);
     b70:	2e b5       	in	r18, 0x2e	; 46
     b72:	20 61       	ori	r18, 0x10	; 16
     b74:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM12); //Choose fast pwm
     b76:	2e b5       	in	r18, 0x2e	; 46
     b78:	28 60       	ori	r18, 0x08	; 8
     b7a:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,CS10); //No prescaler
     b7c:	2e b5       	in	r18, 0x2e	; 46
     b7e:	21 60       	ori	r18, 0x01	; 1
     b80:	2e bd       	out	0x2e, r18	; 46
	OCR1A=value*8000; //If the cpu clock is 1Mhz then OCR1A = 1000 means 1 ms
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	4a ef       	ldi	r20, 0xFA	; 250
     b88:	55 e4       	ldi	r21, 0x45	; 69
     b8a:	0e 94 83 07 	call	0xf06	; 0xf06 <__mulsf3>
     b8e:	0e 94 06 07 	call	0xe0c	; 0xe0c <__fixunssfsi>
     b92:	dc 01       	movw	r26, r24
     b94:	cb 01       	movw	r24, r22
     b96:	9b bd       	out	0x2b, r25	; 43
     b98:	8a bd       	out	0x2a, r24	; 42
	ICR1=19999; //Periodic time of the wave
     b9a:	8f e1       	ldi	r24, 0x1F	; 31
     b9c:	9e e4       	ldi	r25, 0x4E	; 78
     b9e:	97 bd       	out	0x27, r25	; 39
     ba0:	86 bd       	out	0x26, r24	; 38
	SET_BIT(TCCR1A,COM1A1); // non inverting mode (The higher the OCR0 the higher the duty cycle)
     ba2:	8f b5       	in	r24, 0x2f	; 47
     ba4:	80 68       	ori	r24, 0x80	; 128
     ba6:	8f bd       	out	0x2f, r24	; 47

}
     ba8:	08 95       	ret

00000baa <Timer1B_fastPWM_wave>:
void Timer1B_fastPWM_wave(double value)
{
	SET_BIT(DDRD,4); //you have to set  OC0 pin (PB3) as output pin to be able to generate a wave on this pin .
     baa:	8c 9a       	sbi	0x11, 4	; 17
	SET_BIT(TCCR1A,WGM11);
     bac:	2f b5       	in	r18, 0x2f	; 47
     bae:	22 60       	ori	r18, 0x02	; 2
     bb0:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM13);
     bb2:	2e b5       	in	r18, 0x2e	; 46
     bb4:	20 61       	ori	r18, 0x10	; 16
     bb6:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM12); //Choose fast pwm
     bb8:	2e b5       	in	r18, 0x2e	; 46
     bba:	28 60       	ori	r18, 0x08	; 8
     bbc:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,CS10); //No prescaler
     bbe:	2e b5       	in	r18, 0x2e	; 46
     bc0:	21 60       	ori	r18, 0x01	; 1
     bc2:	2e bd       	out	0x2e, r18	; 46
	OCR1B=value*1000; //If the cpu clock is 1Mhz then OCR1A = 1000 means 1 ms
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	4a e7       	ldi	r20, 0x7A	; 122
     bca:	54 e4       	ldi	r21, 0x44	; 68
     bcc:	0e 94 83 07 	call	0xf06	; 0xf06 <__mulsf3>
     bd0:	0e 94 06 07 	call	0xe0c	; 0xe0c <__fixunssfsi>
     bd4:	dc 01       	movw	r26, r24
     bd6:	cb 01       	movw	r24, r22
     bd8:	99 bd       	out	0x29, r25	; 41
     bda:	88 bd       	out	0x28, r24	; 40
	ICR1=19999; //Periodic time of the wave
     bdc:	8f e1       	ldi	r24, 0x1F	; 31
     bde:	9e e4       	ldi	r25, 0x4E	; 78
     be0:	97 bd       	out	0x27, r25	; 39
     be2:	86 bd       	out	0x26, r24	; 38
	SET_BIT(TCCR1A,COM1B1); // non inverting mode (The higher the OCR0 the higher the duty cycle)
     be4:	8f b5       	in	r24, 0x2f	; 47
     be6:	80 62       	ori	r24, 0x20	; 32
     be8:	8f bd       	out	0x2f, r24	; 47

     bea:	08 95       	ret

00000bec <UART_vInit>:
#include <util/delay.h>
#include <avr/io.h>
#include "std_macros.h"

void UART_vInit (unsigned long baud)
{
     bec:	dc 01       	movw	r26, r24
     bee:	cb 01       	movw	r24, r22
	// Choosing the baud rate
	unsigned short baudrate=(F_CPU/(16*baud))-1;
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	aa 1f       	adc	r26, r26
     bf6:	bb 1f       	adc	r27, r27
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	aa 1f       	adc	r26, r26
     bfe:	bb 1f       	adc	r27, r27
     c00:	9c 01       	movw	r18, r24
     c02:	ad 01       	movw	r20, r26
     c04:	22 0f       	add	r18, r18
     c06:	33 1f       	adc	r19, r19
     c08:	44 1f       	adc	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	22 0f       	add	r18, r18
     c0e:	33 1f       	adc	r19, r19
     c10:	44 1f       	adc	r20, r20
     c12:	55 1f       	adc	r21, r21
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	72 e1       	ldi	r23, 0x12	; 18
     c18:	8a e7       	ldi	r24, 0x7A	; 122
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__udivmodsi4>
     c20:	21 50       	subi	r18, 0x01	; 1
     c22:	30 40       	sbci	r19, 0x00	; 0
	UBRRH =(unsigned char)(baudrate>>8);
     c24:	30 bd       	out	0x20, r19	; 32
	UBRRL =(unsigned char) baudrate;
     c26:	29 b9       	out	0x09, r18	; 9
	// Enable trasmit and recieve
	SET_BIT(UCSRB,TXEN);
     c28:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB,RXEN);
     c2a:	54 9a       	sbi	0x0a, 4	; 10
	//Choose number of data bits (8) and parity (no parity) and stop bits (1) 
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
     c2c:	86 e8       	ldi	r24, 0x86	; 134
     c2e:	80 bd       	out	0x20, r24	; 32
}
     c30:	08 95       	ret

00000c32 <UART_vSendData>:
void UART_vSendData(char data)
{
	//wait for UDR transmit buffer to be empty
	while (!READ_BIT(UCSRA,UDRE));
     c32:	5d 9b       	sbis	0x0b, 5	; 11
     c34:	fe cf       	rjmp	.-4      	; 0xc32 <UART_vSendData>
	//Put data in UDR
	UDR=data;
     c36:	8c b9       	out	0x0c, r24	; 12
}
     c38:	08 95       	ret

00000c3a <UART_u8ReceiveData>:
char UART_u8ReceiveData(void)
{
	//wait for UDR recieve buffer to be filled with data
	while (!READ_BIT(UCSRA,RXC));
     c3a:	5f 9b       	sbis	0x0b, 7	; 11
     c3c:	fe cf       	rjmp	.-4      	; 0xc3a <UART_u8ReceiveData>
	return UDR;
     c3e:	8c b1       	in	r24, 0x0c	; 12
}
     c40:	08 95       	ret

00000c42 <UART_vSendString>:
void UART_vSendString(char* ptr)
{
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	ec 01       	movw	r28, r24
	while(*ptr!=0)
     c48:	88 81       	ld	r24, Y
     c4a:	88 23       	and	r24, r24
     c4c:	79 f0       	breq	.+30     	; 0xc6c <UART_vSendString+0x2a>
{
	//wait for UDR recieve buffer to be filled with data
	while (!READ_BIT(UCSRA,RXC));
	return UDR;
}
void UART_vSendString(char* ptr)
     c4e:	21 96       	adiw	r28, 0x01	; 1
{
	while(*ptr!=0)
	{
		UART_vSendData(*ptr);
     c50:	0e 94 19 06 	call	0xc32	; 0xc32 <UART_vSendData>
     c54:	8f ef       	ldi	r24, 0xFF	; 255
     c56:	90 e7       	ldi	r25, 0x70	; 112
     c58:	a2 e0       	ldi	r26, 0x02	; 2
     c5a:	81 50       	subi	r24, 0x01	; 1
     c5c:	90 40       	sbci	r25, 0x00	; 0
     c5e:	a0 40       	sbci	r26, 0x00	; 0
     c60:	e1 f7       	brne	.-8      	; 0xc5a <UART_vSendString+0x18>
     c62:	00 c0       	rjmp	.+0      	; 0xc64 <UART_vSendString+0x22>
     c64:	00 00       	nop
	while (!READ_BIT(UCSRA,RXC));
	return UDR;
}
void UART_vSendString(char* ptr)
{
	while(*ptr!=0)
     c66:	89 91       	ld	r24, Y+
     c68:	88 23       	and	r24, r24
     c6a:	91 f7       	brne	.-28     	; 0xc50 <UART_vSendString+0xe>
	{
		UART_vSendData(*ptr);
		ptr++;
		_delay_ms(100);
	}
}
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	08 95       	ret

00000c72 <__subsf3>:
     c72:	50 58       	subi	r21, 0x80	; 128

00000c74 <__addsf3>:
     c74:	bb 27       	eor	r27, r27
     c76:	aa 27       	eor	r26, r26
     c78:	0e d0       	rcall	.+28     	; 0xc96 <__addsf3x>
     c7a:	0b c1       	rjmp	.+534    	; 0xe92 <__fp_round>
     c7c:	fc d0       	rcall	.+504    	; 0xe76 <__fp_pscA>
     c7e:	30 f0       	brcs	.+12     	; 0xc8c <__addsf3+0x18>
     c80:	01 d1       	rcall	.+514    	; 0xe84 <__fp_pscB>
     c82:	20 f0       	brcs	.+8      	; 0xc8c <__addsf3+0x18>
     c84:	31 f4       	brne	.+12     	; 0xc92 <__addsf3+0x1e>
     c86:	9f 3f       	cpi	r25, 0xFF	; 255
     c88:	11 f4       	brne	.+4      	; 0xc8e <__addsf3+0x1a>
     c8a:	1e f4       	brtc	.+6      	; 0xc92 <__addsf3+0x1e>
     c8c:	f1 c0       	rjmp	.+482    	; 0xe70 <__fp_nan>
     c8e:	0e f4       	brtc	.+2      	; 0xc92 <__addsf3+0x1e>
     c90:	e0 95       	com	r30
     c92:	e7 fb       	bst	r30, 7
     c94:	e7 c0       	rjmp	.+462    	; 0xe64 <__fp_inf>

00000c96 <__addsf3x>:
     c96:	e9 2f       	mov	r30, r25
     c98:	0d d1       	rcall	.+538    	; 0xeb4 <__fp_split3>
     c9a:	80 f3       	brcs	.-32     	; 0xc7c <__addsf3+0x8>
     c9c:	ba 17       	cp	r27, r26
     c9e:	62 07       	cpc	r22, r18
     ca0:	73 07       	cpc	r23, r19
     ca2:	84 07       	cpc	r24, r20
     ca4:	95 07       	cpc	r25, r21
     ca6:	18 f0       	brcs	.+6      	; 0xcae <__addsf3x+0x18>
     ca8:	71 f4       	brne	.+28     	; 0xcc6 <__addsf3x+0x30>
     caa:	9e f5       	brtc	.+102    	; 0xd12 <__addsf3x+0x7c>
     cac:	25 c1       	rjmp	.+586    	; 0xef8 <__fp_zero>
     cae:	0e f4       	brtc	.+2      	; 0xcb2 <__addsf3x+0x1c>
     cb0:	e0 95       	com	r30
     cb2:	0b 2e       	mov	r0, r27
     cb4:	ba 2f       	mov	r27, r26
     cb6:	a0 2d       	mov	r26, r0
     cb8:	0b 01       	movw	r0, r22
     cba:	b9 01       	movw	r22, r18
     cbc:	90 01       	movw	r18, r0
     cbe:	0c 01       	movw	r0, r24
     cc0:	ca 01       	movw	r24, r20
     cc2:	a0 01       	movw	r20, r0
     cc4:	11 24       	eor	r1, r1
     cc6:	ff 27       	eor	r31, r31
     cc8:	59 1b       	sub	r21, r25
     cca:	99 f0       	breq	.+38     	; 0xcf2 <__addsf3x+0x5c>
     ccc:	59 3f       	cpi	r21, 0xF9	; 249
     cce:	50 f4       	brcc	.+20     	; 0xce4 <__addsf3x+0x4e>
     cd0:	50 3e       	cpi	r21, 0xE0	; 224
     cd2:	68 f1       	brcs	.+90     	; 0xd2e <__addsf3x+0x98>
     cd4:	1a 16       	cp	r1, r26
     cd6:	f0 40       	sbci	r31, 0x00	; 0
     cd8:	a2 2f       	mov	r26, r18
     cda:	23 2f       	mov	r18, r19
     cdc:	34 2f       	mov	r19, r20
     cde:	44 27       	eor	r20, r20
     ce0:	58 5f       	subi	r21, 0xF8	; 248
     ce2:	f3 cf       	rjmp	.-26     	; 0xcca <__addsf3x+0x34>
     ce4:	46 95       	lsr	r20
     ce6:	37 95       	ror	r19
     ce8:	27 95       	ror	r18
     cea:	a7 95       	ror	r26
     cec:	f0 40       	sbci	r31, 0x00	; 0
     cee:	53 95       	inc	r21
     cf0:	c9 f7       	brne	.-14     	; 0xce4 <__addsf3x+0x4e>
     cf2:	7e f4       	brtc	.+30     	; 0xd12 <__addsf3x+0x7c>
     cf4:	1f 16       	cp	r1, r31
     cf6:	ba 0b       	sbc	r27, r26
     cf8:	62 0b       	sbc	r22, r18
     cfa:	73 0b       	sbc	r23, r19
     cfc:	84 0b       	sbc	r24, r20
     cfe:	ba f0       	brmi	.+46     	; 0xd2e <__addsf3x+0x98>
     d00:	91 50       	subi	r25, 0x01	; 1
     d02:	a1 f0       	breq	.+40     	; 0xd2c <__addsf3x+0x96>
     d04:	ff 0f       	add	r31, r31
     d06:	bb 1f       	adc	r27, r27
     d08:	66 1f       	adc	r22, r22
     d0a:	77 1f       	adc	r23, r23
     d0c:	88 1f       	adc	r24, r24
     d0e:	c2 f7       	brpl	.-16     	; 0xd00 <__addsf3x+0x6a>
     d10:	0e c0       	rjmp	.+28     	; 0xd2e <__addsf3x+0x98>
     d12:	ba 0f       	add	r27, r26
     d14:	62 1f       	adc	r22, r18
     d16:	73 1f       	adc	r23, r19
     d18:	84 1f       	adc	r24, r20
     d1a:	48 f4       	brcc	.+18     	; 0xd2e <__addsf3x+0x98>
     d1c:	87 95       	ror	r24
     d1e:	77 95       	ror	r23
     d20:	67 95       	ror	r22
     d22:	b7 95       	ror	r27
     d24:	f7 95       	ror	r31
     d26:	9e 3f       	cpi	r25, 0xFE	; 254
     d28:	08 f0       	brcs	.+2      	; 0xd2c <__addsf3x+0x96>
     d2a:	b3 cf       	rjmp	.-154    	; 0xc92 <__addsf3+0x1e>
     d2c:	93 95       	inc	r25
     d2e:	88 0f       	add	r24, r24
     d30:	08 f0       	brcs	.+2      	; 0xd34 <__addsf3x+0x9e>
     d32:	99 27       	eor	r25, r25
     d34:	ee 0f       	add	r30, r30
     d36:	97 95       	ror	r25
     d38:	87 95       	ror	r24
     d3a:	08 95       	ret

00000d3c <__divsf3>:
     d3c:	0c d0       	rcall	.+24     	; 0xd56 <__divsf3x>
     d3e:	a9 c0       	rjmp	.+338    	; 0xe92 <__fp_round>
     d40:	a1 d0       	rcall	.+322    	; 0xe84 <__fp_pscB>
     d42:	40 f0       	brcs	.+16     	; 0xd54 <__divsf3+0x18>
     d44:	98 d0       	rcall	.+304    	; 0xe76 <__fp_pscA>
     d46:	30 f0       	brcs	.+12     	; 0xd54 <__divsf3+0x18>
     d48:	21 f4       	brne	.+8      	; 0xd52 <__divsf3+0x16>
     d4a:	5f 3f       	cpi	r21, 0xFF	; 255
     d4c:	19 f0       	breq	.+6      	; 0xd54 <__divsf3+0x18>
     d4e:	8a c0       	rjmp	.+276    	; 0xe64 <__fp_inf>
     d50:	51 11       	cpse	r21, r1
     d52:	d3 c0       	rjmp	.+422    	; 0xefa <__fp_szero>
     d54:	8d c0       	rjmp	.+282    	; 0xe70 <__fp_nan>

00000d56 <__divsf3x>:
     d56:	ae d0       	rcall	.+348    	; 0xeb4 <__fp_split3>
     d58:	98 f3       	brcs	.-26     	; 0xd40 <__divsf3+0x4>

00000d5a <__divsf3_pse>:
     d5a:	99 23       	and	r25, r25
     d5c:	c9 f3       	breq	.-14     	; 0xd50 <__divsf3+0x14>
     d5e:	55 23       	and	r21, r21
     d60:	b1 f3       	breq	.-20     	; 0xd4e <__divsf3+0x12>
     d62:	95 1b       	sub	r25, r21
     d64:	55 0b       	sbc	r21, r21
     d66:	bb 27       	eor	r27, r27
     d68:	aa 27       	eor	r26, r26
     d6a:	62 17       	cp	r22, r18
     d6c:	73 07       	cpc	r23, r19
     d6e:	84 07       	cpc	r24, r20
     d70:	38 f0       	brcs	.+14     	; 0xd80 <__divsf3_pse+0x26>
     d72:	9f 5f       	subi	r25, 0xFF	; 255
     d74:	5f 4f       	sbci	r21, 0xFF	; 255
     d76:	22 0f       	add	r18, r18
     d78:	33 1f       	adc	r19, r19
     d7a:	44 1f       	adc	r20, r20
     d7c:	aa 1f       	adc	r26, r26
     d7e:	a9 f3       	breq	.-22     	; 0xd6a <__divsf3_pse+0x10>
     d80:	33 d0       	rcall	.+102    	; 0xde8 <__divsf3_pse+0x8e>
     d82:	0e 2e       	mov	r0, r30
     d84:	3a f0       	brmi	.+14     	; 0xd94 <__divsf3_pse+0x3a>
     d86:	e0 e8       	ldi	r30, 0x80	; 128
     d88:	30 d0       	rcall	.+96     	; 0xdea <__divsf3_pse+0x90>
     d8a:	91 50       	subi	r25, 0x01	; 1
     d8c:	50 40       	sbci	r21, 0x00	; 0
     d8e:	e6 95       	lsr	r30
     d90:	00 1c       	adc	r0, r0
     d92:	ca f7       	brpl	.-14     	; 0xd86 <__divsf3_pse+0x2c>
     d94:	29 d0       	rcall	.+82     	; 0xde8 <__divsf3_pse+0x8e>
     d96:	fe 2f       	mov	r31, r30
     d98:	27 d0       	rcall	.+78     	; 0xde8 <__divsf3_pse+0x8e>
     d9a:	66 0f       	add	r22, r22
     d9c:	77 1f       	adc	r23, r23
     d9e:	88 1f       	adc	r24, r24
     da0:	bb 1f       	adc	r27, r27
     da2:	26 17       	cp	r18, r22
     da4:	37 07       	cpc	r19, r23
     da6:	48 07       	cpc	r20, r24
     da8:	ab 07       	cpc	r26, r27
     daa:	b0 e8       	ldi	r27, 0x80	; 128
     dac:	09 f0       	breq	.+2      	; 0xdb0 <__divsf3_pse+0x56>
     dae:	bb 0b       	sbc	r27, r27
     db0:	80 2d       	mov	r24, r0
     db2:	bf 01       	movw	r22, r30
     db4:	ff 27       	eor	r31, r31
     db6:	93 58       	subi	r25, 0x83	; 131
     db8:	5f 4f       	sbci	r21, 0xFF	; 255
     dba:	2a f0       	brmi	.+10     	; 0xdc6 <__divsf3_pse+0x6c>
     dbc:	9e 3f       	cpi	r25, 0xFE	; 254
     dbe:	51 05       	cpc	r21, r1
     dc0:	68 f0       	brcs	.+26     	; 0xddc <__divsf3_pse+0x82>
     dc2:	50 c0       	rjmp	.+160    	; 0xe64 <__fp_inf>
     dc4:	9a c0       	rjmp	.+308    	; 0xefa <__fp_szero>
     dc6:	5f 3f       	cpi	r21, 0xFF	; 255
     dc8:	ec f3       	brlt	.-6      	; 0xdc4 <__divsf3_pse+0x6a>
     dca:	98 3e       	cpi	r25, 0xE8	; 232
     dcc:	dc f3       	brlt	.-10     	; 0xdc4 <__divsf3_pse+0x6a>
     dce:	86 95       	lsr	r24
     dd0:	77 95       	ror	r23
     dd2:	67 95       	ror	r22
     dd4:	b7 95       	ror	r27
     dd6:	f7 95       	ror	r31
     dd8:	9f 5f       	subi	r25, 0xFF	; 255
     dda:	c9 f7       	brne	.-14     	; 0xdce <__divsf3_pse+0x74>
     ddc:	88 0f       	add	r24, r24
     dde:	91 1d       	adc	r25, r1
     de0:	96 95       	lsr	r25
     de2:	87 95       	ror	r24
     de4:	97 f9       	bld	r25, 7
     de6:	08 95       	ret
     de8:	e1 e0       	ldi	r30, 0x01	; 1
     dea:	66 0f       	add	r22, r22
     dec:	77 1f       	adc	r23, r23
     dee:	88 1f       	adc	r24, r24
     df0:	bb 1f       	adc	r27, r27
     df2:	62 17       	cp	r22, r18
     df4:	73 07       	cpc	r23, r19
     df6:	84 07       	cpc	r24, r20
     df8:	ba 07       	cpc	r27, r26
     dfa:	20 f0       	brcs	.+8      	; 0xe04 <__divsf3_pse+0xaa>
     dfc:	62 1b       	sub	r22, r18
     dfe:	73 0b       	sbc	r23, r19
     e00:	84 0b       	sbc	r24, r20
     e02:	ba 0b       	sbc	r27, r26
     e04:	ee 1f       	adc	r30, r30
     e06:	88 f7       	brcc	.-30     	; 0xdea <__divsf3_pse+0x90>
     e08:	e0 95       	com	r30
     e0a:	08 95       	ret

00000e0c <__fixunssfsi>:
     e0c:	5b d0       	rcall	.+182    	; 0xec4 <__fp_splitA>
     e0e:	88 f0       	brcs	.+34     	; 0xe32 <__fixunssfsi+0x26>
     e10:	9f 57       	subi	r25, 0x7F	; 127
     e12:	90 f0       	brcs	.+36     	; 0xe38 <__fixunssfsi+0x2c>
     e14:	b9 2f       	mov	r27, r25
     e16:	99 27       	eor	r25, r25
     e18:	b7 51       	subi	r27, 0x17	; 23
     e1a:	a0 f0       	brcs	.+40     	; 0xe44 <__fixunssfsi+0x38>
     e1c:	d1 f0       	breq	.+52     	; 0xe52 <__fixunssfsi+0x46>
     e1e:	66 0f       	add	r22, r22
     e20:	77 1f       	adc	r23, r23
     e22:	88 1f       	adc	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	1a f0       	brmi	.+6      	; 0xe2e <__fixunssfsi+0x22>
     e28:	ba 95       	dec	r27
     e2a:	c9 f7       	brne	.-14     	; 0xe1e <__fixunssfsi+0x12>
     e2c:	12 c0       	rjmp	.+36     	; 0xe52 <__fixunssfsi+0x46>
     e2e:	b1 30       	cpi	r27, 0x01	; 1
     e30:	81 f0       	breq	.+32     	; 0xe52 <__fixunssfsi+0x46>
     e32:	62 d0       	rcall	.+196    	; 0xef8 <__fp_zero>
     e34:	b1 e0       	ldi	r27, 0x01	; 1
     e36:	08 95       	ret
     e38:	5f c0       	rjmp	.+190    	; 0xef8 <__fp_zero>
     e3a:	67 2f       	mov	r22, r23
     e3c:	78 2f       	mov	r23, r24
     e3e:	88 27       	eor	r24, r24
     e40:	b8 5f       	subi	r27, 0xF8	; 248
     e42:	39 f0       	breq	.+14     	; 0xe52 <__fixunssfsi+0x46>
     e44:	b9 3f       	cpi	r27, 0xF9	; 249
     e46:	cc f3       	brlt	.-14     	; 0xe3a <__fixunssfsi+0x2e>
     e48:	86 95       	lsr	r24
     e4a:	77 95       	ror	r23
     e4c:	67 95       	ror	r22
     e4e:	b3 95       	inc	r27
     e50:	d9 f7       	brne	.-10     	; 0xe48 <__fixunssfsi+0x3c>
     e52:	3e f4       	brtc	.+14     	; 0xe62 <__fixunssfsi+0x56>
     e54:	90 95       	com	r25
     e56:	80 95       	com	r24
     e58:	70 95       	com	r23
     e5a:	61 95       	neg	r22
     e5c:	7f 4f       	sbci	r23, 0xFF	; 255
     e5e:	8f 4f       	sbci	r24, 0xFF	; 255
     e60:	9f 4f       	sbci	r25, 0xFF	; 255
     e62:	08 95       	ret

00000e64 <__fp_inf>:
     e64:	97 f9       	bld	r25, 7
     e66:	9f 67       	ori	r25, 0x7F	; 127
     e68:	80 e8       	ldi	r24, 0x80	; 128
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	08 95       	ret

00000e70 <__fp_nan>:
     e70:	9f ef       	ldi	r25, 0xFF	; 255
     e72:	80 ec       	ldi	r24, 0xC0	; 192
     e74:	08 95       	ret

00000e76 <__fp_pscA>:
     e76:	00 24       	eor	r0, r0
     e78:	0a 94       	dec	r0
     e7a:	16 16       	cp	r1, r22
     e7c:	17 06       	cpc	r1, r23
     e7e:	18 06       	cpc	r1, r24
     e80:	09 06       	cpc	r0, r25
     e82:	08 95       	ret

00000e84 <__fp_pscB>:
     e84:	00 24       	eor	r0, r0
     e86:	0a 94       	dec	r0
     e88:	12 16       	cp	r1, r18
     e8a:	13 06       	cpc	r1, r19
     e8c:	14 06       	cpc	r1, r20
     e8e:	05 06       	cpc	r0, r21
     e90:	08 95       	ret

00000e92 <__fp_round>:
     e92:	09 2e       	mov	r0, r25
     e94:	03 94       	inc	r0
     e96:	00 0c       	add	r0, r0
     e98:	11 f4       	brne	.+4      	; 0xe9e <__fp_round+0xc>
     e9a:	88 23       	and	r24, r24
     e9c:	52 f0       	brmi	.+20     	; 0xeb2 <__fp_round+0x20>
     e9e:	bb 0f       	add	r27, r27
     ea0:	40 f4       	brcc	.+16     	; 0xeb2 <__fp_round+0x20>
     ea2:	bf 2b       	or	r27, r31
     ea4:	11 f4       	brne	.+4      	; 0xeaa <__fp_round+0x18>
     ea6:	60 ff       	sbrs	r22, 0
     ea8:	04 c0       	rjmp	.+8      	; 0xeb2 <__fp_round+0x20>
     eaa:	6f 5f       	subi	r22, 0xFF	; 255
     eac:	7f 4f       	sbci	r23, 0xFF	; 255
     eae:	8f 4f       	sbci	r24, 0xFF	; 255
     eb0:	9f 4f       	sbci	r25, 0xFF	; 255
     eb2:	08 95       	ret

00000eb4 <__fp_split3>:
     eb4:	57 fd       	sbrc	r21, 7
     eb6:	90 58       	subi	r25, 0x80	; 128
     eb8:	44 0f       	add	r20, r20
     eba:	55 1f       	adc	r21, r21
     ebc:	59 f0       	breq	.+22     	; 0xed4 <__fp_splitA+0x10>
     ebe:	5f 3f       	cpi	r21, 0xFF	; 255
     ec0:	71 f0       	breq	.+28     	; 0xede <__fp_splitA+0x1a>
     ec2:	47 95       	ror	r20

00000ec4 <__fp_splitA>:
     ec4:	88 0f       	add	r24, r24
     ec6:	97 fb       	bst	r25, 7
     ec8:	99 1f       	adc	r25, r25
     eca:	61 f0       	breq	.+24     	; 0xee4 <__fp_splitA+0x20>
     ecc:	9f 3f       	cpi	r25, 0xFF	; 255
     ece:	79 f0       	breq	.+30     	; 0xeee <__fp_splitA+0x2a>
     ed0:	87 95       	ror	r24
     ed2:	08 95       	ret
     ed4:	12 16       	cp	r1, r18
     ed6:	13 06       	cpc	r1, r19
     ed8:	14 06       	cpc	r1, r20
     eda:	55 1f       	adc	r21, r21
     edc:	f2 cf       	rjmp	.-28     	; 0xec2 <__fp_split3+0xe>
     ede:	46 95       	lsr	r20
     ee0:	f1 df       	rcall	.-30     	; 0xec4 <__fp_splitA>
     ee2:	08 c0       	rjmp	.+16     	; 0xef4 <__fp_splitA+0x30>
     ee4:	16 16       	cp	r1, r22
     ee6:	17 06       	cpc	r1, r23
     ee8:	18 06       	cpc	r1, r24
     eea:	99 1f       	adc	r25, r25
     eec:	f1 cf       	rjmp	.-30     	; 0xed0 <__fp_splitA+0xc>
     eee:	86 95       	lsr	r24
     ef0:	71 05       	cpc	r23, r1
     ef2:	61 05       	cpc	r22, r1
     ef4:	08 94       	sec
     ef6:	08 95       	ret

00000ef8 <__fp_zero>:
     ef8:	e8 94       	clt

00000efa <__fp_szero>:
     efa:	bb 27       	eor	r27, r27
     efc:	66 27       	eor	r22, r22
     efe:	77 27       	eor	r23, r23
     f00:	cb 01       	movw	r24, r22
     f02:	97 f9       	bld	r25, 7
     f04:	08 95       	ret

00000f06 <__mulsf3>:
     f06:	0b d0       	rcall	.+22     	; 0xf1e <__mulsf3x>
     f08:	c4 cf       	rjmp	.-120    	; 0xe92 <__fp_round>
     f0a:	b5 df       	rcall	.-150    	; 0xe76 <__fp_pscA>
     f0c:	28 f0       	brcs	.+10     	; 0xf18 <__mulsf3+0x12>
     f0e:	ba df       	rcall	.-140    	; 0xe84 <__fp_pscB>
     f10:	18 f0       	brcs	.+6      	; 0xf18 <__mulsf3+0x12>
     f12:	95 23       	and	r25, r21
     f14:	09 f0       	breq	.+2      	; 0xf18 <__mulsf3+0x12>
     f16:	a6 cf       	rjmp	.-180    	; 0xe64 <__fp_inf>
     f18:	ab cf       	rjmp	.-170    	; 0xe70 <__fp_nan>
     f1a:	11 24       	eor	r1, r1
     f1c:	ee cf       	rjmp	.-36     	; 0xefa <__fp_szero>

00000f1e <__mulsf3x>:
     f1e:	ca df       	rcall	.-108    	; 0xeb4 <__fp_split3>
     f20:	a0 f3       	brcs	.-24     	; 0xf0a <__mulsf3+0x4>

00000f22 <__mulsf3_pse>:
     f22:	95 9f       	mul	r25, r21
     f24:	d1 f3       	breq	.-12     	; 0xf1a <__mulsf3+0x14>
     f26:	95 0f       	add	r25, r21
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	55 1f       	adc	r21, r21
     f2c:	62 9f       	mul	r22, r18
     f2e:	f0 01       	movw	r30, r0
     f30:	72 9f       	mul	r23, r18
     f32:	bb 27       	eor	r27, r27
     f34:	f0 0d       	add	r31, r0
     f36:	b1 1d       	adc	r27, r1
     f38:	63 9f       	mul	r22, r19
     f3a:	aa 27       	eor	r26, r26
     f3c:	f0 0d       	add	r31, r0
     f3e:	b1 1d       	adc	r27, r1
     f40:	aa 1f       	adc	r26, r26
     f42:	64 9f       	mul	r22, r20
     f44:	66 27       	eor	r22, r22
     f46:	b0 0d       	add	r27, r0
     f48:	a1 1d       	adc	r26, r1
     f4a:	66 1f       	adc	r22, r22
     f4c:	82 9f       	mul	r24, r18
     f4e:	22 27       	eor	r18, r18
     f50:	b0 0d       	add	r27, r0
     f52:	a1 1d       	adc	r26, r1
     f54:	62 1f       	adc	r22, r18
     f56:	73 9f       	mul	r23, r19
     f58:	b0 0d       	add	r27, r0
     f5a:	a1 1d       	adc	r26, r1
     f5c:	62 1f       	adc	r22, r18
     f5e:	83 9f       	mul	r24, r19
     f60:	a0 0d       	add	r26, r0
     f62:	61 1d       	adc	r22, r1
     f64:	22 1f       	adc	r18, r18
     f66:	74 9f       	mul	r23, r20
     f68:	33 27       	eor	r19, r19
     f6a:	a0 0d       	add	r26, r0
     f6c:	61 1d       	adc	r22, r1
     f6e:	23 1f       	adc	r18, r19
     f70:	84 9f       	mul	r24, r20
     f72:	60 0d       	add	r22, r0
     f74:	21 1d       	adc	r18, r1
     f76:	82 2f       	mov	r24, r18
     f78:	76 2f       	mov	r23, r22
     f7a:	6a 2f       	mov	r22, r26
     f7c:	11 24       	eor	r1, r1
     f7e:	9f 57       	subi	r25, 0x7F	; 127
     f80:	50 40       	sbci	r21, 0x00	; 0
     f82:	8a f0       	brmi	.+34     	; 0xfa6 <__mulsf3_pse+0x84>
     f84:	e1 f0       	breq	.+56     	; 0xfbe <__mulsf3_pse+0x9c>
     f86:	88 23       	and	r24, r24
     f88:	4a f0       	brmi	.+18     	; 0xf9c <__mulsf3_pse+0x7a>
     f8a:	ee 0f       	add	r30, r30
     f8c:	ff 1f       	adc	r31, r31
     f8e:	bb 1f       	adc	r27, r27
     f90:	66 1f       	adc	r22, r22
     f92:	77 1f       	adc	r23, r23
     f94:	88 1f       	adc	r24, r24
     f96:	91 50       	subi	r25, 0x01	; 1
     f98:	50 40       	sbci	r21, 0x00	; 0
     f9a:	a9 f7       	brne	.-22     	; 0xf86 <__mulsf3_pse+0x64>
     f9c:	9e 3f       	cpi	r25, 0xFE	; 254
     f9e:	51 05       	cpc	r21, r1
     fa0:	70 f0       	brcs	.+28     	; 0xfbe <__mulsf3_pse+0x9c>
     fa2:	60 cf       	rjmp	.-320    	; 0xe64 <__fp_inf>
     fa4:	aa cf       	rjmp	.-172    	; 0xefa <__fp_szero>
     fa6:	5f 3f       	cpi	r21, 0xFF	; 255
     fa8:	ec f3       	brlt	.-6      	; 0xfa4 <__mulsf3_pse+0x82>
     faa:	98 3e       	cpi	r25, 0xE8	; 232
     fac:	dc f3       	brlt	.-10     	; 0xfa4 <__mulsf3_pse+0x82>
     fae:	86 95       	lsr	r24
     fb0:	77 95       	ror	r23
     fb2:	67 95       	ror	r22
     fb4:	b7 95       	ror	r27
     fb6:	f7 95       	ror	r31
     fb8:	e7 95       	ror	r30
     fba:	9f 5f       	subi	r25, 0xFF	; 255
     fbc:	c1 f7       	brne	.-16     	; 0xfae <__mulsf3_pse+0x8c>
     fbe:	fe 2b       	or	r31, r30
     fc0:	88 0f       	add	r24, r24
     fc2:	91 1d       	adc	r25, r1
     fc4:	96 95       	lsr	r25
     fc6:	87 95       	ror	r24
     fc8:	97 f9       	bld	r25, 7
     fca:	08 95       	ret

00000fcc <__udivmodsi4>:
     fcc:	a1 e2       	ldi	r26, 0x21	; 33
     fce:	1a 2e       	mov	r1, r26
     fd0:	aa 1b       	sub	r26, r26
     fd2:	bb 1b       	sub	r27, r27
     fd4:	fd 01       	movw	r30, r26
     fd6:	0d c0       	rjmp	.+26     	; 0xff2 <__udivmodsi4_ep>

00000fd8 <__udivmodsi4_loop>:
     fd8:	aa 1f       	adc	r26, r26
     fda:	bb 1f       	adc	r27, r27
     fdc:	ee 1f       	adc	r30, r30
     fde:	ff 1f       	adc	r31, r31
     fe0:	a2 17       	cp	r26, r18
     fe2:	b3 07       	cpc	r27, r19
     fe4:	e4 07       	cpc	r30, r20
     fe6:	f5 07       	cpc	r31, r21
     fe8:	20 f0       	brcs	.+8      	; 0xff2 <__udivmodsi4_ep>
     fea:	a2 1b       	sub	r26, r18
     fec:	b3 0b       	sbc	r27, r19
     fee:	e4 0b       	sbc	r30, r20
     ff0:	f5 0b       	sbc	r31, r21

00000ff2 <__udivmodsi4_ep>:
     ff2:	66 1f       	adc	r22, r22
     ff4:	77 1f       	adc	r23, r23
     ff6:	88 1f       	adc	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	1a 94       	dec	r1
     ffc:	69 f7       	brne	.-38     	; 0xfd8 <__udivmodsi4_loop>
     ffe:	60 95       	com	r22
    1000:	70 95       	com	r23
    1002:	80 95       	com	r24
    1004:	90 95       	com	r25
    1006:	9b 01       	movw	r18, r22
    1008:	ac 01       	movw	r20, r24
    100a:	bd 01       	movw	r22, r26
    100c:	cf 01       	movw	r24, r30
    100e:	08 95       	ret

00001010 <_exit>:
    1010:	f8 94       	cli

00001012 <__stop_program>:
    1012:	ff cf       	rjmp	.-2      	; 0x1012 <__stop_program>
