
CPU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001020  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00001020  000010b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800070  00800070  000010c4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000010c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001790  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00001818  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000180d  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d6  00000000  00000000  000031c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dfc  00000000  00000000  0000399b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d8  00000000  00000000  00004798  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000507  00000000  00000000  00004b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b03  00000000  00000000  00005077  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bc 01 	call	0x378	; 0x378 <main>
      8a:	0c 94 0e 08 	jmp	0x101c	; 0x101c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Button_vInit>:

#include "DIO.h"

void Button_vInit(unsigned char portname, unsigned char pinnumber)
{
	DIO_vsetPINDir(portname,pinnumber,0);
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
}
      98:	08 95       	ret

0000009a <Button_u8read>:
unsigned char Button_u8read(unsigned char portname, unsigned char pinnumber)
{
	unsigned char x=DIO_u8read(portname,pinnumber);
      9a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DIO_u8read>
	return x;
}
      9e:	08 95       	ret

000000a0 <Button_InternalPullUp>:
void Button_InternalPullUp(unsigned char portname, unsigned char pinnumber, unsigned char enable)
{
    DIO_vconnectpullup(portname,pinnumber,enable);
      a0:	0e 94 64 04 	call	0x8c8	; 0x8c8 <DIO_vconnectpullup>
}
      a4:	08 95       	ret

000000a6 <Recieve_Control>:
#include "CPU_Config.h"
#include "USART.h"
char data_room=0,hours=0,seconds=0,minutes=0,guest_pass1=0,guest_pass2=0,guest_pass3=0,guest_pass4=0,guest_flag=0;
void Recieve_Control()
{
	 DIO_write(control_int_pin,HIGH);
      a6:	83 e4       	ldi	r24, 0x43	; 67
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	62 e0       	ldi	r22, 0x02	; 2
      ac:	70 e0       	ldi	r23, 0x00	; 0
      ae:	41 e0       	ldi	r20, 0x01	; 1
      b0:	50 e0       	ldi	r21, 0x00	; 0
      b2:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      b6:	8f e6       	ldi	r24, 0x6F	; 111
      b8:	97 e1       	ldi	r25, 0x17	; 23
      ba:	01 97       	sbiw	r24, 0x01	; 1
      bc:	f1 f7       	brne	.-4      	; 0xba <Recieve_Control+0x14>
      be:	00 c0       	rjmp	.+0      	; 0xc0 <Recieve_Control+0x1a>
      c0:	00 00       	nop
	 _delay_ms(INT_signal_time);
	 DIO_write(control_int_pin,LOW);
      c2:	83 e4       	ldi	r24, 0x43	; 67
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	62 e0       	ldi	r22, 0x02	; 2
      c8:	70 e0       	ldi	r23, 0x00	; 0
      ca:	40 e0       	ldi	r20, 0x00	; 0
      cc:	50 e0       	ldi	r21, 0x00	; 0
      ce:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
	 data_room=SPI_MasterTransmitchar('D',control_ss_pin);
      d2:	84 e4       	ldi	r24, 0x44	; 68
      d4:	63 e4       	ldi	r22, 0x43	; 67
      d6:	43 e0       	ldi	r20, 0x03	; 3
      d8:	0e 94 f1 06 	call	0xde2	; 0xde2 <SPI_MasterTransmitchar>
      dc:	80 93 78 00 	sts	0x0078, r24
	 DIO_write(control_int_pin,HIGH);
      e0:	83 e4       	ldi	r24, 0x43	; 67
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	62 e0       	ldi	r22, 0x02	; 2
      e6:	70 e0       	ldi	r23, 0x00	; 0
      e8:	41 e0       	ldi	r20, 0x01	; 1
      ea:	50 e0       	ldi	r21, 0x00	; 0
      ec:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
      f0:	8f e6       	ldi	r24, 0x6F	; 111
      f2:	97 e1       	ldi	r25, 0x17	; 23
      f4:	01 97       	sbiw	r24, 0x01	; 1
      f6:	f1 f7       	brne	.-4      	; 0xf4 <Recieve_Control+0x4e>
      f8:	00 c0       	rjmp	.+0      	; 0xfa <Recieve_Control+0x54>
      fa:	00 00       	nop
	 _delay_ms(INT_signal_time);
	 DIO_write(control_int_pin,LOW);
      fc:	83 e4       	ldi	r24, 0x43	; 67
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	62 e0       	ldi	r22, 0x02	; 2
     102:	70 e0       	ldi	r23, 0x00	; 0
     104:	40 e0       	ldi	r20, 0x00	; 0
     106:	50 e0       	ldi	r21, 0x00	; 0
     108:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
	 guest_flag=SPI_MasterTransmitchar('G',control_ss_pin);
     10c:	87 e4       	ldi	r24, 0x47	; 71
     10e:	63 e4       	ldi	r22, 0x43	; 67
     110:	43 e0       	ldi	r20, 0x03	; 3
     112:	0e 94 f1 06 	call	0xde2	; 0xde2 <SPI_MasterTransmitchar>
     116:	80 93 70 00 	sts	0x0070, r24
	 DIO_write(control_int_pin,HIGH);
     11a:	83 e4       	ldi	r24, 0x43	; 67
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	62 e0       	ldi	r22, 0x02	; 2
     120:	70 e0       	ldi	r23, 0x00	; 0
     122:	41 e0       	ldi	r20, 0x01	; 1
     124:	50 e0       	ldi	r21, 0x00	; 0
     126:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
     12a:	8f e6       	ldi	r24, 0x6F	; 111
     12c:	97 e1       	ldi	r25, 0x17	; 23
     12e:	01 97       	sbiw	r24, 0x01	; 1
     130:	f1 f7       	brne	.-4      	; 0x12e <Recieve_Control+0x88>
     132:	00 c0       	rjmp	.+0      	; 0x134 <Recieve_Control+0x8e>
     134:	00 00       	nop
	 _delay_ms(INT_signal_time);
	 DIO_write(control_int_pin,LOW);
     136:	83 e4       	ldi	r24, 0x43	; 67
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	62 e0       	ldi	r22, 0x02	; 2
     13c:	70 e0       	ldi	r23, 0x00	; 0
     13e:	40 e0       	ldi	r20, 0x00	; 0
     140:	50 e0       	ldi	r21, 0x00	; 0
     142:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
	 hours=SPI_MasterTransmitchar('H',control_ss_pin);
     146:	88 e4       	ldi	r24, 0x48	; 72
     148:	63 e4       	ldi	r22, 0x43	; 67
     14a:	43 e0       	ldi	r20, 0x03	; 3
     14c:	0e 94 f1 06 	call	0xde2	; 0xde2 <SPI_MasterTransmitchar>
     150:	80 93 77 00 	sts	0x0077, r24
	 DIO_write(control_int_pin,HIGH);
     154:	83 e4       	ldi	r24, 0x43	; 67
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	62 e0       	ldi	r22, 0x02	; 2
     15a:	70 e0       	ldi	r23, 0x00	; 0
     15c:	41 e0       	ldi	r20, 0x01	; 1
     15e:	50 e0       	ldi	r21, 0x00	; 0
     160:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
     164:	8f e6       	ldi	r24, 0x6F	; 111
     166:	97 e1       	ldi	r25, 0x17	; 23
     168:	01 97       	sbiw	r24, 0x01	; 1
     16a:	f1 f7       	brne	.-4      	; 0x168 <Recieve_Control+0xc2>
     16c:	00 c0       	rjmp	.+0      	; 0x16e <Recieve_Control+0xc8>
     16e:	00 00       	nop
	 _delay_ms(INT_signal_time);
	 DIO_write(control_int_pin,LOW);
     170:	83 e4       	ldi	r24, 0x43	; 67
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	62 e0       	ldi	r22, 0x02	; 2
     176:	70 e0       	ldi	r23, 0x00	; 0
     178:	40 e0       	ldi	r20, 0x00	; 0
     17a:	50 e0       	ldi	r21, 0x00	; 0
     17c:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
	 minutes=SPI_MasterTransmitchar('M',control_ss_pin);
     180:	8d e4       	ldi	r24, 0x4D	; 77
     182:	63 e4       	ldi	r22, 0x43	; 67
     184:	43 e0       	ldi	r20, 0x03	; 3
     186:	0e 94 f1 06 	call	0xde2	; 0xde2 <SPI_MasterTransmitchar>
     18a:	80 93 75 00 	sts	0x0075, r24
	 DIO_write(control_int_pin,HIGH);
     18e:	83 e4       	ldi	r24, 0x43	; 67
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	62 e0       	ldi	r22, 0x02	; 2
     194:	70 e0       	ldi	r23, 0x00	; 0
     196:	41 e0       	ldi	r20, 0x01	; 1
     198:	50 e0       	ldi	r21, 0x00	; 0
     19a:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
     19e:	8f e6       	ldi	r24, 0x6F	; 111
     1a0:	97 e1       	ldi	r25, 0x17	; 23
     1a2:	01 97       	sbiw	r24, 0x01	; 1
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <Recieve_Control+0xfc>
     1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <Recieve_Control+0x102>
     1a8:	00 00       	nop
	 _delay_ms(INT_signal_time);
	 DIO_write(control_int_pin,LOW);
     1aa:	83 e4       	ldi	r24, 0x43	; 67
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	62 e0       	ldi	r22, 0x02	; 2
     1b0:	70 e0       	ldi	r23, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
	 seconds=SPI_MasterTransmitchar('S',control_ss_pin);
     1ba:	83 e5       	ldi	r24, 0x53	; 83
     1bc:	63 e4       	ldi	r22, 0x43	; 67
     1be:	43 e0       	ldi	r20, 0x03	; 3
     1c0:	0e 94 f1 06 	call	0xde2	; 0xde2 <SPI_MasterTransmitchar>
     1c4:	80 93 76 00 	sts	0x0076, r24
	 DIO_write(control_ss_pin,1);//deselect slave
     1c8:	83 e4       	ldi	r24, 0x43	; 67
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	63 e0       	ldi	r22, 0x03	; 3
     1ce:	70 e0       	ldi	r23, 0x00	; 0
     1d0:	41 e0       	ldi	r20, 0x01	; 1
     1d2:	50 e0       	ldi	r21, 0x00	; 0
     1d4:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
}
     1d8:	08 95       	ret

000001da <Send_Room>:
void Send_Room()
{
	 DIO_write(room_int_pin,HIGH);
     1da:	83 e4       	ldi	r24, 0x43	; 67
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	60 e0       	ldi	r22, 0x00	; 0
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	41 e0       	ldi	r20, 0x01	; 1
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
     1ea:	8f e6       	ldi	r24, 0x6F	; 111
     1ec:	97 e1       	ldi	r25, 0x17	; 23
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <Send_Room+0x14>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <Send_Room+0x1a>
     1f4:	00 00       	nop
	 _delay_ms(INT_signal_time);
	 DIO_write(room_int_pin,LOW);
     1f6:	83 e4       	ldi	r24, 0x43	; 67
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	40 e0       	ldi	r20, 0x00	; 0
     200:	50 e0       	ldi	r21, 0x00	; 0
     202:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
	 SPI_MasterTransmitchar(data_room,room_ss_pin);
     206:	80 91 78 00 	lds	r24, 0x0078
     20a:	63 e4       	ldi	r22, 0x43	; 67
     20c:	41 e0       	ldi	r20, 0x01	; 1
     20e:	0e 94 f1 06 	call	0xde2	; 0xde2 <SPI_MasterTransmitchar>
	 DIO_write(room_int_pin,HIGH);
     212:	83 e4       	ldi	r24, 0x43	; 67
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	70 e0       	ldi	r23, 0x00	; 0
     21a:	41 e0       	ldi	r20, 0x01	; 1
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
     222:	8f e6       	ldi	r24, 0x6F	; 111
     224:	97 e1       	ldi	r25, 0x17	; 23
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <Send_Room+0x4c>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <Send_Room+0x52>
     22c:	00 00       	nop
	 _delay_ms(INT_signal_time);
	 DIO_write(room_int_pin,LOW);
     22e:	83 e4       	ldi	r24, 0x43	; 67
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	40 e0       	ldi	r20, 0x00	; 0
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
	 SPI_MasterTransmitchar(data_room,room_ss_pin);
     23e:	80 91 78 00 	lds	r24, 0x0078
     242:	63 e4       	ldi	r22, 0x43	; 67
     244:	41 e0       	ldi	r20, 0x01	; 1
     246:	0e 94 f1 06 	call	0xde2	; 0xde2 <SPI_MasterTransmitchar>
	 DIO_write(room_ss_pin,1);//deselect slave
     24a:	83 e4       	ldi	r24, 0x43	; 67
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	61 e0       	ldi	r22, 0x01	; 1
     250:	70 e0       	ldi	r23, 0x00	; 0
     252:	41 e0       	ldi	r20, 0x01	; 1
     254:	50 e0       	ldi	r21, 0x00	; 0
     256:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
}
     25a:	08 95       	ret

0000025c <Send_display>:
{
	//DIO_write(display_int_pin,HIGH);
	//_delay_ms(INT_signal_time);
	//DIO_write(display_int_pin,LOW);
	//SPI_MasterTransmitchar(data_room,display_ss_pin);
	DIO_write(display_int_pin,HIGH);
     25c:	83 e4       	ldi	r24, 0x43	; 67
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	64 e0       	ldi	r22, 0x04	; 4
     262:	70 e0       	ldi	r23, 0x00	; 0
     264:	41 e0       	ldi	r20, 0x01	; 1
     266:	50 e0       	ldi	r21, 0x00	; 0
     268:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
     26c:	8f e6       	ldi	r24, 0x6F	; 111
     26e:	97 e1       	ldi	r25, 0x17	; 23
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <Send_display+0x14>
     274:	00 c0       	rjmp	.+0      	; 0x276 <Send_display+0x1a>
     276:	00 00       	nop
	_delay_ms(INT_signal_time);
	DIO_write(display_int_pin,LOW);
     278:	83 e4       	ldi	r24, 0x43	; 67
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	64 e0       	ldi	r22, 0x04	; 4
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	40 e0       	ldi	r20, 0x00	; 0
     282:	50 e0       	ldi	r21, 0x00	; 0
     284:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
	UART_vSendData(data_room);
     288:	80 91 78 00 	lds	r24, 0x0078
     28c:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_vSendData>
	SPI_MasterTransmitchar(hours,display_ss_pin);
     290:	80 91 77 00 	lds	r24, 0x0077
     294:	63 e4       	ldi	r22, 0x43	; 67
     296:	45 e0       	ldi	r20, 0x05	; 5
     298:	0e 94 f1 06 	call	0xde2	; 0xde2 <SPI_MasterTransmitchar>
	DIO_write(display_int_pin,HIGH);
     29c:	83 e4       	ldi	r24, 0x43	; 67
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	64 e0       	ldi	r22, 0x04	; 4
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	41 e0       	ldi	r20, 0x01	; 1
     2a6:	50 e0       	ldi	r21, 0x00	; 0
     2a8:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
     2ac:	8f e6       	ldi	r24, 0x6F	; 111
     2ae:	97 e1       	ldi	r25, 0x17	; 23
     2b0:	01 97       	sbiw	r24, 0x01	; 1
     2b2:	f1 f7       	brne	.-4      	; 0x2b0 <Send_display+0x54>
     2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <Send_display+0x5a>
     2b6:	00 00       	nop
	_delay_ms(INT_signal_time);
	DIO_write(display_int_pin,LOW);
     2b8:	83 e4       	ldi	r24, 0x43	; 67
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	64 e0       	ldi	r22, 0x04	; 4
     2be:	70 e0       	ldi	r23, 0x00	; 0
     2c0:	40 e0       	ldi	r20, 0x00	; 0
     2c2:	50 e0       	ldi	r21, 0x00	; 0
     2c4:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
	UART_vSendData(data_room);
     2c8:	80 91 78 00 	lds	r24, 0x0078
     2cc:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_vSendData>
	SPI_MasterTransmitchar(minutes,display_ss_pin);
     2d0:	80 91 75 00 	lds	r24, 0x0075
     2d4:	63 e4       	ldi	r22, 0x43	; 67
     2d6:	45 e0       	ldi	r20, 0x05	; 5
     2d8:	0e 94 f1 06 	call	0xde2	; 0xde2 <SPI_MasterTransmitchar>
	DIO_write(display_int_pin,HIGH);
     2dc:	83 e4       	ldi	r24, 0x43	; 67
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	64 e0       	ldi	r22, 0x04	; 4
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	41 e0       	ldi	r20, 0x01	; 1
     2e6:	50 e0       	ldi	r21, 0x00	; 0
     2e8:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
     2ec:	8f e6       	ldi	r24, 0x6F	; 111
     2ee:	97 e1       	ldi	r25, 0x17	; 23
     2f0:	01 97       	sbiw	r24, 0x01	; 1
     2f2:	f1 f7       	brne	.-4      	; 0x2f0 <Send_display+0x94>
     2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <Send_display+0x9a>
     2f6:	00 00       	nop
	_delay_ms(INT_signal_time);
	DIO_write(display_int_pin,LOW);
     2f8:	83 e4       	ldi	r24, 0x43	; 67
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	64 e0       	ldi	r22, 0x04	; 4
     2fe:	70 e0       	ldi	r23, 0x00	; 0
     300:	40 e0       	ldi	r20, 0x00	; 0
     302:	50 e0       	ldi	r21, 0x00	; 0
     304:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
	UART_vSendData(data_room);
     308:	80 91 78 00 	lds	r24, 0x0078
     30c:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_vSendData>
	SPI_MasterTransmitchar(seconds,display_ss_pin);
     310:	80 91 76 00 	lds	r24, 0x0076
     314:	63 e4       	ldi	r22, 0x43	; 67
     316:	45 e0       	ldi	r20, 0x05	; 5
     318:	0e 94 f1 06 	call	0xde2	; 0xde2 <SPI_MasterTransmitchar>
	DIO_write(display_ss_pin,1);//deselect slave
     31c:	83 e4       	ldi	r24, 0x43	; 67
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	65 e0       	ldi	r22, 0x05	; 5
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	41 e0       	ldi	r20, 0x01	; 1
     326:	50 e0       	ldi	r21, 0x00	; 0
     328:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
}
     32c:	08 95       	ret

0000032e <Send_Garage>:
void Send_Garage()
{
	DIO_write(garage_int_pin,HIGH);
     32e:	83 e4       	ldi	r24, 0x43	; 67
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	66 e0       	ldi	r22, 0x06	; 6
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	41 e0       	ldi	r20, 0x01	; 1
     338:	50 e0       	ldi	r21, 0x00	; 0
     33a:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
     33e:	8f e6       	ldi	r24, 0x6F	; 111
     340:	97 e1       	ldi	r25, 0x17	; 23
     342:	01 97       	sbiw	r24, 0x01	; 1
     344:	f1 f7       	brne	.-4      	; 0x342 <Send_Garage+0x14>
     346:	00 c0       	rjmp	.+0      	; 0x348 <Send_Garage+0x1a>
     348:	00 00       	nop
	_delay_ms(INT_signal_time);
	DIO_write(garage_int_pin,LOW);
     34a:	83 e4       	ldi	r24, 0x43	; 67
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	66 e0       	ldi	r22, 0x06	; 6
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	40 e0       	ldi	r20, 0x00	; 0
     354:	50 e0       	ldi	r21, 0x00	; 0
     356:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
	SPI_MasterTransmitchar(guest_flag,garage_ss_pin);
     35a:	80 91 70 00 	lds	r24, 0x0070
     35e:	63 e4       	ldi	r22, 0x43	; 67
     360:	47 e0       	ldi	r20, 0x07	; 7
     362:	0e 94 f1 06 	call	0xde2	; 0xde2 <SPI_MasterTransmitchar>
	DIO_write(garage_ss_pin,1);//deselect slave
     366:	83 e4       	ldi	r24, 0x43	; 67
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	67 e0       	ldi	r22, 0x07	; 7
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	41 e0       	ldi	r20, 0x01	; 1
     370:	50 e0       	ldi	r21, 0x00	; 0
     372:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
}
     376:	08 95       	ret

00000378 <main>:
int main(void)
{
	SPI_MasterInit();
     378:	0e 94 be 06 	call	0xd7c	; 0xd7c <SPI_MasterInit>
	UART_vInit(9600);
     37c:	60 e8       	ldi	r22, 0x80	; 128
     37e:	75 e2       	ldi	r23, 0x25	; 37
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	0e 94 a9 07 	call	0xf52	; 0xf52 <UART_vInit>
	DIO_vsetPINDir(room_int_pin,OUTPUT);
     388:	83 e4       	ldi	r24, 0x43	; 67
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	41 e0       	ldi	r20, 0x01	; 1
     392:	50 e0       	ldi	r21, 0x00	; 0
     394:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir(room_ss_pin,OUTPUT);
     398:	83 e4       	ldi	r24, 0x43	; 67
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	61 e0       	ldi	r22, 0x01	; 1
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	41 e0       	ldi	r20, 0x01	; 1
     3a2:	50 e0       	ldi	r21, 0x00	; 0
     3a4:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir(control_int_pin,OUTPUT);
     3a8:	83 e4       	ldi	r24, 0x43	; 67
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	62 e0       	ldi	r22, 0x02	; 2
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	41 e0       	ldi	r20, 0x01	; 1
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir(control_ss_pin,OUTPUT);
     3b8:	83 e4       	ldi	r24, 0x43	; 67
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	63 e0       	ldi	r22, 0x03	; 3
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	41 e0       	ldi	r20, 0x01	; 1
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir(display_ss_pin,OUTPUT);
     3c8:	83 e4       	ldi	r24, 0x43	; 67
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	65 e0       	ldi	r22, 0x05	; 5
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	41 e0       	ldi	r20, 0x01	; 1
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir(display_int_pin,OUTPUT);
     3d8:	83 e4       	ldi	r24, 0x43	; 67
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	64 e0       	ldi	r22, 0x04	; 4
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	41 e0       	ldi	r20, 0x01	; 1
     3e2:	50 e0       	ldi	r21, 0x00	; 0
     3e4:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir(garage_ss_pin,OUTPUT);
     3e8:	83 e4       	ldi	r24, 0x43	; 67
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	67 e0       	ldi	r22, 0x07	; 7
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	41 e0       	ldi	r20, 0x01	; 1
     3f2:	50 e0       	ldi	r21, 0x00	; 0
     3f4:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir(garage_int_pin,OUTPUT);
     3f8:	83 e4       	ldi	r24, 0x43	; 67
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	66 e0       	ldi	r22, 0x06	; 6
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	41 e0       	ldi	r20, 0x01	; 1
     402:	50 e0       	ldi	r21, 0x00	; 0
     404:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
    while(1)
    {
		Recieve_Control();
     408:	0e 94 53 00 	call	0xa6	; 0xa6 <Recieve_Control>
     40c:	8f ef       	ldi	r24, 0xFF	; 255
     40e:	90 e7       	ldi	r25, 0x70	; 112
     410:	a2 e0       	ldi	r26, 0x02	; 2
     412:	81 50       	subi	r24, 0x01	; 1
     414:	90 40       	sbci	r25, 0x00	; 0
     416:	a0 40       	sbci	r26, 0x00	; 0
     418:	e1 f7       	brne	.-8      	; 0x412 <main+0x9a>
     41a:	00 c0       	rjmp	.+0      	; 0x41c <main+0xa4>
     41c:	00 00       	nop
	   _delay_ms(SPI_delay);
		 Send_Room();
     41e:	0e 94 ed 00 	call	0x1da	; 0x1da <Send_Room>
     422:	8f ef       	ldi	r24, 0xFF	; 255
     424:	90 e7       	ldi	r25, 0x70	; 112
     426:	a2 e0       	ldi	r26, 0x02	; 2
     428:	81 50       	subi	r24, 0x01	; 1
     42a:	90 40       	sbci	r25, 0x00	; 0
     42c:	a0 40       	sbci	r26, 0x00	; 0
     42e:	e1 f7       	brne	.-8      	; 0x428 <main+0xb0>
     430:	00 c0       	rjmp	.+0      	; 0x432 <main+0xba>
     432:	00 00       	nop
		_delay_ms(SPI_delay);
		Send_display();
     434:	0e 94 2e 01 	call	0x25c	; 0x25c <Send_display>
     438:	8f ef       	ldi	r24, 0xFF	; 255
     43a:	90 e7       	ldi	r25, 0x70	; 112
     43c:	a2 e0       	ldi	r26, 0x02	; 2
     43e:	81 50       	subi	r24, 0x01	; 1
     440:	90 40       	sbci	r25, 0x00	; 0
     442:	a0 40       	sbci	r26, 0x00	; 0
     444:	e1 f7       	brne	.-8      	; 0x43e <main+0xc6>
     446:	00 c0       	rjmp	.+0      	; 0x448 <main+0xd0>
     448:	00 00       	nop
		_delay_ms(SPI_delay);
		Send_Garage();
     44a:	0e 94 97 01 	call	0x32e	; 0x32e <Send_Garage>
     44e:	8f ef       	ldi	r24, 0xFF	; 255
     450:	90 e7       	ldi	r25, 0x70	; 112
     452:	a2 e0       	ldi	r26, 0x02	; 2
     454:	81 50       	subi	r24, 0x01	; 1
     456:	90 40       	sbci	r25, 0x00	; 0
     458:	a0 40       	sbci	r26, 0x00	; 0
     45a:	e1 f7       	brne	.-8      	; 0x454 <main+0xdc>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <main+0xe6>
     45e:	00 00       	nop
     460:	d3 cf       	rjmp	.-90     	; 0x408 <main+0x90>

00000462 <DIO_vsetPINDir>:
#include <avr/io.h>
#include "std_macros.h"

void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber, unsigned char direction)
{
	switch (portname)
     462:	84 34       	cpi	r24, 0x44	; 68
     464:	09 f4       	brne	.+2      	; 0x468 <DIO_vsetPINDir+0x6>
     466:	71 c0       	rjmp	.+226    	; 0x54a <DIO_vsetPINDir+0xe8>
     468:	85 34       	cpi	r24, 0x45	; 69
     46a:	48 f4       	brcc	.+18     	; 0x47e <DIO_vsetPINDir+0x1c>
     46c:	82 34       	cpi	r24, 0x42	; 66
     46e:	99 f1       	breq	.+102    	; 0x4d6 <DIO_vsetPINDir+0x74>
     470:	83 34       	cpi	r24, 0x43	; 67
     472:	08 f0       	brcs	.+2      	; 0x476 <DIO_vsetPINDir+0x14>
     474:	4d c0       	rjmp	.+154    	; 0x510 <DIO_vsetPINDir+0xae>
     476:	81 34       	cpi	r24, 0x41	; 65
     478:	09 f0       	breq	.+2      	; 0x47c <DIO_vsetPINDir+0x1a>
     47a:	83 c0       	rjmp	.+262    	; 0x582 <DIO_vsetPINDir+0x120>
     47c:	0f c0       	rjmp	.+30     	; 0x49c <DIO_vsetPINDir+0x3a>
     47e:	82 36       	cpi	r24, 0x62	; 98
     480:	51 f1       	breq	.+84     	; 0x4d6 <DIO_vsetPINDir+0x74>
     482:	83 36       	cpi	r24, 0x63	; 99
     484:	20 f4       	brcc	.+8      	; 0x48e <DIO_vsetPINDir+0x2c>
     486:	81 36       	cpi	r24, 0x61	; 97
     488:	09 f0       	breq	.+2      	; 0x48c <DIO_vsetPINDir+0x2a>
     48a:	7b c0       	rjmp	.+246    	; 0x582 <DIO_vsetPINDir+0x120>
     48c:	07 c0       	rjmp	.+14     	; 0x49c <DIO_vsetPINDir+0x3a>
     48e:	83 36       	cpi	r24, 0x63	; 99
     490:	09 f4       	brne	.+2      	; 0x494 <DIO_vsetPINDir+0x32>
     492:	3e c0       	rjmp	.+124    	; 0x510 <DIO_vsetPINDir+0xae>
     494:	84 36       	cpi	r24, 0x64	; 100
     496:	09 f0       	breq	.+2      	; 0x49a <DIO_vsetPINDir+0x38>
     498:	74 c0       	rjmp	.+232    	; 0x582 <DIO_vsetPINDir+0x120>
     49a:	57 c0       	rjmp	.+174    	; 0x54a <DIO_vsetPINDir+0xe8>
	{
		case'A':
		case 'a':
		if(direction==1)
     49c:	41 30       	cpi	r20, 0x01	; 1
     49e:	69 f4       	brne	.+26     	; 0x4ba <DIO_vsetPINDir+0x58>
		{
			SET_BIT(DDRA,pinnumber);
     4a0:	2a b3       	in	r18, 0x1a	; 26
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	ac 01       	movw	r20, r24
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <DIO_vsetPINDir+0x4c>
     4aa:	44 0f       	add	r20, r20
     4ac:	55 1f       	adc	r21, r21
     4ae:	6a 95       	dec	r22
     4b0:	e2 f7       	brpl	.-8      	; 0x4aa <DIO_vsetPINDir+0x48>
     4b2:	ba 01       	movw	r22, r20
     4b4:	62 2b       	or	r22, r18
     4b6:	6a bb       	out	0x1a, r22	; 26
     4b8:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);
     4ba:	2a b3       	in	r18, 0x1a	; 26
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	ac 01       	movw	r20, r24
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_vsetPINDir+0x66>
     4c4:	44 0f       	add	r20, r20
     4c6:	55 1f       	adc	r21, r21
     4c8:	6a 95       	dec	r22
     4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_vsetPINDir+0x62>
     4cc:	ba 01       	movw	r22, r20
     4ce:	60 95       	com	r22
     4d0:	62 23       	and	r22, r18
     4d2:	6a bb       	out	0x1a, r22	; 26
     4d4:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(direction==1)
     4d6:	41 30       	cpi	r20, 0x01	; 1
     4d8:	69 f4       	brne	.+26     	; 0x4f4 <DIO_vsetPINDir+0x92>
		{
			SET_BIT(DDRB,pinnumber);
     4da:	27 b3       	in	r18, 0x17	; 23
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	ac 01       	movw	r20, r24
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_vsetPINDir+0x86>
     4e4:	44 0f       	add	r20, r20
     4e6:	55 1f       	adc	r21, r21
     4e8:	6a 95       	dec	r22
     4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_vsetPINDir+0x82>
     4ec:	ba 01       	movw	r22, r20
     4ee:	62 2b       	or	r22, r18
     4f0:	67 bb       	out	0x17, r22	; 23
     4f2:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);
     4f4:	27 b3       	in	r18, 0x17	; 23
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	ac 01       	movw	r20, r24
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_vsetPINDir+0xa0>
     4fe:	44 0f       	add	r20, r20
     500:	55 1f       	adc	r21, r21
     502:	6a 95       	dec	r22
     504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_vsetPINDir+0x9c>
     506:	ba 01       	movw	r22, r20
     508:	60 95       	com	r22
     50a:	62 23       	and	r22, r18
     50c:	67 bb       	out	0x17, r22	; 23
     50e:	08 95       	ret
		}
		break;
		case'C':
		case'c':
		if(direction==1)
     510:	41 30       	cpi	r20, 0x01	; 1
     512:	69 f4       	brne	.+26     	; 0x52e <DIO_vsetPINDir+0xcc>
		{
			SET_BIT(DDRC,pinnumber);
     514:	24 b3       	in	r18, 0x14	; 20
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	ac 01       	movw	r20, r24
     51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_vsetPINDir+0xc0>
     51e:	44 0f       	add	r20, r20
     520:	55 1f       	adc	r21, r21
     522:	6a 95       	dec	r22
     524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_vsetPINDir+0xbc>
     526:	ba 01       	movw	r22, r20
     528:	62 2b       	or	r22, r18
     52a:	64 bb       	out	0x14, r22	; 20
     52c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);
     52e:	24 b3       	in	r18, 0x14	; 20
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	ac 01       	movw	r20, r24
     536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_vsetPINDir+0xda>
     538:	44 0f       	add	r20, r20
     53a:	55 1f       	adc	r21, r21
     53c:	6a 95       	dec	r22
     53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_vsetPINDir+0xd6>
     540:	ba 01       	movw	r22, r20
     542:	60 95       	com	r22
     544:	62 23       	and	r22, r18
     546:	64 bb       	out	0x14, r22	; 20
     548:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(direction==1)
     54a:	41 30       	cpi	r20, 0x01	; 1
     54c:	69 f4       	brne	.+26     	; 0x568 <DIO_vsetPINDir+0x106>
		{
			SET_BIT(DDRD,pinnumber);
     54e:	21 b3       	in	r18, 0x11	; 17
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	ac 01       	movw	r20, r24
     556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_vsetPINDir+0xfa>
     558:	44 0f       	add	r20, r20
     55a:	55 1f       	adc	r21, r21
     55c:	6a 95       	dec	r22
     55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_vsetPINDir+0xf6>
     560:	ba 01       	movw	r22, r20
     562:	62 2b       	or	r22, r18
     564:	61 bb       	out	0x11, r22	; 17
     566:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);
     568:	21 b3       	in	r18, 0x11	; 17
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	ac 01       	movw	r20, r24
     570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_vsetPINDir+0x114>
     572:	44 0f       	add	r20, r20
     574:	55 1f       	adc	r21, r21
     576:	6a 95       	dec	r22
     578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_vsetPINDir+0x110>
     57a:	ba 01       	movw	r22, r20
     57c:	60 95       	com	r22
     57e:	62 23       	and	r22, r18
     580:	61 bb       	out	0x11, r22	; 17
     582:	08 95       	ret

00000584 <DIO_write>:
}

void DIO_write(unsigned char portname, unsigned char pinnumber, unsigned char output)
{

	switch (portname)
     584:	84 34       	cpi	r24, 0x44	; 68
     586:	09 f4       	brne	.+2      	; 0x58a <DIO_write+0x6>
     588:	71 c0       	rjmp	.+226    	; 0x66c <DIO_write+0xe8>
     58a:	85 34       	cpi	r24, 0x45	; 69
     58c:	48 f4       	brcc	.+18     	; 0x5a0 <DIO_write+0x1c>
     58e:	82 34       	cpi	r24, 0x42	; 66
     590:	99 f1       	breq	.+102    	; 0x5f8 <DIO_write+0x74>
     592:	83 34       	cpi	r24, 0x43	; 67
     594:	08 f0       	brcs	.+2      	; 0x598 <DIO_write+0x14>
     596:	4d c0       	rjmp	.+154    	; 0x632 <DIO_write+0xae>
     598:	81 34       	cpi	r24, 0x41	; 65
     59a:	09 f0       	breq	.+2      	; 0x59e <DIO_write+0x1a>
     59c:	83 c0       	rjmp	.+262    	; 0x6a4 <DIO_write+0x120>
     59e:	0f c0       	rjmp	.+30     	; 0x5be <DIO_write+0x3a>
     5a0:	82 36       	cpi	r24, 0x62	; 98
     5a2:	51 f1       	breq	.+84     	; 0x5f8 <DIO_write+0x74>
     5a4:	83 36       	cpi	r24, 0x63	; 99
     5a6:	20 f4       	brcc	.+8      	; 0x5b0 <DIO_write+0x2c>
     5a8:	81 36       	cpi	r24, 0x61	; 97
     5aa:	09 f0       	breq	.+2      	; 0x5ae <DIO_write+0x2a>
     5ac:	7b c0       	rjmp	.+246    	; 0x6a4 <DIO_write+0x120>
     5ae:	07 c0       	rjmp	.+14     	; 0x5be <DIO_write+0x3a>
     5b0:	83 36       	cpi	r24, 0x63	; 99
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <DIO_write+0x32>
     5b4:	3e c0       	rjmp	.+124    	; 0x632 <DIO_write+0xae>
     5b6:	84 36       	cpi	r24, 0x64	; 100
     5b8:	09 f0       	breq	.+2      	; 0x5bc <DIO_write+0x38>
     5ba:	74 c0       	rjmp	.+232    	; 0x6a4 <DIO_write+0x120>
     5bc:	57 c0       	rjmp	.+174    	; 0x66c <DIO_write+0xe8>
	{
		case'A':
		case 'a':
		if(output==1)
     5be:	41 30       	cpi	r20, 0x01	; 1
     5c0:	69 f4       	brne	.+26     	; 0x5dc <DIO_write+0x58>
		{
			SET_BIT(PORTA,pinnumber);
     5c2:	2b b3       	in	r18, 0x1b	; 27
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	ac 01       	movw	r20, r24
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <DIO_write+0x4c>
     5cc:	44 0f       	add	r20, r20
     5ce:	55 1f       	adc	r21, r21
     5d0:	6a 95       	dec	r22
     5d2:	e2 f7       	brpl	.-8      	; 0x5cc <DIO_write+0x48>
     5d4:	ba 01       	movw	r22, r20
     5d6:	62 2b       	or	r22, r18
     5d8:	6b bb       	out	0x1b, r22	; 27
     5da:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
     5dc:	2b b3       	in	r18, 0x1b	; 27
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	ac 01       	movw	r20, r24
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_write+0x66>
     5e6:	44 0f       	add	r20, r20
     5e8:	55 1f       	adc	r21, r21
     5ea:	6a 95       	dec	r22
     5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <DIO_write+0x62>
     5ee:	ba 01       	movw	r22, r20
     5f0:	60 95       	com	r22
     5f2:	62 23       	and	r22, r18
     5f4:	6b bb       	out	0x1b, r22	; 27
     5f6:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(output==1)
     5f8:	41 30       	cpi	r20, 0x01	; 1
     5fa:	69 f4       	brne	.+26     	; 0x616 <DIO_write+0x92>
		{
			SET_BIT(PORTB,pinnumber);
     5fc:	28 b3       	in	r18, 0x18	; 24
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	ac 01       	movw	r20, r24
     604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_write+0x86>
     606:	44 0f       	add	r20, r20
     608:	55 1f       	adc	r21, r21
     60a:	6a 95       	dec	r22
     60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_write+0x82>
     60e:	ba 01       	movw	r22, r20
     610:	62 2b       	or	r22, r18
     612:	68 bb       	out	0x18, r22	; 24
     614:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
     616:	28 b3       	in	r18, 0x18	; 24
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	ac 01       	movw	r20, r24
     61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_write+0xa0>
     620:	44 0f       	add	r20, r20
     622:	55 1f       	adc	r21, r21
     624:	6a 95       	dec	r22
     626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_write+0x9c>
     628:	ba 01       	movw	r22, r20
     62a:	60 95       	com	r22
     62c:	62 23       	and	r22, r18
     62e:	68 bb       	out	0x18, r22	; 24
     630:	08 95       	ret
		}
		break;
		case'C':
		case'c':
		if(output==1)
     632:	41 30       	cpi	r20, 0x01	; 1
     634:	69 f4       	brne	.+26     	; 0x650 <DIO_write+0xcc>
		{
			SET_BIT(PORTC,pinnumber);
     636:	25 b3       	in	r18, 0x15	; 21
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	ac 01       	movw	r20, r24
     63e:	02 c0       	rjmp	.+4      	; 0x644 <DIO_write+0xc0>
     640:	44 0f       	add	r20, r20
     642:	55 1f       	adc	r21, r21
     644:	6a 95       	dec	r22
     646:	e2 f7       	brpl	.-8      	; 0x640 <DIO_write+0xbc>
     648:	ba 01       	movw	r22, r20
     64a:	62 2b       	or	r22, r18
     64c:	65 bb       	out	0x15, r22	; 21
     64e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
     650:	25 b3       	in	r18, 0x15	; 21
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	ac 01       	movw	r20, r24
     658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_write+0xda>
     65a:	44 0f       	add	r20, r20
     65c:	55 1f       	adc	r21, r21
     65e:	6a 95       	dec	r22
     660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_write+0xd6>
     662:	ba 01       	movw	r22, r20
     664:	60 95       	com	r22
     666:	62 23       	and	r22, r18
     668:	65 bb       	out	0x15, r22	; 21
     66a:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(output==1)
     66c:	41 30       	cpi	r20, 0x01	; 1
     66e:	69 f4       	brne	.+26     	; 0x68a <DIO_write+0x106>
		{
			SET_BIT(PORTD,pinnumber);
     670:	22 b3       	in	r18, 0x12	; 18
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	ac 01       	movw	r20, r24
     678:	02 c0       	rjmp	.+4      	; 0x67e <DIO_write+0xfa>
     67a:	44 0f       	add	r20, r20
     67c:	55 1f       	adc	r21, r21
     67e:	6a 95       	dec	r22
     680:	e2 f7       	brpl	.-8      	; 0x67a <DIO_write+0xf6>
     682:	ba 01       	movw	r22, r20
     684:	62 2b       	or	r22, r18
     686:	62 bb       	out	0x12, r22	; 18
     688:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
     68a:	22 b3       	in	r18, 0x12	; 18
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	ac 01       	movw	r20, r24
     692:	02 c0       	rjmp	.+4      	; 0x698 <DIO_write+0x114>
     694:	44 0f       	add	r20, r20
     696:	55 1f       	adc	r21, r21
     698:	6a 95       	dec	r22
     69a:	e2 f7       	brpl	.-8      	; 0x694 <DIO_write+0x110>
     69c:	ba 01       	movw	r22, r20
     69e:	60 95       	com	r22
     6a0:	62 23       	and	r22, r18
     6a2:	62 bb       	out	0x12, r22	; 18
     6a4:	08 95       	ret

000006a6 <DIO_u8read>:
	}
}
unsigned char DIO_u8read(unsigned char portname, unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch (portname)
     6a6:	84 34       	cpi	r24, 0x44	; 68
     6a8:	09 f4       	brne	.+2      	; 0x6ac <DIO_u8read+0x6>
     6aa:	4e c0       	rjmp	.+156    	; 0x748 <DIO_u8read+0xa2>
     6ac:	85 34       	cpi	r24, 0x45	; 69
     6ae:	40 f4       	brcc	.+16     	; 0x6c0 <DIO_u8read+0x1a>
     6b0:	82 34       	cpi	r24, 0x42	; 66
     6b2:	31 f1       	breq	.+76     	; 0x700 <DIO_u8read+0x5a>
     6b4:	83 34       	cpi	r24, 0x43	; 67
     6b6:	b0 f5       	brcc	.+108    	; 0x724 <DIO_u8read+0x7e>
     6b8:	81 34       	cpi	r24, 0x41	; 65
     6ba:	09 f0       	breq	.+2      	; 0x6be <DIO_u8read+0x18>
     6bc:	57 c0       	rjmp	.+174    	; 0x76c <DIO_u8read+0xc6>
     6be:	0e c0       	rjmp	.+28     	; 0x6dc <DIO_u8read+0x36>
     6c0:	82 36       	cpi	r24, 0x62	; 98
     6c2:	f1 f0       	breq	.+60     	; 0x700 <DIO_u8read+0x5a>
     6c4:	83 36       	cpi	r24, 0x63	; 99
     6c6:	20 f4       	brcc	.+8      	; 0x6d0 <DIO_u8read+0x2a>
     6c8:	81 36       	cpi	r24, 0x61	; 97
     6ca:	09 f0       	breq	.+2      	; 0x6ce <DIO_u8read+0x28>
     6cc:	4f c0       	rjmp	.+158    	; 0x76c <DIO_u8read+0xc6>
     6ce:	06 c0       	rjmp	.+12     	; 0x6dc <DIO_u8read+0x36>
     6d0:	83 36       	cpi	r24, 0x63	; 99
     6d2:	41 f1       	breq	.+80     	; 0x724 <DIO_u8read+0x7e>
     6d4:	84 36       	cpi	r24, 0x64	; 100
     6d6:	09 f0       	breq	.+2      	; 0x6da <DIO_u8read+0x34>
     6d8:	49 c0       	rjmp	.+146    	; 0x76c <DIO_u8read+0xc6>
     6da:	36 c0       	rjmp	.+108    	; 0x748 <DIO_u8read+0xa2>
	{
		case'A':
		case 'a':
		return_value=READ_BIT(PINA,pinnumber);
     6dc:	29 b3       	in	r18, 0x19	; 25
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	06 2e       	mov	r0, r22
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <DIO_u8read+0x44>
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	0a 94       	dec	r0
     6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <DIO_u8read+0x40>
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	82 23       	and	r24, r18
     6f2:	93 23       	and	r25, r19
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <DIO_u8read+0x54>
     6f6:	95 95       	asr	r25
     6f8:	87 95       	ror	r24
     6fa:	6a 95       	dec	r22
     6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <DIO_u8read+0x50>
		break;
     6fe:	08 95       	ret
		case'B':
		case'b':
		return_value=READ_BIT(PINB,pinnumber);
     700:	26 b3       	in	r18, 0x16	; 22
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	06 2e       	mov	r0, r22
     708:	02 c0       	rjmp	.+4      	; 0x70e <DIO_u8read+0x68>
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	0a 94       	dec	r0
     710:	e2 f7       	brpl	.-8      	; 0x70a <DIO_u8read+0x64>
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	82 23       	and	r24, r18
     716:	93 23       	and	r25, r19
     718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_u8read+0x78>
     71a:	95 95       	asr	r25
     71c:	87 95       	ror	r24
     71e:	6a 95       	dec	r22
     720:	e2 f7       	brpl	.-8      	; 0x71a <DIO_u8read+0x74>
		break;
     722:	08 95       	ret
		case'C':
		case'c':
		return_value=READ_BIT(PINC,pinnumber);
     724:	23 b3       	in	r18, 0x13	; 19
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	06 2e       	mov	r0, r22
     72c:	02 c0       	rjmp	.+4      	; 0x732 <DIO_u8read+0x8c>
     72e:	88 0f       	add	r24, r24
     730:	99 1f       	adc	r25, r25
     732:	0a 94       	dec	r0
     734:	e2 f7       	brpl	.-8      	; 0x72e <DIO_u8read+0x88>
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	82 23       	and	r24, r18
     73a:	93 23       	and	r25, r19
     73c:	02 c0       	rjmp	.+4      	; 0x742 <DIO_u8read+0x9c>
     73e:	95 95       	asr	r25
     740:	87 95       	ror	r24
     742:	6a 95       	dec	r22
     744:	e2 f7       	brpl	.-8      	; 0x73e <DIO_u8read+0x98>
		break;
     746:	08 95       	ret
		case'D':
		case'd':
		return_value=READ_BIT(PIND,pinnumber);
     748:	20 b3       	in	r18, 0x10	; 16
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	06 2e       	mov	r0, r22
     750:	02 c0       	rjmp	.+4      	; 0x756 <DIO_u8read+0xb0>
     752:	88 0f       	add	r24, r24
     754:	99 1f       	adc	r25, r25
     756:	0a 94       	dec	r0
     758:	e2 f7       	brpl	.-8      	; 0x752 <DIO_u8read+0xac>
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	82 23       	and	r24, r18
     75e:	93 23       	and	r25, r19
     760:	02 c0       	rjmp	.+4      	; 0x766 <DIO_u8read+0xc0>
     762:	95 95       	asr	r25
     764:	87 95       	ror	r24
     766:	6a 95       	dec	r22
     768:	e2 f7       	brpl	.-8      	; 0x762 <DIO_u8read+0xbc>
		break;
     76a:	08 95       	ret
		break;
	}
}
unsigned char DIO_u8read(unsigned char portname, unsigned char pinnumber)
{
	unsigned char return_value=0;
     76c:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	return return_value;
}
     76e:	08 95       	ret

00000770 <DIO_toggle>:

void DIO_toggle (unsigned char portname, unsigned char pinnumber)
{
	switch (portname)
     770:	84 34       	cpi	r24, 0x44	; 68
     772:	09 f4       	brne	.+2      	; 0x776 <DIO_toggle+0x6>
     774:	3d c0       	rjmp	.+122    	; 0x7f0 <DIO_toggle+0x80>
     776:	85 34       	cpi	r24, 0x45	; 69
     778:	40 f4       	brcc	.+16     	; 0x78a <DIO_toggle+0x1a>
     77a:	82 34       	cpi	r24, 0x42	; 66
     77c:	f9 f0       	breq	.+62     	; 0x7bc <DIO_toggle+0x4c>
     77e:	83 34       	cpi	r24, 0x43	; 67
     780:	50 f5       	brcc	.+84     	; 0x7d6 <DIO_toggle+0x66>
     782:	81 34       	cpi	r24, 0x41	; 65
     784:	09 f0       	breq	.+2      	; 0x788 <DIO_toggle+0x18>
     786:	40 c0       	rjmp	.+128    	; 0x808 <DIO_toggle+0x98>
     788:	0c c0       	rjmp	.+24     	; 0x7a2 <DIO_toggle+0x32>
     78a:	82 36       	cpi	r24, 0x62	; 98
     78c:	b9 f0       	breq	.+46     	; 0x7bc <DIO_toggle+0x4c>
     78e:	83 36       	cpi	r24, 0x63	; 99
     790:	18 f4       	brcc	.+6      	; 0x798 <DIO_toggle+0x28>
     792:	81 36       	cpi	r24, 0x61	; 97
     794:	c9 f5       	brne	.+114    	; 0x808 <DIO_toggle+0x98>
     796:	05 c0       	rjmp	.+10     	; 0x7a2 <DIO_toggle+0x32>
     798:	83 36       	cpi	r24, 0x63	; 99
     79a:	e9 f0       	breq	.+58     	; 0x7d6 <DIO_toggle+0x66>
     79c:	84 36       	cpi	r24, 0x64	; 100
     79e:	a1 f5       	brne	.+104    	; 0x808 <DIO_toggle+0x98>
     7a0:	27 c0       	rjmp	.+78     	; 0x7f0 <DIO_toggle+0x80>
	{
		case'A':
		case 'a':
		TOG_BIT(PORTA,pinnumber);
     7a2:	2b b3       	in	r18, 0x1b	; 27
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	ac 01       	movw	r20, r24
     7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <DIO_toggle+0x40>
     7ac:	44 0f       	add	r20, r20
     7ae:	55 1f       	adc	r21, r21
     7b0:	6a 95       	dec	r22
     7b2:	e2 f7       	brpl	.-8      	; 0x7ac <DIO_toggle+0x3c>
     7b4:	ba 01       	movw	r22, r20
     7b6:	62 27       	eor	r22, r18
     7b8:	6b bb       	out	0x1b, r22	; 27
		break;
     7ba:	08 95       	ret
		case'B':
		case'b':
		TOG_BIT(PORTB,pinnumber);
     7bc:	28 b3       	in	r18, 0x18	; 24
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	ac 01       	movw	r20, r24
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <DIO_toggle+0x5a>
     7c6:	44 0f       	add	r20, r20
     7c8:	55 1f       	adc	r21, r21
     7ca:	6a 95       	dec	r22
     7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <DIO_toggle+0x56>
     7ce:	ba 01       	movw	r22, r20
     7d0:	62 27       	eor	r22, r18
     7d2:	68 bb       	out	0x18, r22	; 24
		break;
     7d4:	08 95       	ret
		case'C':
		case'c':
		TOG_BIT(PORTC,pinnumber);
     7d6:	25 b3       	in	r18, 0x15	; 21
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	ac 01       	movw	r20, r24
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <DIO_toggle+0x74>
     7e0:	44 0f       	add	r20, r20
     7e2:	55 1f       	adc	r21, r21
     7e4:	6a 95       	dec	r22
     7e6:	e2 f7       	brpl	.-8      	; 0x7e0 <DIO_toggle+0x70>
     7e8:	ba 01       	movw	r22, r20
     7ea:	62 27       	eor	r22, r18
     7ec:	65 bb       	out	0x15, r22	; 21
		break;
     7ee:	08 95       	ret
		case'D':
		case'd':
		TOG_BIT(PORTD,pinnumber);
     7f0:	22 b3       	in	r18, 0x12	; 18
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	ac 01       	movw	r20, r24
     7f8:	02 c0       	rjmp	.+4      	; 0x7fe <DIO_toggle+0x8e>
     7fa:	44 0f       	add	r20, r20
     7fc:	55 1f       	adc	r21, r21
     7fe:	6a 95       	dec	r22
     800:	e2 f7       	brpl	.-8      	; 0x7fa <DIO_toggle+0x8a>
     802:	ba 01       	movw	r22, r20
     804:	62 27       	eor	r22, r18
     806:	62 bb       	out	0x12, r22	; 18
     808:	08 95       	ret

0000080a <DIO_set_port_direction>:
		break;
	}
}
void DIO_set_port_direction(unsigned char portname, unsigned char direction)
{
	switch (portname)
     80a:	84 34       	cpi	r24, 0x44	; 68
     80c:	d9 f0       	breq	.+54     	; 0x844 <DIO_set_port_direction+0x3a>
     80e:	85 34       	cpi	r24, 0x45	; 69
     810:	38 f4       	brcc	.+14     	; 0x820 <DIO_set_port_direction+0x16>
     812:	82 34       	cpi	r24, 0x42	; 66
     814:	99 f0       	breq	.+38     	; 0x83c <DIO_set_port_direction+0x32>
     816:	83 34       	cpi	r24, 0x43	; 67
     818:	98 f4       	brcc	.+38     	; 0x840 <DIO_set_port_direction+0x36>
     81a:	81 34       	cpi	r24, 0x41	; 65
     81c:	a1 f4       	brne	.+40     	; 0x846 <DIO_set_port_direction+0x3c>
     81e:	0c c0       	rjmp	.+24     	; 0x838 <DIO_set_port_direction+0x2e>
     820:	82 36       	cpi	r24, 0x62	; 98
     822:	61 f0       	breq	.+24     	; 0x83c <DIO_set_port_direction+0x32>
     824:	83 36       	cpi	r24, 0x63	; 99
     826:	18 f4       	brcc	.+6      	; 0x82e <DIO_set_port_direction+0x24>
     828:	81 36       	cpi	r24, 0x61	; 97
     82a:	69 f4       	brne	.+26     	; 0x846 <DIO_set_port_direction+0x3c>
     82c:	05 c0       	rjmp	.+10     	; 0x838 <DIO_set_port_direction+0x2e>
     82e:	83 36       	cpi	r24, 0x63	; 99
     830:	39 f0       	breq	.+14     	; 0x840 <DIO_set_port_direction+0x36>
     832:	84 36       	cpi	r24, 0x64	; 100
     834:	41 f4       	brne	.+16     	; 0x846 <DIO_set_port_direction+0x3c>
     836:	06 c0       	rjmp	.+12     	; 0x844 <DIO_set_port_direction+0x3a>
	{
		case'A':
		case 'a':
		DDRA=direction;
     838:	6a bb       	out	0x1a, r22	; 26
		break;
     83a:	08 95       	ret
		case'B':
		case'b':
		DDRB=direction;
     83c:	67 bb       	out	0x17, r22	; 23
		break;
     83e:	08 95       	ret
		case'C':
		case'c':
		DDRC=direction;
     840:	64 bb       	out	0x14, r22	; 20
		break;
     842:	08 95       	ret
		case'D':
		case'd':
		DDRD=direction;
     844:	61 bb       	out	0x11, r22	; 17
     846:	08 95       	ret

00000848 <DIO_write_port>:
		break;
	}
}
void DIO_write_port(unsigned char portname, unsigned char output)
{
	switch (portname)
     848:	84 34       	cpi	r24, 0x44	; 68
     84a:	d9 f0       	breq	.+54     	; 0x882 <__stack+0x23>
     84c:	85 34       	cpi	r24, 0x45	; 69
     84e:	38 f4       	brcc	.+14     	; 0x85e <DIO_write_port+0x16>
     850:	82 34       	cpi	r24, 0x42	; 66
     852:	99 f0       	breq	.+38     	; 0x87a <__stack+0x1b>
     854:	83 34       	cpi	r24, 0x43	; 67
     856:	98 f4       	brcc	.+38     	; 0x87e <__stack+0x1f>
     858:	81 34       	cpi	r24, 0x41	; 65
     85a:	a1 f4       	brne	.+40     	; 0x884 <__stack+0x25>
     85c:	0c c0       	rjmp	.+24     	; 0x876 <__stack+0x17>
     85e:	82 36       	cpi	r24, 0x62	; 98
     860:	61 f0       	breq	.+24     	; 0x87a <__stack+0x1b>
     862:	83 36       	cpi	r24, 0x63	; 99
     864:	18 f4       	brcc	.+6      	; 0x86c <__stack+0xd>
     866:	81 36       	cpi	r24, 0x61	; 97
     868:	69 f4       	brne	.+26     	; 0x884 <__stack+0x25>
     86a:	05 c0       	rjmp	.+10     	; 0x876 <__stack+0x17>
     86c:	83 36       	cpi	r24, 0x63	; 99
     86e:	39 f0       	breq	.+14     	; 0x87e <__stack+0x1f>
     870:	84 36       	cpi	r24, 0x64	; 100
     872:	41 f4       	brne	.+16     	; 0x884 <__stack+0x25>
     874:	06 c0       	rjmp	.+12     	; 0x882 <__stack+0x23>
	{
		case'A':
		case 'a':
		PORTA=output;
     876:	6b bb       	out	0x1b, r22	; 27
		break;
     878:	08 95       	ret
		case'B':
		case'b':
		PORTB=output;
     87a:	68 bb       	out	0x18, r22	; 24
		break;
     87c:	08 95       	ret
		case'C':
		case'c':
		PORTC=output;
     87e:	65 bb       	out	0x15, r22	; 21
		break;
     880:	08 95       	ret
		case'D':
		case'd':
		PORTD=output;
     882:	62 bb       	out	0x12, r22	; 18
     884:	08 95       	ret

00000886 <DIO_read_port>:
	}
}
unsigned char DIO_read_port (unsigned char portname)
{
	unsigned char return_value=0;
	switch (portname)
     886:	84 34       	cpi	r24, 0x44	; 68
     888:	d9 f0       	breq	.+54     	; 0x8c0 <DIO_read_port+0x3a>
     88a:	85 34       	cpi	r24, 0x45	; 69
     88c:	38 f4       	brcc	.+14     	; 0x89c <DIO_read_port+0x16>
     88e:	82 34       	cpi	r24, 0x42	; 66
     890:	99 f0       	breq	.+38     	; 0x8b8 <DIO_read_port+0x32>
     892:	83 34       	cpi	r24, 0x43	; 67
     894:	98 f4       	brcc	.+38     	; 0x8bc <DIO_read_port+0x36>
     896:	81 34       	cpi	r24, 0x41	; 65
     898:	a9 f4       	brne	.+42     	; 0x8c4 <DIO_read_port+0x3e>
     89a:	0c c0       	rjmp	.+24     	; 0x8b4 <DIO_read_port+0x2e>
     89c:	82 36       	cpi	r24, 0x62	; 98
     89e:	61 f0       	breq	.+24     	; 0x8b8 <DIO_read_port+0x32>
     8a0:	83 36       	cpi	r24, 0x63	; 99
     8a2:	18 f4       	brcc	.+6      	; 0x8aa <DIO_read_port+0x24>
     8a4:	81 36       	cpi	r24, 0x61	; 97
     8a6:	71 f4       	brne	.+28     	; 0x8c4 <DIO_read_port+0x3e>
     8a8:	05 c0       	rjmp	.+10     	; 0x8b4 <DIO_read_port+0x2e>
     8aa:	83 36       	cpi	r24, 0x63	; 99
     8ac:	39 f0       	breq	.+14     	; 0x8bc <DIO_read_port+0x36>
     8ae:	84 36       	cpi	r24, 0x64	; 100
     8b0:	49 f4       	brne	.+18     	; 0x8c4 <DIO_read_port+0x3e>
     8b2:	06 c0       	rjmp	.+12     	; 0x8c0 <DIO_read_port+0x3a>
	{
		case'A':
		case 'a':
		return_value=PINA;
     8b4:	89 b3       	in	r24, 0x19	; 25
		break;
     8b6:	08 95       	ret
		case'B':
		case'b':
		return_value=PINB;
     8b8:	86 b3       	in	r24, 0x16	; 22
		break;
     8ba:	08 95       	ret
		case'C':
		case'c':
		return_value=PINC;
     8bc:	83 b3       	in	r24, 0x13	; 19
		break;
     8be:	08 95       	ret
		case'D':
		case'd':
		return_value=PIND;
     8c0:	80 b3       	in	r24, 0x10	; 16
		break;
     8c2:	08 95       	ret
		break;
	}
}
unsigned char DIO_read_port (unsigned char portname)
{
	unsigned char return_value=0;
     8c4:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	return return_value;
}
     8c6:	08 95       	ret

000008c8 <DIO_vconnectpullup>:
void DIO_vconnectpullup(unsigned char portname, unsigned char pinnumber, unsigned char enable)
{
    switch (portname)
     8c8:	84 34       	cpi	r24, 0x44	; 68
     8ca:	09 f4       	brne	.+2      	; 0x8ce <DIO_vconnectpullup+0x6>
     8cc:	71 c0       	rjmp	.+226    	; 0x9b0 <DIO_vconnectpullup+0xe8>
     8ce:	85 34       	cpi	r24, 0x45	; 69
     8d0:	48 f4       	brcc	.+18     	; 0x8e4 <DIO_vconnectpullup+0x1c>
     8d2:	82 34       	cpi	r24, 0x42	; 66
     8d4:	99 f1       	breq	.+102    	; 0x93c <DIO_vconnectpullup+0x74>
     8d6:	83 34       	cpi	r24, 0x43	; 67
     8d8:	08 f0       	brcs	.+2      	; 0x8dc <DIO_vconnectpullup+0x14>
     8da:	4d c0       	rjmp	.+154    	; 0x976 <DIO_vconnectpullup+0xae>
     8dc:	81 34       	cpi	r24, 0x41	; 65
     8de:	09 f0       	breq	.+2      	; 0x8e2 <DIO_vconnectpullup+0x1a>
     8e0:	83 c0       	rjmp	.+262    	; 0x9e8 <DIO_vconnectpullup+0x120>
     8e2:	0f c0       	rjmp	.+30     	; 0x902 <DIO_vconnectpullup+0x3a>
     8e4:	82 36       	cpi	r24, 0x62	; 98
     8e6:	51 f1       	breq	.+84     	; 0x93c <DIO_vconnectpullup+0x74>
     8e8:	83 36       	cpi	r24, 0x63	; 99
     8ea:	20 f4       	brcc	.+8      	; 0x8f4 <DIO_vconnectpullup+0x2c>
     8ec:	81 36       	cpi	r24, 0x61	; 97
     8ee:	09 f0       	breq	.+2      	; 0x8f2 <DIO_vconnectpullup+0x2a>
     8f0:	7b c0       	rjmp	.+246    	; 0x9e8 <DIO_vconnectpullup+0x120>
     8f2:	07 c0       	rjmp	.+14     	; 0x902 <DIO_vconnectpullup+0x3a>
     8f4:	83 36       	cpi	r24, 0x63	; 99
     8f6:	09 f4       	brne	.+2      	; 0x8fa <DIO_vconnectpullup+0x32>
     8f8:	3e c0       	rjmp	.+124    	; 0x976 <DIO_vconnectpullup+0xae>
     8fa:	84 36       	cpi	r24, 0x64	; 100
     8fc:	09 f0       	breq	.+2      	; 0x900 <DIO_vconnectpullup+0x38>
     8fe:	74 c0       	rjmp	.+232    	; 0x9e8 <DIO_vconnectpullup+0x120>
     900:	57 c0       	rjmp	.+174    	; 0x9b0 <DIO_vconnectpullup+0xe8>
	{
		case'A':
		case 'a':
		if(enable==1)
     902:	41 30       	cpi	r20, 0x01	; 1
     904:	69 f4       	brne	.+26     	; 0x920 <DIO_vconnectpullup+0x58>
		{
			SET_BIT(PORTA,pinnumber);
     906:	2b b3       	in	r18, 0x1b	; 27
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	ac 01       	movw	r20, r24
     90e:	02 c0       	rjmp	.+4      	; 0x914 <DIO_vconnectpullup+0x4c>
     910:	44 0f       	add	r20, r20
     912:	55 1f       	adc	r21, r21
     914:	6a 95       	dec	r22
     916:	e2 f7       	brpl	.-8      	; 0x910 <DIO_vconnectpullup+0x48>
     918:	ba 01       	movw	r22, r20
     91a:	62 2b       	or	r22, r18
     91c:	6b bb       	out	0x1b, r22	; 27
     91e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
     920:	2b b3       	in	r18, 0x1b	; 27
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	ac 01       	movw	r20, r24
     928:	02 c0       	rjmp	.+4      	; 0x92e <DIO_vconnectpullup+0x66>
     92a:	44 0f       	add	r20, r20
     92c:	55 1f       	adc	r21, r21
     92e:	6a 95       	dec	r22
     930:	e2 f7       	brpl	.-8      	; 0x92a <DIO_vconnectpullup+0x62>
     932:	ba 01       	movw	r22, r20
     934:	60 95       	com	r22
     936:	62 23       	and	r22, r18
     938:	6b bb       	out	0x1b, r22	; 27
     93a:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(enable==1)
     93c:	41 30       	cpi	r20, 0x01	; 1
     93e:	69 f4       	brne	.+26     	; 0x95a <DIO_vconnectpullup+0x92>
		{
			SET_BIT(PORTB,pinnumber);
     940:	28 b3       	in	r18, 0x18	; 24
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	ac 01       	movw	r20, r24
     948:	02 c0       	rjmp	.+4      	; 0x94e <DIO_vconnectpullup+0x86>
     94a:	44 0f       	add	r20, r20
     94c:	55 1f       	adc	r21, r21
     94e:	6a 95       	dec	r22
     950:	e2 f7       	brpl	.-8      	; 0x94a <DIO_vconnectpullup+0x82>
     952:	ba 01       	movw	r22, r20
     954:	62 2b       	or	r22, r18
     956:	68 bb       	out	0x18, r22	; 24
     958:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
     95a:	28 b3       	in	r18, 0x18	; 24
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	ac 01       	movw	r20, r24
     962:	02 c0       	rjmp	.+4      	; 0x968 <DIO_vconnectpullup+0xa0>
     964:	44 0f       	add	r20, r20
     966:	55 1f       	adc	r21, r21
     968:	6a 95       	dec	r22
     96a:	e2 f7       	brpl	.-8      	; 0x964 <DIO_vconnectpullup+0x9c>
     96c:	ba 01       	movw	r22, r20
     96e:	60 95       	com	r22
     970:	62 23       	and	r22, r18
     972:	68 bb       	out	0x18, r22	; 24
     974:	08 95       	ret
		}
		break;
		case'C':
		case'c':
		if(enable==1)
     976:	41 30       	cpi	r20, 0x01	; 1
     978:	69 f4       	brne	.+26     	; 0x994 <DIO_vconnectpullup+0xcc>
		{
			SET_BIT(PORTC,pinnumber);
     97a:	25 b3       	in	r18, 0x15	; 21
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	ac 01       	movw	r20, r24
     982:	02 c0       	rjmp	.+4      	; 0x988 <DIO_vconnectpullup+0xc0>
     984:	44 0f       	add	r20, r20
     986:	55 1f       	adc	r21, r21
     988:	6a 95       	dec	r22
     98a:	e2 f7       	brpl	.-8      	; 0x984 <DIO_vconnectpullup+0xbc>
     98c:	ba 01       	movw	r22, r20
     98e:	62 2b       	or	r22, r18
     990:	65 bb       	out	0x15, r22	; 21
     992:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
     994:	25 b3       	in	r18, 0x15	; 21
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	ac 01       	movw	r20, r24
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <DIO_vconnectpullup+0xda>
     99e:	44 0f       	add	r20, r20
     9a0:	55 1f       	adc	r21, r21
     9a2:	6a 95       	dec	r22
     9a4:	e2 f7       	brpl	.-8      	; 0x99e <DIO_vconnectpullup+0xd6>
     9a6:	ba 01       	movw	r22, r20
     9a8:	60 95       	com	r22
     9aa:	62 23       	and	r22, r18
     9ac:	65 bb       	out	0x15, r22	; 21
     9ae:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(enable==1)
     9b0:	41 30       	cpi	r20, 0x01	; 1
     9b2:	69 f4       	brne	.+26     	; 0x9ce <DIO_vconnectpullup+0x106>
		{
			SET_BIT(PORTD,pinnumber);
     9b4:	22 b3       	in	r18, 0x12	; 18
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	ac 01       	movw	r20, r24
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <DIO_vconnectpullup+0xfa>
     9be:	44 0f       	add	r20, r20
     9c0:	55 1f       	adc	r21, r21
     9c2:	6a 95       	dec	r22
     9c4:	e2 f7       	brpl	.-8      	; 0x9be <DIO_vconnectpullup+0xf6>
     9c6:	ba 01       	movw	r22, r20
     9c8:	62 2b       	or	r22, r18
     9ca:	62 bb       	out	0x12, r22	; 18
     9cc:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
     9ce:	22 b3       	in	r18, 0x12	; 18
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	ac 01       	movw	r20, r24
     9d6:	02 c0       	rjmp	.+4      	; 0x9dc <DIO_vconnectpullup+0x114>
     9d8:	44 0f       	add	r20, r20
     9da:	55 1f       	adc	r21, r21
     9dc:	6a 95       	dec	r22
     9de:	e2 f7       	brpl	.-8      	; 0x9d8 <DIO_vconnectpullup+0x110>
     9e0:	ba 01       	movw	r22, r20
     9e2:	60 95       	com	r22
     9e4:	62 23       	and	r22, r18
     9e6:	62 bb       	out	0x12, r22	; 18
     9e8:	08 95       	ret

000009ea <DIO_write_low_nibble>:
		break;
	}
}
void DIO_write_low_nibble(unsigned char portname,unsigned char value)
{
	value&=0x0f;
     9ea:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
     9ec:	82 34       	cpi	r24, 0x42	; 66
     9ee:	81 f0       	breq	.+32     	; 0xa10 <DIO_write_low_nibble+0x26>
     9f0:	83 34       	cpi	r24, 0x43	; 67
     9f2:	18 f4       	brcc	.+6      	; 0x9fa <DIO_write_low_nibble+0x10>
     9f4:	81 34       	cpi	r24, 0x41	; 65
     9f6:	f1 f4       	brne	.+60     	; 0xa34 <DIO_write_low_nibble+0x4a>
     9f8:	05 c0       	rjmp	.+10     	; 0xa04 <DIO_write_low_nibble+0x1a>
     9fa:	83 34       	cpi	r24, 0x43	; 67
     9fc:	79 f0       	breq	.+30     	; 0xa1c <DIO_write_low_nibble+0x32>
     9fe:	84 34       	cpi	r24, 0x44	; 68
     a00:	c9 f4       	brne	.+50     	; 0xa34 <DIO_write_low_nibble+0x4a>
     a02:	12 c0       	rjmp	.+36     	; 0xa28 <DIO_write_low_nibble+0x3e>
	{
		case 'A':
		PORTA&=0xf0;
     a04:	8b b3       	in	r24, 0x1b	; 27
     a06:	80 7f       	andi	r24, 0xF0	; 240
     a08:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
     a0a:	8b b3       	in	r24, 0x1b	; 27
     a0c:	86 2b       	or	r24, r22
     a0e:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0xf0;
     a10:	88 b3       	in	r24, 0x18	; 24
     a12:	80 7f       	andi	r24, 0xF0	; 240
     a14:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
     a16:	88 b3       	in	r24, 0x18	; 24
     a18:	86 2b       	or	r24, r22
     a1a:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0xf0;
     a1c:	85 b3       	in	r24, 0x15	; 21
     a1e:	80 7f       	andi	r24, 0xF0	; 240
     a20:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
     a22:	85 b3       	in	r24, 0x15	; 21
     a24:	86 2b       	or	r24, r22
     a26:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0xf0;
     a28:	82 b3       	in	r24, 0x12	; 18
     a2a:	80 7f       	andi	r24, 0xF0	; 240
     a2c:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
     a2e:	82 b3       	in	r24, 0x12	; 18
     a30:	68 2b       	or	r22, r24
     a32:	62 bb       	out	0x12, r22	; 18
     a34:	08 95       	ret

00000a36 <DIO_write_high_nibble>:
	}
}

void DIO_write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
     a36:	62 95       	swap	r22
     a38:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
     a3a:	82 34       	cpi	r24, 0x42	; 66
     a3c:	81 f0       	breq	.+32     	; 0xa5e <DIO_write_high_nibble+0x28>
     a3e:	83 34       	cpi	r24, 0x43	; 67
     a40:	18 f4       	brcc	.+6      	; 0xa48 <DIO_write_high_nibble+0x12>
     a42:	81 34       	cpi	r24, 0x41	; 65
     a44:	f1 f4       	brne	.+60     	; 0xa82 <DIO_write_high_nibble+0x4c>
     a46:	05 c0       	rjmp	.+10     	; 0xa52 <DIO_write_high_nibble+0x1c>
     a48:	83 34       	cpi	r24, 0x43	; 67
     a4a:	79 f0       	breq	.+30     	; 0xa6a <DIO_write_high_nibble+0x34>
     a4c:	84 34       	cpi	r24, 0x44	; 68
     a4e:	c9 f4       	brne	.+50     	; 0xa82 <DIO_write_high_nibble+0x4c>
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <DIO_write_high_nibble+0x40>
	{
		case 'A':
		PORTA&=0x0f;
     a52:	8b b3       	in	r24, 0x1b	; 27
     a54:	8f 70       	andi	r24, 0x0F	; 15
     a56:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
     a58:	8b b3       	in	r24, 0x1b	; 27
     a5a:	86 2b       	or	r24, r22
     a5c:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
     a5e:	88 b3       	in	r24, 0x18	; 24
     a60:	8f 70       	andi	r24, 0x0F	; 15
     a62:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
     a64:	88 b3       	in	r24, 0x18	; 24
     a66:	86 2b       	or	r24, r22
     a68:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
     a6a:	85 b3       	in	r24, 0x15	; 21
     a6c:	8f 70       	andi	r24, 0x0F	; 15
     a6e:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
     a70:	85 b3       	in	r24, 0x15	; 21
     a72:	86 2b       	or	r24, r22
     a74:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
     a76:	82 b3       	in	r24, 0x12	; 18
     a78:	8f 70       	andi	r24, 0x0F	; 15
     a7a:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
     a7c:	82 b3       	in	r24, 0x12	; 18
     a7e:	68 2b       	or	r22, r24
     a80:	62 bb       	out	0x12, r22	; 18
     a82:	08 95       	ret

00000a84 <EEPROM_write>:

#include <avr/io.h>
#include "std_macros.h"
void EEPROM_write(unsigned short address,unsigned char data )
{
	EEAR=address;
     a84:	9f bb       	out	0x1f, r25	; 31
     a86:	8e bb       	out	0x1e, r24	; 30
	EEDR=data;
     a88:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(EECR,EEMWE);
     a8a:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(EECR,EEWE);
     a8c:	e1 9a       	sbi	0x1c, 1	; 28
	while(READ_BIT(EECR,EEWE)==1);
     a8e:	e1 99       	sbic	0x1c, 1	; 28
     a90:	fe cf       	rjmp	.-4      	; 0xa8e <EEPROM_write+0xa>
	
}
     a92:	08 95       	ret

00000a94 <EEPROM_read>:
unsigned char EEPROM_read (unsigned short adress)
{
	EEAR=adress;
     a94:	9f bb       	out	0x1f, r25	; 31
     a96:	8e bb       	out	0x1e, r24	; 30
	SET_BIT(EECR,EERE);
     a98:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
     a9a:	8d b3       	in	r24, 0x1d	; 29
     a9c:	08 95       	ret

00000a9e <keypad_vInit>:
#define NOTPRESSED 0xff
#include "Buttons.h"
#include "DIO.h"
void keypad_vInit()
{
	DIO_vsetPINDir(port,0,1);
     a9e:	84 e4       	ldi	r24, 0x44	; 68
     aa0:	60 e0       	ldi	r22, 0x00	; 0
     aa2:	41 e0       	ldi	r20, 0x01	; 1
     aa4:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir(port,1,1);
     aa8:	84 e4       	ldi	r24, 0x44	; 68
     aaa:	61 e0       	ldi	r22, 0x01	; 1
     aac:	41 e0       	ldi	r20, 0x01	; 1
     aae:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir(port,2,1);
     ab2:	84 e4       	ldi	r24, 0x44	; 68
     ab4:	62 e0       	ldi	r22, 0x02	; 2
     ab6:	41 e0       	ldi	r20, 0x01	; 1
     ab8:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir(port,3,1);
     abc:	84 e4       	ldi	r24, 0x44	; 68
     abe:	63 e0       	ldi	r22, 0x03	; 3
     ac0:	41 e0       	ldi	r20, 0x01	; 1
     ac2:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir(port,4,0);
     ac6:	84 e4       	ldi	r24, 0x44	; 68
     ac8:	64 e0       	ldi	r22, 0x04	; 4
     aca:	40 e0       	ldi	r20, 0x00	; 0
     acc:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir(port,5,0);
     ad0:	84 e4       	ldi	r24, 0x44	; 68
     ad2:	65 e0       	ldi	r22, 0x05	; 5
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir(port,6,0);
     ada:	84 e4       	ldi	r24, 0x44	; 68
     adc:	66 e0       	ldi	r22, 0x06	; 6
     ade:	40 e0       	ldi	r20, 0x00	; 0
     ae0:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir(port,7,0);
     ae4:	84 e4       	ldi	r24, 0x44	; 68
     ae6:	67 e0       	ldi	r22, 0x07	; 7
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vconnectpullup(port,4,1);
     aee:	84 e4       	ldi	r24, 0x44	; 68
     af0:	64 e0       	ldi	r22, 0x04	; 4
     af2:	41 e0       	ldi	r20, 0x01	; 1
     af4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <DIO_vconnectpullup>
	DIO_vconnectpullup(port,5,1);
     af8:	84 e4       	ldi	r24, 0x44	; 68
     afa:	65 e0       	ldi	r22, 0x05	; 5
     afc:	41 e0       	ldi	r20, 0x01	; 1
     afe:	0e 94 64 04 	call	0x8c8	; 0x8c8 <DIO_vconnectpullup>
	DIO_vconnectpullup(port,6,1);
     b02:	84 e4       	ldi	r24, 0x44	; 68
     b04:	66 e0       	ldi	r22, 0x06	; 6
     b06:	41 e0       	ldi	r20, 0x01	; 1
     b08:	0e 94 64 04 	call	0x8c8	; 0x8c8 <DIO_vconnectpullup>
	DIO_vconnectpullup(port,7,1);
     b0c:	84 e4       	ldi	r24, 0x44	; 68
     b0e:	67 e0       	ldi	r22, 0x07	; 7
     b10:	41 e0       	ldi	r20, 0x01	; 1
     b12:	0e 94 64 04 	call	0x8c8	; 0x8c8 <DIO_vconnectpullup>
	
}
     b16:	08 95       	ret

00000b18 <keypad_u8check_press>:
char keypad_u8check_press()
{
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
     b24:	60 97       	sbiw	r28, 0x10	; 16
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	f8 94       	cli
     b2a:	de bf       	out	0x3e, r29	; 62
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	cd bf       	out	0x3d, r28	; 61
	char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
     b30:	de 01       	movw	r26, r28
     b32:	11 96       	adiw	r26, 0x01	; 1
     b34:	e0 e6       	ldi	r30, 0x60	; 96
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	80 e1       	ldi	r24, 0x10	; 16
     b3a:	01 90       	ld	r0, Z+
     b3c:	0d 92       	st	X+, r0
     b3e:	81 50       	subi	r24, 0x01	; 1
     b40:	e1 f7       	brne	.-8      	; 0xb3a <keypad_u8check_press+0x22>
	char row,coloumn,x;
	char returnval=NOTPRESSED;
	for(row=0;row<=3;row++)
     b42:	00 e0       	ldi	r16, 0x00	; 0
	{
		DIO_write_low_nibble(port,0xff);
     b44:	84 e4       	ldi	r24, 0x44	; 68
     b46:	6f ef       	ldi	r22, 0xFF	; 255
     b48:	0e 94 f5 04 	call	0x9ea	; 0x9ea <DIO_write_low_nibble>
		DIO_write(port,row,0);
     b4c:	84 e4       	ldi	r24, 0x44	; 68
     b4e:	60 2f       	mov	r22, r16
     b50:	40 e0       	ldi	r20, 0x00	; 0
     b52:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
		for(coloumn=0;coloumn<=3;coloumn++)
     b56:	10 e0       	ldi	r17, 0x00	; 0
	DIO_vconnectpullup(port,5,1);
	DIO_vconnectpullup(port,6,1);
	DIO_vconnectpullup(port,7,1);
	
}
char keypad_u8check_press()
     b58:	61 2f       	mov	r22, r17
     b5a:	6c 5f       	subi	r22, 0xFC	; 252
	{
		DIO_write_low_nibble(port,0xff);
		DIO_write(port,row,0);
		for(coloumn=0;coloumn<=3;coloumn++)
		{
			x=Button_u8read(port,(coloumn+4));
     b5c:	84 e4       	ldi	r24, 0x44	; 68
     b5e:	0e 94 4d 00 	call	0x9a	; 0x9a <Button_u8read>
			if(x==0)
     b62:	88 23       	and	r24, r24
     b64:	61 f4       	brne	.+24     	; 0xb7e <keypad_u8check_press+0x66>
			{
				returnval=arr[row][coloumn];
     b66:	e0 2f       	mov	r30, r16
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	ee 0f       	add	r30, r30
     b6c:	ff 1f       	adc	r31, r31
     b6e:	ee 0f       	add	r30, r30
     b70:	ff 1f       	adc	r31, r31
     b72:	e1 0f       	add	r30, r17
     b74:	f1 1d       	adc	r31, r1
     b76:	ec 0f       	add	r30, r28
     b78:	fd 1f       	adc	r31, r29
     b7a:	81 81       	ldd	r24, Z+1	; 0x01
     b7c:	04 c0       	rjmp	.+8      	; 0xb86 <keypad_u8check_press+0x6e>
	char returnval=NOTPRESSED;
	for(row=0;row<=3;row++)
	{
		DIO_write_low_nibble(port,0xff);
		DIO_write(port,row,0);
		for(coloumn=0;coloumn<=3;coloumn++)
     b7e:	1f 5f       	subi	r17, 0xFF	; 255
     b80:	14 30       	cpi	r17, 0x04	; 4
     b82:	51 f7       	brne	.-44     	; 0xb58 <keypad_u8check_press+0x40>
     b84:	0b c0       	rjmp	.+22     	; 0xb9c <keypad_u8check_press+0x84>
		}
	}
	return returnval;
	
	
     b86:	60 96       	adiw	r28, 0x10	; 16
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	08 95       	ret
char keypad_u8check_press()
{
	char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	char row,coloumn,x;
	char returnval=NOTPRESSED;
	for(row=0;row<=3;row++)
     b9c:	0f 5f       	subi	r16, 0xFF	; 255
     b9e:	04 30       	cpi	r16, 0x04	; 4
     ba0:	89 f6       	brne	.-94     	; 0xb44 <keypad_u8check_press+0x2c>
     ba2:	8f ef       	ldi	r24, 0xFF	; 255
     ba4:	f0 cf       	rjmp	.-32     	; 0xb86 <keypad_u8check_press+0x6e>

00000ba6 <LCD_Enable>:
	#endif
	_delay_ms(1);
}
void LCD_Enable()
{
	DIO_write(control_port,EN,1);
     ba6:	82 e4       	ldi	r24, 0x42	; 66
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	41 e0       	ldi	r20, 0x01	; 1
     bac:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
     bb0:	8f e9       	ldi	r24, 0x9F	; 159
     bb2:	9f e0       	ldi	r25, 0x0F	; 15
     bb4:	01 97       	sbiw	r24, 0x01	; 1
     bb6:	f1 f7       	brne	.-4      	; 0xbb4 <LCD_Enable+0xe>
     bb8:	00 c0       	rjmp	.+0      	; 0xbba <LCD_Enable+0x14>
     bba:	00 00       	nop
	_delay_ms(2);
	DIO_write(control_port,EN,0);
     bbc:	82 e4       	ldi	r24, 0x42	; 66
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	40 e0       	ldi	r20, 0x00	; 0
     bc2:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
     bc6:	8f e9       	ldi	r24, 0x9F	; 159
     bc8:	9f e0       	ldi	r25, 0x0F	; 15
     bca:	01 97       	sbiw	r24, 0x01	; 1
     bcc:	f1 f7       	brne	.-4      	; 0xbca <LCD_Enable+0x24>
     bce:	00 c0       	rjmp	.+0      	; 0xbd0 <LCD_Enable+0x2a>
     bd0:	00 00       	nop
	_delay_ms(2);
}
     bd2:	08 95       	ret

00000bd4 <LCD_vSend_cmd>:
	LCD_vSend_cmd(ENTRY_MODE);
	_delay_ms(1);
	#endif
}
void LCD_vSend_cmd(char cmd)
{
     bd4:	cf 93       	push	r28
     bd6:	c8 2f       	mov	r28, r24
    #if defined eight_bits_mode
	DIO_write_port(data_port,cmd);
	DIO_write(control_port,RS,0);
	LCD_Enable();
	#elif defined four_bits_mode
		DIO_write_high_nibble(data_port,cmd>>4);
     bd8:	68 2f       	mov	r22, r24
     bda:	62 95       	swap	r22
     bdc:	6f 70       	andi	r22, 0x0F	; 15
     bde:	81 e4       	ldi	r24, 0x41	; 65
     be0:	0e 94 1b 05 	call	0xa36	; 0xa36 <DIO_write_high_nibble>
		DIO_write(control_port,RS,0);
     be4:	82 e4       	ldi	r24, 0x42	; 66
     be6:	62 e0       	ldi	r22, 0x02	; 2
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
		LCD_Enable();
     bee:	0e 94 d3 05 	call	0xba6	; 0xba6 <LCD_Enable>
		DIO_write_high_nibble(data_port,cmd);
     bf2:	81 e4       	ldi	r24, 0x41	; 65
     bf4:	6c 2f       	mov	r22, r28
     bf6:	0e 94 1b 05 	call	0xa36	; 0xa36 <DIO_write_high_nibble>
		DIO_write(control_port,RS,0);
     bfa:	82 e4       	ldi	r24, 0x42	; 66
     bfc:	62 e0       	ldi	r22, 0x02	; 2
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
		LCD_Enable();
     c04:	0e 94 d3 05 	call	0xba6	; 0xba6 <LCD_Enable>
     c08:	8f ec       	ldi	r24, 0xCF	; 207
     c0a:	97 e0       	ldi	r25, 0x07	; 7
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <LCD_vSend_cmd+0x38>
     c10:	00 c0       	rjmp	.+0      	; 0xc12 <LCD_vSend_cmd+0x3e>
     c12:	00 00       	nop
	#endif
	_delay_ms(1);
}
     c14:	cf 91       	pop	r28
     c16:	08 95       	ret

00000c18 <LCD_vInit>:
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE);
	_delay_ms(1);

	#elif defined four_bits_mode
	DIO_vsetPINDir(data_port,4,1);
     c18:	81 e4       	ldi	r24, 0x41	; 65
     c1a:	64 e0       	ldi	r22, 0x04	; 4
     c1c:	41 e0       	ldi	r20, 0x01	; 1
     c1e:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir(data_port,5,1);
     c22:	81 e4       	ldi	r24, 0x41	; 65
     c24:	65 e0       	ldi	r22, 0x05	; 5
     c26:	41 e0       	ldi	r20, 0x01	; 1
     c28:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir(data_port,6,1);
     c2c:	81 e4       	ldi	r24, 0x41	; 65
     c2e:	66 e0       	ldi	r22, 0x06	; 6
     c30:	41 e0       	ldi	r20, 0x01	; 1
     c32:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir(data_port,7,1);
     c36:	81 e4       	ldi	r24, 0x41	; 65
     c38:	67 e0       	ldi	r22, 0x07	; 7
     c3a:	41 e0       	ldi	r20, 0x01	; 1
     c3c:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir(control_port,RS,1);
     c40:	82 e4       	ldi	r24, 0x42	; 66
     c42:	62 e0       	ldi	r22, 0x02	; 2
     c44:	41 e0       	ldi	r20, 0x01	; 1
     c46:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir(control_port,EN,1);
     c4a:	82 e4       	ldi	r24, 0x42	; 66
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	41 e0       	ldi	r20, 0x01	; 1
     c50:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir(control_port,RW,1);
     c54:	82 e4       	ldi	r24, 0x42	; 66
     c56:	61 e0       	ldi	r22, 0x01	; 1
     c58:	41 e0       	ldi	r20, 0x01	; 1
     c5a:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_write(control_port,RW,0);
     c5e:	82 e4       	ldi	r24, 0x42	; 66
     c60:	61 e0       	ldi	r22, 0x01	; 1
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
	LCD_vSend_cmd(RETURN_HOME);
     c68:	82 e0       	ldi	r24, 0x02	; 2
     c6a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LCD_vSend_cmd>
     c6e:	8f e1       	ldi	r24, 0x1F	; 31
     c70:	9e e4       	ldi	r25, 0x4E	; 78
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <LCD_vInit+0x5a>
     c76:	00 c0       	rjmp	.+0      	; 0xc78 <LCD_vInit+0x60>
     c78:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS); //4 bit mode
     c7a:	88 e2       	ldi	r24, 0x28	; 40
     c7c:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LCD_vSend_cmd>
     c80:	8f ec       	ldi	r24, 0xCF	; 207
     c82:	97 e0       	ldi	r25, 0x07	; 7
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	f1 f7       	brne	.-4      	; 0xc84 <LCD_vInit+0x6c>
     c88:	00 c0       	rjmp	.+0      	; 0xc8a <LCD_vInit+0x72>
     c8a:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(DISPLAYON_CURSORON);
     c8c:	8e e0       	ldi	r24, 0x0E	; 14
     c8e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LCD_vSend_cmd>
     c92:	8f ec       	ldi	r24, 0xCF	; 207
     c94:	97 e0       	ldi	r25, 0x07	; 7
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	f1 f7       	brne	.-4      	; 0xc96 <LCD_vInit+0x7e>
     c9a:	00 c0       	rjmp	.+0      	; 0xc9c <LCD_vInit+0x84>
     c9c:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLEAR_SCREEN);
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LCD_vSend_cmd>
     ca4:	8f e1       	ldi	r24, 0x1F	; 31
     ca6:	9e e4       	ldi	r25, 0x4E	; 78
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	f1 f7       	brne	.-4      	; 0xca8 <LCD_vInit+0x90>
     cac:	00 c0       	rjmp	.+0      	; 0xcae <LCD_vInit+0x96>
     cae:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE);
     cb0:	86 e0       	ldi	r24, 0x06	; 6
     cb2:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LCD_vSend_cmd>
     cb6:	8f ec       	ldi	r24, 0xCF	; 207
     cb8:	97 e0       	ldi	r25, 0x07	; 7
     cba:	01 97       	sbiw	r24, 0x01	; 1
     cbc:	f1 f7       	brne	.-4      	; 0xcba <LCD_vInit+0xa2>
     cbe:	00 c0       	rjmp	.+0      	; 0xcc0 <LCD_vInit+0xa8>
     cc0:	00 00       	nop
	_delay_ms(1);
	#endif
}
     cc2:	08 95       	ret

00000cc4 <LCD_vSend_char>:
	_delay_ms(2);
	DIO_write(control_port,EN,0);
	_delay_ms(2);
}
void LCD_vSend_char(char data)
{
     cc4:	cf 93       	push	r28
     cc6:	c8 2f       	mov	r28, r24
		DIO_write_port(data_port,data);
		DIO_write(control_port,RS,1);
		LCD_Enable();

	#elif defined four_bits_mode
		DIO_write_high_nibble(data_port,data>>4);
     cc8:	68 2f       	mov	r22, r24
     cca:	62 95       	swap	r22
     ccc:	6f 70       	andi	r22, 0x0F	; 15
     cce:	81 e4       	ldi	r24, 0x41	; 65
     cd0:	0e 94 1b 05 	call	0xa36	; 0xa36 <DIO_write_high_nibble>
		DIO_write(control_port,RS,1);
     cd4:	82 e4       	ldi	r24, 0x42	; 66
     cd6:	62 e0       	ldi	r22, 0x02	; 2
     cd8:	41 e0       	ldi	r20, 0x01	; 1
     cda:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
		LCD_Enable();
     cde:	0e 94 d3 05 	call	0xba6	; 0xba6 <LCD_Enable>
		DIO_write_high_nibble(data_port,data);
     ce2:	81 e4       	ldi	r24, 0x41	; 65
     ce4:	6c 2f       	mov	r22, r28
     ce6:	0e 94 1b 05 	call	0xa36	; 0xa36 <DIO_write_high_nibble>
		DIO_write(control_port,RS,1);
     cea:	82 e4       	ldi	r24, 0x42	; 66
     cec:	62 e0       	ldi	r22, 0x02	; 2
     cee:	41 e0       	ldi	r20, 0x01	; 1
     cf0:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
		LCD_Enable();
     cf4:	0e 94 d3 05 	call	0xba6	; 0xba6 <LCD_Enable>
     cf8:	8f ec       	ldi	r24, 0xCF	; 207
     cfa:	97 e0       	ldi	r25, 0x07	; 7
     cfc:	01 97       	sbiw	r24, 0x01	; 1
     cfe:	f1 f7       	brne	.-4      	; 0xcfc <LCD_vSend_char+0x38>
     d00:	00 c0       	rjmp	.+0      	; 0xd02 <LCD_vSend_char+0x3e>
     d02:	00 00       	nop
	#endif
	_delay_ms(1);
}
     d04:	cf 91       	pop	r28
     d06:	08 95       	ret

00000d08 <LCD_vSend_string>:
void LCD_vSend_string(char *data)
{
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	ec 01       	movw	r28, r24
	while((*data)!='\0')
     d0e:	88 81       	ld	r24, Y
     d10:	88 23       	and	r24, r24
     d12:	31 f0       	breq	.+12     	; 0xd20 <LCD_vSend_string+0x18>
		DIO_write(control_port,RS,1);
		LCD_Enable();
	#endif
	_delay_ms(1);
}
void LCD_vSend_string(char *data)
     d14:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
     d16:	0e 94 62 06 	call	0xcc4	; 0xcc4 <LCD_vSend_char>
	#endif
	_delay_ms(1);
}
void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
     d1a:	89 91       	ld	r24, Y+
     d1c:	88 23       	and	r24, r24
     d1e:	d9 f7       	brne	.-10     	; 0xd16 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <LCD_ClearScreen>:
void LCD_ClearScreen()
{
	LCD_vSend_cmd(CLEAR_SCREEN);
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LCD_vSend_cmd>
     d2c:	8f e1       	ldi	r24, 0x1F	; 31
     d2e:	9e e4       	ldi	r25, 0x4E	; 78
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	f1 f7       	brne	.-4      	; 0xd30 <LCD_ClearScreen+0xa>
     d34:	00 c0       	rjmp	.+0      	; 0xd36 <LCD_ClearScreen+0x10>
     d36:	00 00       	nop
	_delay_ms(10);
}
     d38:	08 95       	ret

00000d3a <LCD_movecursor>:
void LCD_movecursor(char row, char coloumn)
{
     d3a:	cf 93       	push	r28
	char temp;
	if(row>2||row<1||coloumn>16||coloumn<1)
     d3c:	98 2f       	mov	r25, r24
     d3e:	91 50       	subi	r25, 0x01	; 1
     d40:	92 30       	cpi	r25, 0x02	; 2
     d42:	20 f4       	brcc	.+8      	; 0xd4c <LCD_movecursor+0x12>
     d44:	61 31       	cpi	r22, 0x11	; 17
     d46:	10 f4       	brcc	.+4      	; 0xd4c <LCD_movecursor+0x12>
     d48:	66 23       	and	r22, r22
     d4a:	21 f4       	brne	.+8      	; 0xd54 <LCD_movecursor+0x1a>
	{
		LCD_vSend_cmd(0x80);
     d4c:	80 e8       	ldi	r24, 0x80	; 128
     d4e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LCD_vSend_cmd>
     d52:	09 c0       	rjmp	.+18     	; 0xd66 <LCD_movecursor+0x2c>
	}
	else if(row==1)
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	19 f4       	brne	.+6      	; 0xd5e <LCD_movecursor+0x24>
	{
		temp=0x80+coloumn-1;
     d58:	c6 2f       	mov	r28, r22
     d5a:	c1 58       	subi	r28, 0x81	; 129
     d5c:	04 c0       	rjmp	.+8      	; 0xd66 <LCD_movecursor+0x2c>

	}
	else if(row==2)
     d5e:	82 30       	cpi	r24, 0x02	; 2
     d60:	11 f4       	brne	.+4      	; 0xd66 <LCD_movecursor+0x2c>
	{
		temp=0xC0+coloumn-1;
     d62:	c6 2f       	mov	r28, r22
     d64:	c1 54       	subi	r28, 0x41	; 65

	}
	LCD_vSend_cmd(temp);
     d66:	8c 2f       	mov	r24, r28
     d68:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <LCD_vSend_cmd>
     d6c:	8f ec       	ldi	r24, 0xCF	; 207
     d6e:	97 e0       	ldi	r25, 0x07	; 7
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	f1 f7       	brne	.-4      	; 0xd70 <LCD_movecursor+0x36>
     d74:	00 c0       	rjmp	.+0      	; 0xd76 <LCD_movecursor+0x3c>
     d76:	00 00       	nop
	_delay_ms(1);
}
     d78:	cf 91       	pop	r28
     d7a:	08 95       	ret

00000d7c <SPI_MasterInit>:
#define F_CPU 8000000
#include <avr/delay.h>
void SPI_MasterInit(void)
{
	/*Set SS / MOSI / SCK  as output pins for master*/
	DIO_vsetPINDir(room_ss_pin,1);
     d7c:	83 e4       	ldi	r24, 0x43	; 67
     d7e:	61 e0       	ldi	r22, 0x01	; 1
     d80:	41 e0       	ldi	r20, 0x01	; 1
     d82:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir(control_ss_pin,1);
     d86:	83 e4       	ldi	r24, 0x43	; 67
     d88:	63 e0       	ldi	r22, 0x03	; 3
     d8a:	41 e0       	ldi	r20, 0x01	; 1
     d8c:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir(display_ss_pin,1);
     d90:	83 e4       	ldi	r24, 0x43	; 67
     d92:	65 e0       	ldi	r22, 0x05	; 5
     d94:	41 e0       	ldi	r20, 0x01	; 1
     d96:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',5,1);
     d9a:	82 e4       	ldi	r24, 0x42	; 66
     d9c:	65 e0       	ldi	r22, 0x05	; 5
     d9e:	41 e0       	ldi	r20, 0x01	; 1
     da0:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',7,1);
     da4:	82 e4       	ldi	r24, 0x42	; 66
     da6:	67 e0       	ldi	r22, 0x07	; 7
     da8:	41 e0       	ldi	r20, 0x01	; 1
     daa:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
	SET_BIT(SPCR,MSTR);//Selects master mode
     dae:	6c 9a       	sbi	0x0d, 4	; 13
	CLR_BIT(SPCR,SPR0);
     db0:	68 98       	cbi	0x0d, 0	; 13
	CLR_BIT(SPCR,SPR1);
     db2:	69 98       	cbi	0x0d, 1	; 13
	CLR_BIT(SPSR,SPI2X); //Set frequency of master to Focs/4
     db4:	70 98       	cbi	0x0e, 0	; 14
	SET_BIT(SPCR,SPE);//Enables SPI
     db6:	6e 9a       	sbi	0x0d, 6	; 13
	/*enable interrupt*/
	//SET_BIT(SPCR,SPIE);
	CLR_BIT(SPCR,CPOL);
     db8:	6b 98       	cbi	0x0d, 3	; 13
	CLR_BIT(SPCR,CPHA); //Leading edge->sample (rising)   Trailling edge->Setup (falling)
     dba:	6a 98       	cbi	0x0d, 2	; 13
	/*set SS to high*/
	DIO_write(room_ss_pin,1);
     dbc:	83 e4       	ldi	r24, 0x43	; 67
     dbe:	61 e0       	ldi	r22, 0x01	; 1
     dc0:	41 e0       	ldi	r20, 0x01	; 1
     dc2:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
	DIO_write(control_ss_pin,1);
     dc6:	83 e4       	ldi	r24, 0x43	; 67
     dc8:	63 e0       	ldi	r22, 0x03	; 3
     dca:	41 e0       	ldi	r20, 0x01	; 1
     dcc:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
	
}
     dd0:	08 95       	ret

00000dd2 <SPI_SlaveInit>:
void SPI_SlaveInit(void)
{
	CLR_BIT(SPCR,MSTR);//Selects slave mode
     dd2:	6c 98       	cbi	0x0d, 4	; 13
	SET_BIT(SPCR,SPE);//Enables SPI
     dd4:	6e 9a       	sbi	0x0d, 6	; 13
	/*Set MISO as output*/
	DIO_vsetPINDir('B',6,1);
     dd6:	82 e4       	ldi	r24, 0x42	; 66
     dd8:	66 e0       	ldi	r22, 0x06	; 6
     dda:	41 e0       	ldi	r20, 0x01	; 1
     ddc:	0e 94 31 02 	call	0x462	; 0x462 <DIO_vsetPINDir>
}
     de0:	08 95       	ret

00000de2 <SPI_MasterTransmitchar>:
unsigned char SPI_MasterTransmitchar(unsigned char Data,unsigned char slave_port,unsigned char slave_pin)
{
     de2:	cf 93       	push	r28
     de4:	c8 2f       	mov	r28, r24
     de6:	86 2f       	mov	r24, r22
	/*Clear SS to send data to slave*/
	DIO_write(slave_port,slave_pin,0);
     de8:	64 2f       	mov	r22, r20
     dea:	40 e0       	ldi	r20, 0x00	; 0
     dec:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
	/*put data on SPDR*/
	SPDR=Data;
     df0:	cf b9       	out	0x0f, r28	; 15
	while(READ_BIT(SPSR,SPIF)==0);
     df2:	77 9b       	sbis	0x0e, 7	; 14
     df4:	fe cf       	rjmp	.-4      	; 0xdf2 <SPI_MasterTransmitchar+0x10>
	/*read the received data*/
	//DIO_write(slave_port,slave_pin,1); //Deselect slave
	return SPDR ;
     df6:	8f b1       	in	r24, 0x0f	; 15
}
     df8:	cf 91       	pop	r28
     dfa:	08 95       	ret

00000dfc <SPI_SlaveReceivechar>:
unsigned char SPI_SlaveReceivechar(unsigned char Data)
{
	/*Put data on SPDR*/
	SPDR=Data;
     dfc:	8f b9       	out	0x0f, r24	; 15
	/*Wait until data is received in SPI register*/
	while(READ_BIT(SPSR,SPIF)==0);
     dfe:	77 9b       	sbis	0x0e, 7	; 14
     e00:	fe cf       	rjmp	.-4      	; 0xdfe <SPI_SlaveReceivechar+0x2>
	/*read the received data*/
	return SPDR ;
     e02:	8f b1       	in	r24, 0x0f	; 15
}
     e04:	08 95       	ret

00000e06 <SPI_MasterTransmitstring>:

void SPI_MasterTransmitstring(unsigned char *ptr,unsigned char slave_port,unsigned char slave_pin)
{
     e06:	0f 93       	push	r16
     e08:	1f 93       	push	r17
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	ec 01       	movw	r28, r24
     e10:	06 2f       	mov	r16, r22
     e12:	14 2f       	mov	r17, r20
	while((*ptr)!=0)
     e14:	88 81       	ld	r24, Y
     e16:	88 23       	and	r24, r24
     e18:	89 f0       	breq	.+34     	; 0xe3c <SPI_MasterTransmitstring+0x36>
	while(READ_BIT(SPSR,SPIF)==0);
	/*read the received data*/
	return SPDR ;
}

void SPI_MasterTransmitstring(unsigned char *ptr,unsigned char slave_port,unsigned char slave_pin)
     e1a:	21 96       	adiw	r28, 0x01	; 1
{
	while((*ptr)!=0)
	{
		SPI_MasterTransmitchar(*ptr,slave_port,slave_pin);
     e1c:	60 2f       	mov	r22, r16
     e1e:	41 2f       	mov	r20, r17
     e20:	0e 94 f1 06 	call	0xde2	; 0xde2 <SPI_MasterTransmitchar>
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	92 e5       	ldi	r25, 0x52	; 82
     e28:	a7 e0       	ldi	r26, 0x07	; 7
     e2a:	81 50       	subi	r24, 0x01	; 1
     e2c:	90 40       	sbci	r25, 0x00	; 0
     e2e:	a0 40       	sbci	r26, 0x00	; 0
     e30:	e1 f7       	brne	.-8      	; 0xe2a <SPI_MasterTransmitstring+0x24>
     e32:	00 c0       	rjmp	.+0      	; 0xe34 <SPI_MasterTransmitstring+0x2e>
     e34:	00 00       	nop
	return SPDR ;
}

void SPI_MasterTransmitstring(unsigned char *ptr,unsigned char slave_port,unsigned char slave_pin)
{
	while((*ptr)!=0)
     e36:	89 91       	ld	r24, Y+
     e38:	88 23       	and	r24, r24
     e3a:	81 f7       	brne	.-32     	; 0xe1c <SPI_MasterTransmitstring+0x16>
	{
		SPI_MasterTransmitchar(*ptr,slave_port,slave_pin);
		_delay_ms(300);
		ptr++;
	}
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	1f 91       	pop	r17
     e42:	0f 91       	pop	r16
     e44:	08 95       	ret

00000e46 <vInit_Timer0_NormalMode>:
#include <avr/io.h>
#include "std_macros.h"
#include <avr/interrupt.h>
void vInit_Timer0_NormalMode()
{
	CLR_BIT(TCCR0,WGM01);
     e46:	83 b7       	in	r24, 0x33	; 51
     e48:	87 7f       	andi	r24, 0xF7	; 247
     e4a:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,WGM00); //Choose Normal mode
     e4c:	83 b7       	in	r24, 0x33	; 51
     e4e:	8f 7b       	andi	r24, 0xBF	; 191
     e50:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);
     e52:	83 b7       	in	r24, 0x33	; 51
     e54:	81 60       	ori	r24, 0x01	; 1
     e56:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
     e58:	83 b7       	in	r24, 0x33	; 51
     e5a:	8d 7f       	andi	r24, 0xFD	; 253
     e5c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02); //Set prescaler to /1024
     e5e:	83 b7       	in	r24, 0x33	; 51
     e60:	84 60       	ori	r24, 0x04	; 4
     e62:	83 bf       	out	0x33, r24	; 51
	sei();
     e64:	78 94       	sei
	SET_BIT(TIMSK,TOIE0); //Enable interrupt
     e66:	89 b7       	in	r24, 0x39	; 57
     e68:	81 60       	ori	r24, 0x01	; 1
     e6a:	89 bf       	out	0x39, r24	; 57
	TCNT0=200; //Preload value
     e6c:	88 ec       	ldi	r24, 0xC8	; 200
     e6e:	82 bf       	out	0x32, r24	; 50
}
     e70:	08 95       	ret

00000e72 <vInit_Timer0_CTC>:
void vInit_Timer0_CTC()
{
	SET_BIT(TCCR0,WGM01);
     e72:	83 b7       	in	r24, 0x33	; 51
     e74:	88 60       	ori	r24, 0x08	; 8
     e76:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,WGM00); //Choose CTC
     e78:	83 b7       	in	r24, 0x33	; 51
     e7a:	8f 7b       	andi	r24, 0xBF	; 191
     e7c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);
     e7e:	83 b7       	in	r24, 0x33	; 51
     e80:	81 60       	ori	r24, 0x01	; 1
     e82:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
     e84:	83 b7       	in	r24, 0x33	; 51
     e86:	8d 7f       	andi	r24, 0xFD	; 253
     e88:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02); //Set prescaler to /1024
     e8a:	83 b7       	in	r24, 0x33	; 51
     e8c:	84 60       	ori	r24, 0x04	; 4
     e8e:	83 bf       	out	0x33, r24	; 51
	sei();
     e90:	78 94       	sei
	SET_BIT(TIMSK,OCIE0); //Enable interrupt
     e92:	89 b7       	in	r24, 0x39	; 57
     e94:	82 60       	ori	r24, 0x02	; 2
     e96:	89 bf       	out	0x39, r24	; 57
	OCR0=156; //Compare value (156 is reached every 0.02 sec)
     e98:	8c e9       	ldi	r24, 0x9C	; 156
     e9a:	8c bf       	out	0x3c, r24	; 60
	//Time of each tick = prescaler/Clock of mp
	//value=time needed/Time of each tick
}
     e9c:	08 95       	ret

00000e9e <Timer0_NonPWM_wave>:
void Timer0_NonPWM_wave()
{
    SET_BIT(DDRB,3); //you have to set  OC0 pin (PB3) as output pin to be able to generate a wave on this pin .
     e9e:	bb 9a       	sbi	0x17, 3	; 23
    SET_BIT(TCCR0,WGM01);
     ea0:	83 b7       	in	r24, 0x33	; 51
     ea2:	88 60       	ori	r24, 0x08	; 8
     ea4:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,WGM00); //Choose CTC
     ea6:	83 b7       	in	r24, 0x33	; 51
     ea8:	8f 7b       	andi	r24, 0xBF	; 191
     eaa:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);
     eac:	83 b7       	in	r24, 0x33	; 51
     eae:	81 60       	ori	r24, 0x01	; 1
     eb0:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
     eb2:	83 b7       	in	r24, 0x33	; 51
     eb4:	8d 7f       	andi	r24, 0xFD	; 253
     eb6:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02); //Set prescaler to /1024
     eb8:	83 b7       	in	r24, 0x33	; 51
     eba:	84 60       	ori	r24, 0x04	; 4
     ebc:	83 bf       	out	0x33, r24	; 51
	OCR0=156; //Compare value
     ebe:	8c e9       	ldi	r24, 0x9C	; 156
     ec0:	8c bf       	out	0x3c, r24	; 60
    SET_BIT(TCCR0,COM00); // Toggle mode
     ec2:	83 b7       	in	r24, 0x33	; 51
     ec4:	80 61       	ori	r24, 0x10	; 16
     ec6:	83 bf       	out	0x33, r24	; 51


}
     ec8:	08 95       	ret

00000eca <Timer0_fastPWM_wave>:
void Timer0_fastPWM_wave()
{
    SET_BIT(DDRB,3); //you have to set  OC0 pin (PB3) as output pin to be able to generate a wave on this pin .
     eca:	bb 9a       	sbi	0x17, 3	; 23
    SET_BIT(TCCR0,WGM01);
     ecc:	83 b7       	in	r24, 0x33	; 51
     ece:	88 60       	ori	r24, 0x08	; 8
     ed0:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM00); //Choose fast pwm
     ed2:	83 b7       	in	r24, 0x33	; 51
     ed4:	80 64       	ori	r24, 0x40	; 64
     ed6:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);
     ed8:	83 b7       	in	r24, 0x33	; 51
     eda:	81 60       	ori	r24, 0x01	; 1
     edc:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
     ede:	83 b7       	in	r24, 0x33	; 51
     ee0:	8d 7f       	andi	r24, 0xFD	; 253
     ee2:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02); //Set prescaler to /1024
     ee4:	83 b7       	in	r24, 0x33	; 51
     ee6:	84 60       	ori	r24, 0x04	; 4
     ee8:	83 bf       	out	0x33, r24	; 51
	OCR0=192; //Compare value (75 % duty cycle)
     eea:	80 ec       	ldi	r24, 0xC0	; 192
     eec:	8c bf       	out	0x3c, r24	; 60
    SET_BIT(TCCR0,COM01); // non inverting mode (The higher the OCR0 the higher the duty cycle)
     eee:	83 b7       	in	r24, 0x33	; 51
     ef0:	80 62       	ori	r24, 0x20	; 32
     ef2:	83 bf       	out	0x33, r24	; 51



}
     ef4:	08 95       	ret

00000ef6 <Timer0_pashcorrectPWM_wave>:
void Timer0_pashcorrectPWM_wave()
{
	SET_BIT(DDRB,3); //you have to set  OC0 pin (PB3) as output pin to be able to generate a wave on this pin.
     ef6:	bb 9a       	sbi	0x17, 3	; 23
	CLR_BIT(TCCR0,WGM01);
     ef8:	83 b7       	in	r24, 0x33	; 51
     efa:	87 7f       	andi	r24, 0xF7	; 247
     efc:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM00); //Choose phase correct
     efe:	83 b7       	in	r24, 0x33	; 51
     f00:	80 64       	ori	r24, 0x40	; 64
     f02:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);
     f04:	83 b7       	in	r24, 0x33	; 51
     f06:	81 60       	ori	r24, 0x01	; 1
     f08:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
     f0a:	83 b7       	in	r24, 0x33	; 51
     f0c:	8d 7f       	andi	r24, 0xFD	; 253
     f0e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02); //Set prescaler to /1024
     f10:	83 b7       	in	r24, 0x33	; 51
     f12:	84 60       	ori	r24, 0x04	; 4
     f14:	83 bf       	out	0x33, r24	; 51
	OCR0=192; //Compare value
     f16:	80 ec       	ldi	r24, 0xC0	; 192
     f18:	8c bf       	out	0x3c, r24	; 60
	SET_BIT(TCCR0,COM01);
     f1a:	83 b7       	in	r24, 0x33	; 51
     f1c:	80 62       	ori	r24, 0x20	; 32
     f1e:	83 bf       	out	0x33, r24	; 51
}
     f20:	08 95       	ret

00000f22 <vInit_Timer2_NormalMode>:

void vInit_Timer2_NormalMode()
{
	CLR_BIT(TCCR2,WGM21);
     f22:	85 b5       	in	r24, 0x25	; 37
     f24:	87 7f       	andi	r24, 0xF7	; 247
     f26:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,WGM20); //Choose Normal mode
     f28:	85 b5       	in	r24, 0x25	; 37
     f2a:	8f 7b       	andi	r24, 0xBF	; 191
     f2c:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
     f2e:	85 b5       	in	r24, 0x25	; 37
     f30:	84 60       	ori	r24, 0x04	; 4
     f32:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,CS21);
     f34:	85 b5       	in	r24, 0x25	; 37
     f36:	8d 7f       	andi	r24, 0xFD	; 253
     f38:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS20); //Set prescaler to /1024
     f3a:	85 b5       	in	r24, 0x25	; 37
     f3c:	81 60       	ori	r24, 0x01	; 1
     f3e:	85 bd       	out	0x25, r24	; 37
	SET_BIT(ASSR,AS2);//Now clock is coming from PB6 PB7
     f40:	82 b5       	in	r24, 0x22	; 34
     f42:	88 60       	ori	r24, 0x08	; 8
     f44:	82 bd       	out	0x22, r24	; 34
	sei();
     f46:	78 94       	sei
	SET_BIT(TIMSK,TOIE2); //Enable interrupt
     f48:	89 b7       	in	r24, 0x39	; 57
     f4a:	80 64       	ori	r24, 0x40	; 64
     f4c:	89 bf       	out	0x39, r24	; 57
	TCNT2=0; //Preload value
     f4e:	14 bc       	out	0x24, r1	; 36
     f50:	08 95       	ret

00000f52 <UART_vInit>:
#include <util/delay.h>
#include <avr/io.h>
#include "std_macros.h"

void UART_vInit (unsigned long baud)
{
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
	// Choosing the baud rate
	unsigned short baudrate=(F_CPU/(16*baud))-1;
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	aa 1f       	adc	r26, r26
     f5c:	bb 1f       	adc	r27, r27
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	aa 1f       	adc	r26, r26
     f64:	bb 1f       	adc	r27, r27
     f66:	9c 01       	movw	r18, r24
     f68:	ad 01       	movw	r20, r26
     f6a:	22 0f       	add	r18, r18
     f6c:	33 1f       	adc	r19, r19
     f6e:	44 1f       	adc	r20, r20
     f70:	55 1f       	adc	r21, r21
     f72:	22 0f       	add	r18, r18
     f74:	33 1f       	adc	r19, r19
     f76:	44 1f       	adc	r20, r20
     f78:	55 1f       	adc	r21, r21
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	72 e1       	ldi	r23, 0x12	; 18
     f7e:	8a e7       	ldi	r24, 0x7A	; 122
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__udivmodsi4>
     f86:	21 50       	subi	r18, 0x01	; 1
     f88:	30 40       	sbci	r19, 0x00	; 0
	UBRRH =(unsigned char)(baudrate>>8);
     f8a:	30 bd       	out	0x20, r19	; 32
	UBRRL =(unsigned char) baudrate;
     f8c:	29 b9       	out	0x09, r18	; 9
	// Enable trasmit and recieve
	SET_BIT(UCSRB,TXEN);
     f8e:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB,RXEN);
     f90:	54 9a       	sbi	0x0a, 4	; 10
	//Choose number of data bits (8) and parity (no parity) and stop bits (1) 
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
     f92:	86 e8       	ldi	r24, 0x86	; 134
     f94:	80 bd       	out	0x20, r24	; 32
}
     f96:	08 95       	ret

00000f98 <UART_vSendData>:
void UART_vSendData(char data)
{
	//wait for UDR transmit buffer to be empty
	while (!READ_BIT(UCSRA,UDRE));
     f98:	5d 9b       	sbis	0x0b, 5	; 11
     f9a:	fe cf       	rjmp	.-4      	; 0xf98 <UART_vSendData>
	//Put data in UDR
	UDR=data;
     f9c:	8c b9       	out	0x0c, r24	; 12
}
     f9e:	08 95       	ret

00000fa0 <UART_u8ReceiveData>:
char UART_u8ReceiveData(void)
{
	//wait for UDR recieve buffer to be filled with data
	while (!READ_BIT(UCSRA,RXC));
     fa0:	5f 9b       	sbis	0x0b, 7	; 11
     fa2:	fe cf       	rjmp	.-4      	; 0xfa0 <UART_u8ReceiveData>
	return UDR;
     fa4:	8c b1       	in	r24, 0x0c	; 12
}
     fa6:	08 95       	ret

00000fa8 <UART_vSendString>:
void UART_vSendString(char* ptr)
{
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	ec 01       	movw	r28, r24
	while(*ptr!=0)
     fae:	88 81       	ld	r24, Y
     fb0:	88 23       	and	r24, r24
     fb2:	79 f0       	breq	.+30     	; 0xfd2 <UART_vSendString+0x2a>
{
	//wait for UDR recieve buffer to be filled with data
	while (!READ_BIT(UCSRA,RXC));
	return UDR;
}
void UART_vSendString(char* ptr)
     fb4:	21 96       	adiw	r28, 0x01	; 1
{
	while(*ptr!=0)
	{
		UART_vSendData(*ptr);
     fb6:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_vSendData>
     fba:	8f ef       	ldi	r24, 0xFF	; 255
     fbc:	90 e7       	ldi	r25, 0x70	; 112
     fbe:	a2 e0       	ldi	r26, 0x02	; 2
     fc0:	81 50       	subi	r24, 0x01	; 1
     fc2:	90 40       	sbci	r25, 0x00	; 0
     fc4:	a0 40       	sbci	r26, 0x00	; 0
     fc6:	e1 f7       	brne	.-8      	; 0xfc0 <UART_vSendString+0x18>
     fc8:	00 c0       	rjmp	.+0      	; 0xfca <UART_vSendString+0x22>
     fca:	00 00       	nop
	while (!READ_BIT(UCSRA,RXC));
	return UDR;
}
void UART_vSendString(char* ptr)
{
	while(*ptr!=0)
     fcc:	89 91       	ld	r24, Y+
     fce:	88 23       	and	r24, r24
     fd0:	91 f7       	brne	.-28     	; 0xfb6 <UART_vSendString+0xe>
	{
		UART_vSendData(*ptr);
		ptr++;
		_delay_ms(100);
	}
}
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	08 95       	ret

00000fd8 <__udivmodsi4>:
     fd8:	a1 e2       	ldi	r26, 0x21	; 33
     fda:	1a 2e       	mov	r1, r26
     fdc:	aa 1b       	sub	r26, r26
     fde:	bb 1b       	sub	r27, r27
     fe0:	fd 01       	movw	r30, r26
     fe2:	0d c0       	rjmp	.+26     	; 0xffe <__udivmodsi4_ep>

00000fe4 <__udivmodsi4_loop>:
     fe4:	aa 1f       	adc	r26, r26
     fe6:	bb 1f       	adc	r27, r27
     fe8:	ee 1f       	adc	r30, r30
     fea:	ff 1f       	adc	r31, r31
     fec:	a2 17       	cp	r26, r18
     fee:	b3 07       	cpc	r27, r19
     ff0:	e4 07       	cpc	r30, r20
     ff2:	f5 07       	cpc	r31, r21
     ff4:	20 f0       	brcs	.+8      	; 0xffe <__udivmodsi4_ep>
     ff6:	a2 1b       	sub	r26, r18
     ff8:	b3 0b       	sbc	r27, r19
     ffa:	e4 0b       	sbc	r30, r20
     ffc:	f5 0b       	sbc	r31, r21

00000ffe <__udivmodsi4_ep>:
     ffe:	66 1f       	adc	r22, r22
    1000:	77 1f       	adc	r23, r23
    1002:	88 1f       	adc	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	1a 94       	dec	r1
    1008:	69 f7       	brne	.-38     	; 0xfe4 <__udivmodsi4_loop>
    100a:	60 95       	com	r22
    100c:	70 95       	com	r23
    100e:	80 95       	com	r24
    1010:	90 95       	com	r25
    1012:	9b 01       	movw	r18, r22
    1014:	ac 01       	movw	r20, r24
    1016:	bd 01       	movw	r22, r26
    1018:	cf 01       	movw	r24, r30
    101a:	08 95       	ret

0000101c <_exit>:
    101c:	f8 94       	cli

0000101e <__stop_program>:
    101e:	ff cf       	rjmp	.-2      	; 0x101e <__stop_program>
